{"version":3,"sources":["@wordpress/block-editor/src/store/actions.js"],"names":["ensureDefaultBlock","selectPreviousBlock","selectNextBlock","replaceBlocks","moveBlockToPosition","insertBlocks","removeBlocks","count","insertDefaultBlock","resetBlocks","blocks","type","receiveBlocks","updateBlockAttributes","clientId","attributes","updateBlock","updates","selectBlock","initialPosition","previousBlockClientId","nextBlockClientId","startMultiSelect","stopMultiSelect","multiSelect","start","end","clearSelectedBlock","toggleSelection","isSelectionEnabled","getBlocksWithDefaultStylesApplied","blockEditorSettings","preferredStyleVariations","map","block","blockName","name","className","blockStyle","trim","clientIds","indexToSelect","rootClientId","index","length","canInsertBlock","time","Date","now","replaceBlock","createOnMove","moveBlocksDown","moveBlocksUp","fromRootClientId","toRootClientId","templateLock","action","insertBlock","updateSelection","allowedBlocks","isValid","push","showInsertionPoint","hideInsertionPoint","setTemplateValidity","synchronizeTemplate","mergeBlocks","firstBlockClientId","secondBlockClientId","selectPrevious","removeBlock","replaceInnerBlocks","toggleBlockMode","startTyping","stopTyping","enterFormattedText","exitFormattedText","selectionChange","attributeKey","startOffset","endOffset","defaultBlockName","updateBlockListSettings","settings","updateSettings","__unstableSaveReusableBlock","id","updatedId","__unstableMarkLastChangeAsPersistent","__unstableMarkAutomaticChange","setNavigationMode","isNavigationMode"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { castArray, first, get, includes } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { getDefaultBlockName, createBlock } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { select } from './controls';\n\n/**\n * Generator which will yield a default block insert action if there\n * are no other blocks at the root of the editor. This generator should be used\n * in actions which may result in no blocks remaining in the editor (removal,\n * replacement, etc).\n */\nfunction* ensureDefaultBlock() {\n\tconst count = yield select(\n\t\t'core/block-editor',\n\t\t'getBlockCount',\n\t);\n\n\t// To avoid a focus loss when removing the last block, assure there is\n\t// always a default block if the last of the blocks have been removed.\n\tif ( count === 0 ) {\n\t\tyield insertDefaultBlock();\n\t}\n}\n\n/**\n * Returns an action object used in signalling that blocks state should be\n * reset to the specified array of blocks, taking precedence over any other\n * content reflected as an edit in state.\n *\n * @param {Array} blocks Array of blocks.\n *\n * @return {Object} Action object.\n */\nexport function resetBlocks( blocks ) {\n\treturn {\n\t\ttype: 'RESET_BLOCKS',\n\t\tblocks,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that blocks have been received.\n * Unlike resetBlocks, these should be appended to the existing known set, not\n * replacing.\n *\n * @param {Object[]} blocks Array of block objects.\n *\n * @return {Object} Action object.\n */\nexport function receiveBlocks( blocks ) {\n\treturn {\n\t\ttype: 'RECEIVE_BLOCKS',\n\t\tblocks,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the block attributes with\n * the specified client ID has been updated.\n *\n * @param {string} clientId   Block client ID.\n * @param {Object} attributes Block attributes to be merged.\n *\n * @return {Object} Action object.\n */\nexport function updateBlockAttributes( clientId, attributes ) {\n\treturn {\n\t\ttype: 'UPDATE_BLOCK_ATTRIBUTES',\n\t\tclientId,\n\t\tattributes,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the block with the\n * specified client ID has been updated.\n *\n * @param {string} clientId Block client ID.\n * @param {Object} updates  Block attributes to be merged.\n *\n * @return {Object} Action object.\n */\nexport function updateBlock( clientId, updates ) {\n\treturn {\n\t\ttype: 'UPDATE_BLOCK',\n\t\tclientId,\n\t\tupdates,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the block with the\n * specified client ID has been selected, optionally accepting a position\n * value reflecting its selection directionality. An initialPosition of -1\n * reflects a reverse selection.\n *\n * @param {string}  clientId        Block client ID.\n * @param {?number} initialPosition Optional initial position. Pass as -1 to\n *                                  reflect reverse selection.\n *\n * @return {Object} Action object.\n */\nexport function selectBlock( clientId, initialPosition = null ) {\n\treturn {\n\t\ttype: 'SELECT_BLOCK',\n\t\tinitialPosition,\n\t\tclientId,\n\t};\n}\n\n/**\n * Yields action objects used in signalling that the block preceding the given\n * clientId should be selected.\n *\n * @param {string} clientId Block client ID.\n */\nexport function* selectPreviousBlock( clientId ) {\n\tconst previousBlockClientId = yield select(\n\t\t'core/block-editor',\n\t\t'getPreviousBlockClientId',\n\t\tclientId\n\t);\n\n\tif ( previousBlockClientId ) {\n\t\tyield selectBlock( previousBlockClientId, -1 );\n\t}\n}\n\n/**\n * Yields action objects used in signalling that the block following the given\n * clientId should be selected.\n *\n * @param {string} clientId Block client ID.\n */\nexport function* selectNextBlock( clientId ) {\n\tconst nextBlockClientId = yield select(\n\t\t'core/block-editor',\n\t\t'getNextBlockClientId',\n\t\tclientId\n\t);\n\n\tif ( nextBlockClientId ) {\n\t\tyield selectBlock( nextBlockClientId );\n\t}\n}\n\n/**\n * Returns an action object used in signalling that a block multi-selection has started.\n *\n * @return {Object} Action object.\n */\nexport function startMultiSelect() {\n\treturn {\n\t\ttype: 'START_MULTI_SELECT',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that block multi-selection stopped.\n *\n * @return {Object} Action object.\n */\nexport function stopMultiSelect() {\n\treturn {\n\t\ttype: 'STOP_MULTI_SELECT',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that block multi-selection changed.\n *\n * @param {string} start First block of the multi selection.\n * @param {string} end   Last block of the multiselection.\n *\n * @return {Object} Action object.\n */\nexport function multiSelect( start, end ) {\n\treturn {\n\t\ttype: 'MULTI_SELECT',\n\t\tstart,\n\t\tend,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the block selection is cleared.\n *\n * @return {Object} Action object.\n */\nexport function clearSelectedBlock() {\n\treturn {\n\t\ttype: 'CLEAR_SELECTED_BLOCK',\n\t};\n}\n\n/**\n * Returns an action object that enables or disables block selection.\n *\n * @param {boolean} [isSelectionEnabled=true] Whether block selection should\n *                                            be enabled.\n *\n * @return {Object} Action object.\n */\nexport function toggleSelection( isSelectionEnabled = true ) {\n\treturn {\n\t\ttype: 'TOGGLE_SELECTION',\n\t\tisSelectionEnabled,\n\t};\n}\n\nfunction getBlocksWithDefaultStylesApplied( blocks, blockEditorSettings ) {\n\tconst preferredStyleVariations = get(\n\t\tblockEditorSettings,\n\t\t[ '__experimentalPreferredStyleVariations', 'value' ],\n\t\t{}\n\t);\n\treturn blocks.map( ( block ) => {\n\t\tconst blockName = block.name;\n\t\tif ( ! preferredStyleVariations[ blockName ] ) {\n\t\t\treturn block;\n\t\t}\n\t\tconst className = get( block, [ 'attributes', 'className' ] );\n\t\tif ( includes( className, 'is-style-' ) ) {\n\t\t\treturn block;\n\t\t}\n\t\tconst { attributes = {} } = block;\n\t\tconst blockStyle = preferredStyleVariations[ blockName ];\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: {\n\t\t\t\t...attributes,\n\t\t\t\tclassName: `${ ( className || '' ) } is-style-${ blockStyle }`.trim(),\n\t\t\t},\n\t\t};\n\t} );\n}\n\n/**\n * Returns an action object signalling that a blocks should be replaced with\n * one or more replacement blocks.\n *\n * @param {(string|string[])} clientIds     Block client ID(s) to replace.\n * @param {(Object|Object[])} blocks        Replacement block(s).\n * @param {number}            indexToSelect Index of replacement block to\n *                                          select.\n *\n * @yield {Object} Action object.\n */\nexport function* replaceBlocks( clientIds, blocks, indexToSelect ) {\n\tclientIds = castArray( clientIds );\n\tblocks = getBlocksWithDefaultStylesApplied(\n\t\tcastArray( blocks ),\n\t\tyield select(\n\t\t\t'core/block-editor',\n\t\t\t'getSettings',\n\t\t)\n\t);\n\tconst rootClientId = yield select(\n\t\t'core/block-editor',\n\t\t'getBlockRootClientId',\n\t\tfirst( clientIds )\n\t);\n\t// Replace is valid if the new blocks can be inserted in the root block.\n\tfor ( let index = 0; index < blocks.length; index++ ) {\n\t\tconst block = blocks[ index ];\n\t\tconst canInsertBlock = yield select(\n\t\t\t'core/block-editor',\n\t\t\t'canInsertBlockType',\n\t\t\tblock.name,\n\t\t\trootClientId\n\t\t);\n\t\tif ( ! canInsertBlock ) {\n\t\t\treturn;\n\t\t}\n\t}\n\tyield {\n\t\ttype: 'REPLACE_BLOCKS',\n\t\tclientIds,\n\t\tblocks,\n\t\ttime: Date.now(),\n\t\tindexToSelect,\n\t};\n\tyield* ensureDefaultBlock();\n}\n\n/**\n * Returns an action object signalling that a single block should be replaced\n * with one or more replacement blocks.\n *\n * @param {(string|string[])} clientId Block client ID to replace.\n * @param {(Object|Object[])} block    Replacement block(s).\n *\n * @return {Object} Action object.\n */\nexport function replaceBlock( clientId, block ) {\n\treturn replaceBlocks( clientId, block );\n}\n\n/**\n * Higher-order action creator which, given the action type to dispatch creates\n * an action creator for managing block movement.\n *\n * @param {string} type Action type to dispatch.\n *\n * @return {Function} Action creator.\n */\nfunction createOnMove( type ) {\n\treturn ( clientIds, rootClientId ) => {\n\t\treturn {\n\t\t\tclientIds: castArray( clientIds ),\n\t\t\ttype,\n\t\t\trootClientId,\n\t\t};\n\t};\n}\n\nexport const moveBlocksDown = createOnMove( 'MOVE_BLOCKS_DOWN' );\nexport const moveBlocksUp = createOnMove( 'MOVE_BLOCKS_UP' );\n\n/**\n * Returns an action object signalling that an indexed block should be moved\n * to a new index.\n *\n * @param  {?string} clientId         The client ID of the block.\n * @param  {?string} fromRootClientId Root client ID source.\n * @param  {?string} toRootClientId   Root client ID destination.\n * @param  {number}  index            The index to move the block into.\n *\n * @yield {Object} Action object.\n */\nexport function* moveBlockToPosition( clientId, fromRootClientId = '', toRootClientId = '', index ) {\n\tconst templateLock = yield select(\n\t\t'core/block-editor',\n\t\t'getTemplateLock',\n\t\tfromRootClientId\n\t);\n\n\t// If locking is equal to all on the original clientId (fromRootClientId),\n\t// it is not possible to move the block to any other position.\n\tif ( templateLock === 'all' ) {\n\t\treturn;\n\t}\n\n\tconst action = {\n\t\ttype: 'MOVE_BLOCK_TO_POSITION',\n\t\tfromRootClientId,\n\t\ttoRootClientId,\n\t\tclientId,\n\t\tindex,\n\t};\n\t// If moving inside the same root block the move is always possible.\n\tif ( fromRootClientId === toRootClientId ) {\n\t\tyield action;\n\t\treturn;\n\t}\n\n\t// If templateLock is insert we can not remove the block from the parent.\n\t// Given that here we know that we are moving the block to a different parent, the move should not be possible if the condition is true.\n\tif ( templateLock === 'insert' ) {\n\t\treturn;\n\t}\n\n\tconst blockName = yield select(\n\t\t'core/block-editor',\n\t\t'getBlockName',\n\t\tclientId\n\t);\n\n\tconst canInsertBlock = yield select(\n\t\t'core/block-editor',\n\t\t'canInsertBlockType',\n\t\tblockName,\n\t\ttoRootClientId\n\t);\n\n\t// If moving to other parent block, the move is possible if we can insert a block of the same type inside the new parent block.\n\tif ( canInsertBlock ) {\n\t\tyield action;\n\t}\n}\n\n/**\n * Returns an action object used in signalling that a single block should be\n * inserted, optionally at a specific index respective a root block list.\n *\n * @param {Object}  block            Block object to insert.\n * @param {?number} index            Index at which block should be inserted.\n * @param {?string} rootClientId     Optional root client ID of block list on which to insert.\n * @param {?boolean} updateSelection If true block selection will be updated. If false, block selection will not change. Defaults to true.\n *\n * @return {Object} Action object.\n */\nexport function insertBlock(\n\tblock,\n\tindex,\n\trootClientId,\n\tupdateSelection = true,\n) {\n\treturn insertBlocks(\n\t\t[ block ],\n\t\tindex,\n\t\trootClientId,\n\t\tupdateSelection\n\t);\n}\n\n/**\n * Returns an action object used in signalling that an array of blocks should\n * be inserted, optionally at a specific index respective a root block list.\n *\n * @param {Object[]} blocks          Block objects to insert.\n * @param {?number}  index           Index at which block should be inserted.\n * @param {?string}  rootClientId    Optional root client ID of block list on which to insert.\n * @param {?boolean} updateSelection If true block selection will be updated.  If false, block selection will not change. Defaults to true.\n *\n *  @return {Object} Action object.\n */\nexport function* insertBlocks(\n\tblocks,\n\tindex,\n\trootClientId,\n\tupdateSelection = true\n) {\n\tblocks = getBlocksWithDefaultStylesApplied(\n\t\tcastArray( blocks ),\n\t\tyield select(\n\t\t\t'core/block-editor',\n\t\t\t'getSettings',\n\t\t)\n\t);\n\tconst allowedBlocks = [];\n\tfor ( const block of blocks ) {\n\t\tconst isValid = yield select(\n\t\t\t'core/block-editor',\n\t\t\t'canInsertBlockType',\n\t\t\tblock.name,\n\t\t\trootClientId\n\t\t);\n\t\tif ( isValid ) {\n\t\t\tallowedBlocks.push( block );\n\t\t}\n\t}\n\tif ( allowedBlocks.length ) {\n\t\treturn {\n\t\t\ttype: 'INSERT_BLOCKS',\n\t\t\tblocks: allowedBlocks,\n\t\t\tindex,\n\t\t\trootClientId,\n\t\t\ttime: Date.now(),\n\t\t\tupdateSelection,\n\t\t};\n\t}\n}\n\n/**\n * Returns an action object used in signalling that the insertion point should\n * be shown.\n *\n * @param {?string} rootClientId Optional root client ID of block list on\n *                               which to insert.\n * @param {?number} index        Index at which block should be inserted.\n *\n * @return {Object} Action object.\n */\nexport function showInsertionPoint( rootClientId, index ) {\n\treturn {\n\t\ttype: 'SHOW_INSERTION_POINT',\n\t\trootClientId,\n\t\tindex,\n\t};\n}\n\n/**\n * Returns an action object hiding the insertion point.\n *\n * @return {Object} Action object.\n */\nexport function hideInsertionPoint() {\n\treturn {\n\t\ttype: 'HIDE_INSERTION_POINT',\n\t};\n}\n\n/**\n * Returns an action object resetting the template validity.\n *\n * @param {boolean}  isValid  template validity flag.\n *\n * @return {Object} Action object.\n */\nexport function setTemplateValidity( isValid ) {\n\treturn {\n\t\ttype: 'SET_TEMPLATE_VALIDITY',\n\t\tisValid,\n\t};\n}\n\n/**\n * Returns an action object synchronize the template with the list of blocks\n *\n * @return {Object} Action object.\n */\nexport function synchronizeTemplate() {\n\treturn {\n\t\ttype: 'SYNCHRONIZE_TEMPLATE',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that two blocks should be merged\n *\n * @param {string} firstBlockClientId  Client ID of the first block to merge.\n * @param {string} secondBlockClientId Client ID of the second block to merge.\n *\n * @return {Object} Action object.\n */\nexport function mergeBlocks( firstBlockClientId, secondBlockClientId ) {\n\treturn {\n\t\ttype: 'MERGE_BLOCKS',\n\t\tblocks: [ firstBlockClientId, secondBlockClientId ],\n\t};\n}\n\n/**\n * Yields action objects used in signalling that the blocks corresponding to\n * the set of specified client IDs are to be removed.\n *\n * @param {string|string[]} clientIds      Client IDs of blocks to remove.\n * @param {boolean}         selectPrevious True if the previous block should be\n *                                         selected when a block is removed.\n */\nexport function* removeBlocks( clientIds, selectPrevious = true ) {\n\tclientIds = castArray( clientIds );\n\n\tif ( selectPrevious ) {\n\t\tyield selectPreviousBlock( clientIds[ 0 ] );\n\t}\n\n\tyield {\n\t\ttype: 'REMOVE_BLOCKS',\n\t\tclientIds,\n\t};\n\n\t// To avoid a focus loss when removing the last block, assure there is\n\t// always a default block if the last of the blocks have been removed.\n\tyield* ensureDefaultBlock();\n}\n\n/**\n * Returns an action object used in signalling that the block with the\n * specified client ID is to be removed.\n *\n * @param {string}  clientId       Client ID of block to remove.\n * @param {boolean} selectPrevious True if the previous block should be\n *                                 selected when a block is removed.\n *\n * @return {Object} Action object.\n */\nexport function removeBlock( clientId, selectPrevious ) {\n\treturn removeBlocks( [ clientId ], selectPrevious );\n}\n\n/**\n * Returns an action object used in signalling that the inner blocks with the\n * specified client ID should be replaced.\n *\n * @param {string}   rootClientId    Client ID of the block whose InnerBlocks will re replaced.\n * @param {Object[]} blocks          Block objects to insert as new InnerBlocks\n * @param {?boolean} updateSelection If true block selection will be updated. If false, block selection will not change. Defaults to true.\n *\n * @return {Object} Action object.\n */\nexport function replaceInnerBlocks( rootClientId, blocks, updateSelection = true ) {\n\treturn {\n\t\ttype: 'REPLACE_INNER_BLOCKS',\n\t\trootClientId,\n\t\tblocks,\n\t\tupdateSelection,\n\t\ttime: Date.now(),\n\t};\n}\n\n/**\n * Returns an action object used to toggle the block editing mode between\n * visual and HTML modes.\n *\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Action object.\n */\nexport function toggleBlockMode( clientId ) {\n\treturn {\n\t\ttype: 'TOGGLE_BLOCK_MODE',\n\t\tclientId,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has begun to type.\n *\n * @return {Object} Action object.\n */\nexport function startTyping() {\n\treturn {\n\t\ttype: 'START_TYPING',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has stopped typing.\n *\n * @return {Object} Action object.\n */\nexport function stopTyping() {\n\treturn {\n\t\ttype: 'STOP_TYPING',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the caret has entered formatted text.\n *\n * @return {Object} Action object.\n */\nexport function enterFormattedText() {\n\treturn {\n\t\ttype: 'ENTER_FORMATTED_TEXT',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user caret has exited formatted text.\n *\n * @return {Object} Action object.\n */\nexport function exitFormattedText() {\n\treturn {\n\t\ttype: 'EXIT_FORMATTED_TEXT',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user caret has changed\n * position.\n *\n * @param {string} clientId     The selected block client ID.\n * @param {string} attributeKey The selected block attribute key.\n * @param {number} startOffset  The start offset.\n * @param {number} endOffset    The end offset.\n *\n * @return {Object} Action object.\n */\nexport function selectionChange( clientId, attributeKey, startOffset, endOffset ) {\n\treturn {\n\t\ttype: 'SELECTION_CHANGE',\n\t\tclientId,\n\t\tattributeKey,\n\t\tstartOffset,\n\t\tendOffset,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a new block of the default\n * type should be added to the block list.\n *\n * @param {?Object} attributes   Optional attributes of the block to assign.\n * @param {?string} rootClientId Optional root client ID of block list on which\n *                               to append.\n * @param {?number} index        Optional index where to insert the default block\n *\n * @return {Object} Action object\n */\nexport function insertDefaultBlock( attributes, rootClientId, index ) {\n\t// Abort if there is no default block type (if it has been unregistered).\n\tconst defaultBlockName = getDefaultBlockName();\n\tif ( ! defaultBlockName ) {\n\t\treturn;\n\t}\n\n\tconst block = createBlock( defaultBlockName, attributes );\n\n\treturn insertBlock( block, index, rootClientId );\n}\n\n/**\n * Returns an action object that changes the nested settings of a given block.\n *\n * @param {string} clientId Client ID of the block whose nested setting are\n *                          being received.\n * @param {Object} settings Object with the new settings for the nested block.\n *\n * @return {Object} Action object\n */\nexport function updateBlockListSettings( clientId, settings ) {\n\treturn {\n\t\ttype: 'UPDATE_BLOCK_LIST_SETTINGS',\n\t\tclientId,\n\t\tsettings,\n\t};\n}\n\n/*\n * Returns an action object used in signalling that the block editor settings have been updated.\n *\n * @param {Object} settings Updated settings\n *\n * @return {Object} Action object\n */\nexport function updateSettings( settings ) {\n\treturn {\n\t\ttype: 'UPDATE_SETTINGS',\n\t\tsettings,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a temporary reusable blocks have been saved\n * in order to switch its temporary id with the real id.\n *\n * @param {string} id        Reusable block's id.\n * @param {string} updatedId Updated block's id.\n *\n * @return {Object} Action object.\n */\nexport function __unstableSaveReusableBlock( id, updatedId ) {\n\treturn {\n\t\ttype: 'SAVE_REUSABLE_BLOCK_SUCCESS',\n\t\tid,\n\t\tupdatedId,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the last block change should be marked explicitely as persistent.\n *\n * @return {Object} Action object.\n */\nexport function __unstableMarkLastChangeAsPersistent() {\n\treturn { type: 'MARK_LAST_CHANGE_AS_PERSISTENT' };\n}\n\n/**\n * Returns an action object used in signalling that the last block change is\n * an automatic change, meaning it was not performed by the user, and can be\n * undone using the `Escape` and `Backspace` keys. This action must be called\n * after the change was made, and any actions that are a consequence of it, so\n * it is recommended to be called at the next idle period to ensure all\n * selection changes have been recorded.\n *\n * @return {Object} Action object.\n */\nexport function __unstableMarkAutomaticChange() {\n\treturn { type: 'MARK_AUTOMATIC_CHANGE' };\n}\n\n/**\n * Returns an action object used to enable or disable the navigation mode.\n *\n * @param {string} isNavigationMode Enable/Disable navigation mode.\n *\n * @return {Object} Action object\n */\nexport function setNavigationMode( isNavigationMode = true ) {\n\treturn {\n\t\ttype: 'SET_NAVIGATION_MODE',\n\t\tisNavigationMode,\n\t};\n}\n"]}