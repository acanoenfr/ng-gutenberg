{"version":3,"sources":["@wordpress/block-editor/src/store/selectors.js"],"names":["INSERTER_UTILITY_HIGH","INSERTER_UTILITY_MEDIUM","INSERTER_UTILITY_LOW","INSERTER_UTILITY_NONE","MILLISECONDS_PER_HOUR","MILLISECONDS_PER_DAY","MILLISECONDS_PER_WEEK","templateIcon","EMPTY_ARRAY","getBlockName","state","clientId","block","blocks","byClientId","name","isBlockValid","isValid","getBlockAttributes","attributes","getBlock","innerBlocks","getBlocks","cache","__unstableGetBlockWithoutInnerBlocks","rootClientId","getBlockOrder","order","getClientIdsOfDescendants","clientIds","descendants","getClientIdsWithDescendants","topLevelIds","getGlobalBlockCount","blockName","length","count","getBlocksByClientId","getBlockCount","getSelectionStart","blockSelection","start","getSelectionEnd","end","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","multiSelectedBlockCount","getMultiSelectedBlockClientIds","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","parents","undefined","getBlockHierarchyRootClientId","current","parent","getAdjacentBlockClientId","startClientId","modifier","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","orderSet","index","indexOf","nextIndex","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","initialPosition","getSelectedBlockClientIds","blockOrder","startIndex","endIndex","slice","getMultiSelectedBlocks","multiSelectedBlockClientIds","map","getDependants","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","ancestorClientId","isMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","deep","innerClientId","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","isEnabled","getBlockMode","blocksMode","isTyping","isCaretWithinFormattedText","getBlockInsertionPoint","insertionPoint","isBlockInsertionPointVisible","isValidTemplate","template","getTemplate","settings","getTemplateLock","templateLock","blockListSettings","getBlockListSettings","canInsertBlockTypeUnmemoized","checkAllowList","list","item","defaultResult","blockType","getSettings","allowedBlockTypes","isBlockAllowedInEditor","isLocked","parentBlockListSettings","parentAllowedBlocks","hasParentAllowedBlock","blockAllowedParentBlocks","parentName","hasBlockAllowedParent","canInsertBlockType","getInsertUsage","id","preferences","insertUsage","canIncludeBlockTypeInInserter","getInserterItems","calculateUtility","category","isContextual","calculateFrecency","time","duration","Date","now","buildBlockTypeInserterItem","isDisabled","initialAttributes","title","icon","keywords","utility","frecency","buildReusableBlockInserterItem","reusableBlock","referencedBlocks","__experimentalGetParsedReusableBlock","referencedBlockType","ref","blockTypeInserterItems","filter","reusableBlockInserterItems","getReusableBlocks","hasInserterItems","hasBlockType","hasReusableBlock","isLastBlockChangePersistent","isPersistentChange","content","__unstableIsLastBlockChangeIgnored","isIgnoredChange","__experimentalGetLastBlockAttributeChanges","lastBlockAttributesChange","isNavigationMode","didAutomaticChange"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tcastArray,\n\tflatMap,\n\tfirst,\n\tget,\n\tincludes,\n\tisArray,\n\tisBoolean,\n\tlast,\n\tmap,\n\torderBy,\n\treduce,\n\tsome,\n\tfind,\n} from 'lodash';\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetBlockType,\n\tgetBlockTypes,\n\thasBlockSupport,\n\tparse,\n} from '@wordpress/blocks';\nimport { SVG, Rect, G, Path } from '@wordpress/components';\n\n// Module constants\n\n/**\n * @private\n */\nexport const INSERTER_UTILITY_HIGH = 3;\n\n/**\n * @private\n */\nexport const INSERTER_UTILITY_MEDIUM = 2;\n\n/**\n * @private\n */\nexport const INSERTER_UTILITY_LOW = 1;\n\n/**\n * @private\n */\nexport const INSERTER_UTILITY_NONE = 0;\n\nconst MILLISECONDS_PER_HOUR = 3600 * 1000;\nconst MILLISECONDS_PER_DAY = 24 * 3600 * 1000;\nconst MILLISECONDS_PER_WEEK = 7 * 24 * 3600 * 1000;\nconst templateIcon = <SVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><Rect x=\"0\" fill=\"none\" width=\"24\" height=\"24\" /><G><Path d=\"M19 3H5c-1.105 0-2 .895-2 2v14c0 1.105.895 2 2 2h14c1.105 0 2-.895 2-2V5c0-1.105-.895-2-2-2zM6 6h5v5H6V6zm4.5 13C9.12 19 8 17.88 8 16.5S9.12 14 10.5 14s2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5zm3-6l3-5 3 5h-6z\" /></G></SVG>;\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Array}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Returns a block's name given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {string} Block name.\n */\nexport function getBlockName( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\treturn block ? block.name : null;\n}\n\n/**\n * Returns whether a block is valid or not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Is Valid.\n */\nexport function isBlockValid( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\treturn !! block && block.isValid;\n}\n\n/**\n * Returns a block's attributes given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object?} Block attributes.\n */\nexport function getBlockAttributes( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\tif ( ! block ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.attributes[ clientId ];\n}\n\n/**\n * Returns a block given its client ID. This is a parsed copy of the block,\n * containing its `blockName`, `clientId`, and current `attributes` state. This\n * is not the block's registration settings, which must be retrieved from the\n * blocks module registration store.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Parsed block object.\n */\nexport const getBlock = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t\tinnerBlocks: getBlocks( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\t// Normally, we'd have both  `getBlockAttributes` dependancies and\n\t\t// `getBlocks` (children) dependancies here but for performance reasons\n\t\t// we use a denormalized cache key computed in the reducer that takes both\n\t\t// the attributes and inner blocks into account. The value of the cache key\n\t\t// is being changed whenever one of these dependencies is out of date.\n\t\tstate.blocks.cache[ clientId ],\n\t]\n);\n\nexport const __unstableGetBlockWithoutInnerBlocks = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\tstate.blocks.byClientId[ clientId ],\n\t\tstate.blocks.attributes[ clientId ],\n\t]\n);\n\n/**\n * Returns all block objects for the current post being edited as an array in\n * the order they appear in the post.\n *\n * Note: It's important to memoize this selector to avoid return a new instance\n * on each call\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Post blocks.\n */\nexport const getBlocks = createSelector(\n\t( state, rootClientId ) => {\n\t\treturn map(\n\t\t\tgetBlockOrder( state, rootClientId ),\n\t\t\t( clientId ) => getBlock( state, clientId )\n\t\t);\n\t},\n\t( state ) => [\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns an array containing the clientIds of all descendants\n * of the blocks given.\n *\n * @param {Object} state Global application state.\n * @param {Array} clientIds Array of blocks to inspect.\n *\n * @return {Array} ids of descendants.\n */\nexport const getClientIdsOfDescendants = ( state, clientIds ) => flatMap( clientIds, ( clientId ) => {\n\tconst descendants = getBlockOrder( state, clientId );\n\treturn [ ...descendants, ...getClientIdsOfDescendants( state, descendants ) ];\n} );\n\n/**\n * Returns an array containing the clientIds of the top-level blocks\n * and their descendants of any depth (for nested blocks).\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} ids of top-level and descendant blocks.\n */\nexport const getClientIdsWithDescendants = createSelector(\n\t( state ) => {\n\t\tconst topLevelIds = getBlockOrder( state );\n\t\treturn [ ...topLevelIds, ...getClientIdsOfDescendants( state, topLevelIds ) ];\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t]\n);\n\n/**\n * Returns the total number of blocks, or the total number of blocks with a specific name in a post.\n * The number returned includes nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if specified only blocks of that type will be counted.\n *\n * @return {number} Number of blocks in the post, or number of blocks with name equal to blockName.\n */\nexport const getGlobalBlockCount = createSelector(\n\t( state, blockName ) => {\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tif ( ! blockName ) {\n\t\t\treturn clientIds.length;\n\t\t}\n\t\treturn reduce( clientIds, ( count, clientId ) => {\n\t\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\t\treturn block.name === blockName ? count + 1 : count;\n\t\t}, 0 );\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.blocks.byClientId,\n\t]\n);\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * objects.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which blocks are to be returned.\n *\n * @return {WPBlock[]} Block objects.\n */\nexport const getBlocksByClientId = createSelector(\n\t( state, clientIds ) => map(\n\t\tcastArray( clientIds ),\n\t\t( clientId ) => getBlock( state, clientId )\n\t),\n\t( state ) => [\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the number of blocks currently present in the post.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Number of blocks in the post.\n */\nexport function getBlockCount( state, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).length;\n}\n\n/**\n * @typedef {WPBlockSelection} A block selection object.\n *\n * @property {string} clientId     The selected block client ID.\n * @property {string} attributeKey The selected block attribute key.\n * @property {number} offset       The selected block attribute offset.\n */\n\n/**\n * Returns the current selection start block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection start information.\n */\nexport function getSelectionStart( state ) {\n\treturn state.blockSelection.start;\n}\n\n/**\n * Returns the current selection end block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection end information.\n */\nexport function getSelectionEnd( state ) {\n\treturn state.blockSelection.end;\n}\n\n/**\n * Returns the current block selection start. This value may be null, and it\n * may represent either a singular block selection or multi-selection start.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection start.\n */\nexport function getBlockSelectionStart( state ) {\n\treturn state.blockSelection.start.clientId;\n}\n\n/**\n * Returns the current block selection end. This value may be null, and it\n * may represent either a singular block selection or multi-selection end.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection end.\n */\nexport function getBlockSelectionEnd( state ) {\n\treturn state.blockSelection.end.clientId;\n}\n\n/**\n * Returns the number of blocks currently selected in the post.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of blocks selected in the post.\n */\nexport function getSelectedBlockCount( state ) {\n\tconst multiSelectedBlockCount = getMultiSelectedBlockClientIds( state ).length;\n\n\tif ( multiSelectedBlockCount ) {\n\t\treturn multiSelectedBlockCount;\n\t}\n\n\treturn state.blockSelection.start.clientId ? 1 : 0;\n}\n\n/**\n * Returns true if there is a single selected block, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether a single block is selected.\n */\nexport function hasSelectedBlock( state ) {\n\tconst { start, end } = state.blockSelection;\n\treturn !! start.clientId && start.clientId === end.clientId;\n}\n\n/**\n * Returns the currently selected block client ID, or null if there is no\n * selected block.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Selected block client ID.\n */\nexport function getSelectedBlockClientId( state ) {\n\tconst { start, end } = state.blockSelection;\n\t// We need to check the block exists because the current blockSelection\n\t// reducer doesn't take into account when blocks are reset via undo. To be\n\t// removed when that's fixed.\n\treturn start.clientId && start.clientId === end.clientId && !! state.blocks.byClientId[ start.clientId ] ? start.clientId : null;\n}\n\n/**\n * Returns the currently selected block, or null if there is no selected block.\n *\n * @param {Object} state Global application state.\n *\n * @return {?Object} Selected block.\n */\nexport function getSelectedBlock( state ) {\n\tconst clientId = getSelectedBlockClientId( state );\n\treturn clientId ? getBlock( state, clientId ) : null;\n}\n\n/**\n * Given a block client ID, returns the root block from which the block is\n * nested, an empty string for top-level blocks, or null if the block does not\n * exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {?string} Root client ID, if exists\n */\nexport function getBlockRootClientId( state, clientId ) {\n\treturn state.blocks.parents[ clientId ] !== undefined ?\n\t\tstate.blocks.parents[ clientId ] :\n\t\tnull;\n}\n\n/**\n * Given a block client ID, returns the root of the hierarchy from which the block is nested, return the block itself for root level blocks.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {string} Root client ID\n */\nexport function getBlockHierarchyRootClientId( state, clientId ) {\n\tlet current = clientId;\n\tlet parent;\n\tdo {\n\t\tparent = current;\n\t\tcurrent = state.blocks.parents[ current ];\n\t} while ( current );\n\treturn parent;\n}\n\n/**\n * Returns the client ID of the block adjacent one at the given reference\n * startClientId and modifier directionality. Defaults start startClientId to\n * the selected block, and direction as next block. Returns null if there is no\n * adjacent block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n * @param {?number} modifier      Directionality multiplier (1 next, -1\n *                                previous).\n *\n * @return {?string} Return the client ID of the block, or null if none exists.\n */\nexport function getAdjacentBlockClientId( state, startClientId, modifier = 1 ) {\n\t// Default to selected block.\n\tif ( startClientId === undefined ) {\n\t\tstartClientId = getSelectedBlockClientId( state );\n\t}\n\n\t// Try multi-selection starting at extent based on modifier.\n\tif ( startClientId === undefined ) {\n\t\tif ( modifier < 0 ) {\n\t\t\tstartClientId = getFirstMultiSelectedBlockClientId( state );\n\t\t} else {\n\t\t\tstartClientId = getLastMultiSelectedBlockClientId( state );\n\t\t}\n\t}\n\n\t// Validate working start client ID.\n\tif ( ! startClientId ) {\n\t\treturn null;\n\t}\n\n\t// Retrieve start block root client ID, being careful to allow the falsey\n\t// empty string top-level root by explicitly testing against null.\n\tconst rootClientId = getBlockRootClientId( state, startClientId );\n\tif ( rootClientId === null ) {\n\t\treturn null;\n\t}\n\n\tconst { order } = state.blocks;\n\tconst orderSet = order[ rootClientId ];\n\tconst index = orderSet.indexOf( startClientId );\n\tconst nextIndex = ( index + ( 1 * modifier ) );\n\n\t// Block was first in set and we're attempting to get previous.\n\tif ( nextIndex < 0 ) {\n\t\treturn null;\n\t}\n\n\t// Block was last in set and we're attempting to get next.\n\tif ( nextIndex === orderSet.length ) {\n\t\treturn null;\n\t}\n\n\t// Assume incremented index is within the set.\n\treturn orderSet[ nextIndex ];\n}\n\n/**\n * Returns the previous block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no previous\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getPreviousBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, -1 );\n}\n\n/**\n * Returns the next block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no next\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getNextBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, 1 );\n}\n\n/**\n * Returns the initial caret position for the selected block.\n * This position is to used to position the caret properly when the selected block changes.\n *\n * @param {Object} state Global application state.\n *\n * @return {?Object} Selected block.\n */\nexport function getSelectedBlocksInitialCaretPosition( state ) {\n\tconst { start, end } = state.blockSelection;\n\n\tif ( start.clientId !== end.clientId || ! start.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn state.blockSelection.initialPosition;\n}\n\n/**\n * Returns the current selection set of block client IDs (multiselection or single selection).\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport const getSelectedBlockClientIds = createSelector(\n\t( state ) => {\n\t\tconst { start, end } = state.blockSelection;\n\n\t\tif ( start.clientId === undefined || end.clientId === undefined ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tif ( start.clientId === end.clientId ) {\n\t\t\treturn [ start.clientId ];\n\t\t}\n\n\t\t// Retrieve root client ID to aid in retrieving relevant nested block\n\t\t// order, being careful to allow the falsey empty string top-level root\n\t\t// by explicitly testing against null.\n\t\tconst rootClientId = getBlockRootClientId( state, start.clientId );\n\t\tif ( rootClientId === null ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tconst blockOrder = getBlockOrder( state, rootClientId );\n\t\tconst startIndex = blockOrder.indexOf( start.clientId );\n\t\tconst endIndex = blockOrder.indexOf( end.clientId );\n\n\t\tif ( startIndex > endIndex ) {\n\t\t\treturn blockOrder.slice( endIndex, startIndex + 1 );\n\t\t}\n\n\t\treturn blockOrder.slice( startIndex, endIndex + 1 );\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.blockSelection.start.clientId,\n\t\tstate.blockSelection.end.clientId,\n\t],\n);\n\n/**\n * Returns the current multi-selection set of block client IDs, or an empty\n * array if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport function getMultiSelectedBlockClientIds( state ) {\n\tconst { start, end } = state.blockSelection;\n\n\tif ( start.clientId === end.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\treturn getSelectedBlockClientIds( state );\n}\n\n/**\n * Returns the current multi-selection set of blocks, or an empty array if\n * there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block objects.\n */\nexport const getMultiSelectedBlocks = createSelector(\n\t( state ) => {\n\t\tconst multiSelectedBlockClientIds = getMultiSelectedBlockClientIds( state );\n\t\tif ( ! multiSelectedBlockClientIds.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn multiSelectedBlockClientIds.map( ( clientId ) => getBlock( state, clientId ) );\n\t},\n\t( state ) => [\n\t\t...getSelectedBlockClientIds.getDependants( state ),\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the client ID of the first block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} First block client ID in the multi-selection set.\n */\nexport function getFirstMultiSelectedBlockClientId( state ) {\n\treturn first( getMultiSelectedBlockClientIds( state ) ) || null;\n}\n\n/**\n * Returns the client ID of the last block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Last block client ID in the multi-selection set.\n */\nexport function getLastMultiSelectedBlockClientId( state ) {\n\treturn last( getMultiSelectedBlockClientIds( state ) ) || null;\n}\n\n/**\n * Returns true if a multi-selection exists, and the block corresponding to the\n * specified client ID is the first block of the multi-selection set, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is first in multi-selection.\n */\nexport function isFirstMultiSelectedBlock( state, clientId ) {\n\treturn getFirstMultiSelectedBlockClientId( state ) === clientId;\n}\n\n/**\n * Returns true if the client ID occurs within the block multi-selection, or\n * false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is in multi-selection set.\n */\nexport function isBlockMultiSelected( state, clientId ) {\n\treturn getMultiSelectedBlockClientIds( state ).indexOf( clientId ) !== -1;\n}\n\n/**\n * Returns true if an ancestor of the block is multi-selected, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether an ancestor of the block is in multi-selection\n *                   set.\n */\nexport const isAncestorMultiSelected = createSelector(\n\t( state, clientId ) => {\n\t\tlet ancestorClientId = clientId;\n\t\tlet isMultiSelected = false;\n\t\twhile ( ancestorClientId && ! isMultiSelected ) {\n\t\t\tancestorClientId = getBlockRootClientId( state, ancestorClientId );\n\t\t\tisMultiSelected = isBlockMultiSelected( state, ancestorClientId );\n\t\t}\n\t\treturn isMultiSelected;\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.blockSelection.start.clientId,\n\t\tstate.blockSelection.end.clientId,\n\t],\n);\n/**\n * Returns the client ID of the block which begins the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the first client ID in the selection.\n *\n * @see getFirstMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block beginning multi-selection.\n */\nexport function getMultiSelectedBlocksStartClientId( state ) {\n\tconst { start, end } = state.blockSelection;\n\tif ( start.clientId === end.clientId ) {\n\t\treturn null;\n\t}\n\treturn start.clientId || null;\n}\n\n/**\n * Returns the client ID of the block which ends the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the last client ID in the selection.\n *\n * @see getLastMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block ending multi-selection.\n */\nexport function getMultiSelectedBlocksEndClientId( state ) {\n\tconst { start, end } = state.blockSelection;\n\tif ( start.clientId === end.clientId ) {\n\t\treturn null;\n\t}\n\treturn end.clientId || null;\n}\n\n/**\n * Returns an array containing all block client IDs in the editor in the order\n * they appear. Optionally accepts a root client ID of the block list for which\n * the order should be returned, defaulting to the top-level block order.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array} Ordered client IDs of editor blocks.\n */\nexport function getBlockOrder( state, rootClientId ) {\n\treturn state.blocks.order[ rootClientId || '' ] || EMPTY_ARRAY;\n}\n\n/**\n * Returns the index at which the block corresponding to the specified client\n * ID occurs within the block order, or `-1` if the block does not exist.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     Block client ID.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Index at which block exists in order.\n */\nexport function getBlockIndex( state, clientId, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).indexOf( clientId );\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected and no multi-selection exists, or false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and multi-selection exists.\n */\nexport function isBlockSelected( state, clientId ) {\n\tconst { start, end } = state.blockSelection;\n\n\tif ( start.clientId !== end.clientId ) {\n\t\treturn false;\n\t}\n\n\treturn start.clientId === clientId;\n}\n\n/**\n * Returns true if one of the block's inner blocks is selected.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block as an inner block selected\n */\nexport function hasSelectedInnerBlock( state, clientId, deep = false ) {\n\treturn some(\n\t\tgetBlockOrder( state, clientId ),\n\t\t( innerClientId ) => (\n\t\t\tisBlockSelected( state, innerClientId ) ||\n\t\t\tisBlockMultiSelected( state, innerClientId ) ||\n\t\t\t( deep && hasSelectedInnerBlock( state, innerClientId, deep ) )\n\t\t)\n\t);\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected but isn't the last of the selected blocks. Here \"last\"\n * refers to the block sequence in the document, _not_ the sequence of\n * multi-selection, which is why `state.blockSelection.end` isn't used.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and not the last in the\n *                   selection.\n */\nexport function isBlockWithinSelection( state, clientId ) {\n\tif ( ! clientId ) {\n\t\treturn false;\n\t}\n\n\tconst clientIds = getMultiSelectedBlockClientIds( state );\n\tconst index = clientIds.indexOf( clientId );\n\treturn index > -1 && index < clientIds.length - 1;\n}\n\n/**\n * Returns true if a multi-selection has been made, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether multi-selection has been made.\n */\nexport function hasMultiSelection( state ) {\n\tconst { start, end } = state.blockSelection;\n\treturn start.clientId !== end.clientId;\n}\n\n/**\n * Whether in the process of multi-selecting or not. This flag is only true\n * while the multi-selection is being selected (by mouse move), and is false\n * once the multi-selection has been settled.\n *\n * @see hasMultiSelection\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if multi-selecting, false if not.\n */\nexport function isMultiSelecting( state ) {\n\treturn state.blockSelection.isMultiSelecting;\n}\n\n/**\n * Selector that returns if multi-selection is enabled or not.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if it should be possible to multi-select blocks, false if multi-selection is disabled.\n */\nexport function isSelectionEnabled( state ) {\n\treturn state.blockSelection.isEnabled;\n}\n\n/**\n * Returns the block's editing mode, defaulting to \"visual\" if not explicitly\n * assigned.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Block editing mode.\n */\nexport function getBlockMode( state, clientId ) {\n\treturn state.blocksMode[ clientId ] || 'visual';\n}\n\n/**\n * Returns true if the user is typing, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is typing.\n */\nexport function isTyping( state ) {\n\treturn state.isTyping;\n}\n\n/**\n * Returns true if the caret is within formatted text, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the caret is within formatted text.\n */\nexport function isCaretWithinFormattedText( state ) {\n\treturn state.isCaretWithinFormattedText;\n}\n\n/**\n * Returns the insertion point, the index at which the new inserted block would\n * be placed. Defaults to the last index.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} Insertion point object with `rootClientId`, `index`.\n */\nexport function getBlockInsertionPoint( state ) {\n\tlet rootClientId, index;\n\n\tconst { insertionPoint, blockSelection } = state;\n\tif ( insertionPoint !== null ) {\n\t\treturn insertionPoint;\n\t}\n\n\tconst { end } = blockSelection;\n\tif ( end.clientId ) {\n\t\trootClientId = getBlockRootClientId( state, end.clientId ) || undefined;\n\t\tindex = getBlockIndex( state, end.clientId, rootClientId ) + 1;\n\t} else {\n\t\tindex = getBlockOrder( state ).length;\n\t}\n\n\treturn { rootClientId, index };\n}\n\n/**\n * Returns true if we should show the block insertion point.\n *\n * @param {Object} state Global application state.\n *\n * @return {?boolean} Whether the insertion point is visible or not.\n */\nexport function isBlockInsertionPointVisible( state ) {\n\treturn state.insertionPoint !== null;\n}\n\n/**\n * Returns whether the blocks matches the template or not.\n *\n * @param {boolean} state\n * @return {?boolean} Whether the template is valid or not.\n */\nexport function isValidTemplate( state ) {\n\treturn state.template.isValid;\n}\n\n/**\n * Returns the defined block template\n *\n * @param {boolean} state\n * @return {?Array}        Block Template\n */\nexport function getTemplate( state ) {\n\treturn state.settings.template;\n}\n\n/**\n * Returns the defined block template lock. Optionally accepts a root block\n * client ID as context, otherwise defaulting to the global context.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional block root client ID.\n *\n * @return {?string} Block Template Lock\n */\nexport function getTemplateLock( state, rootClientId ) {\n\tif ( ! rootClientId ) {\n\t\treturn state.settings.templateLock;\n\t}\n\n\tconst blockListSettings = getBlockListSettings( state, rootClientId );\n\tif ( ! blockListSettings ) {\n\t\treturn null;\n\t}\n\n\treturn blockListSettings.templateLock;\n}\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n * This function is not exported and not memoized because using a memoized selector\n * inside another memoized selector is just a waste of time.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nconst canInsertBlockTypeUnmemoized = ( state, blockName, rootClientId = null ) => {\n\tconst checkAllowList = ( list, item, defaultResult = null ) => {\n\t\tif ( isBoolean( list ) ) {\n\t\t\treturn list;\n\t\t}\n\t\tif ( isArray( list ) ) {\n\t\t\treturn includes( list, item );\n\t\t}\n\t\treturn defaultResult;\n\t};\n\n\tconst blockType = getBlockType( blockName );\n\tif ( ! blockType ) {\n\t\treturn false;\n\t}\n\n\tconst { allowedBlockTypes } = getSettings( state );\n\n\tconst isBlockAllowedInEditor = checkAllowList( allowedBlockTypes, blockName, true );\n\tif ( ! isBlockAllowedInEditor ) {\n\t\treturn false;\n\t}\n\n\tconst isLocked = !! getTemplateLock( state, rootClientId );\n\tif ( isLocked ) {\n\t\treturn false;\n\t}\n\n\tconst parentBlockListSettings = getBlockListSettings( state, rootClientId );\n\tconst parentAllowedBlocks = get( parentBlockListSettings, [ 'allowedBlocks' ] );\n\tconst hasParentAllowedBlock = checkAllowList( parentAllowedBlocks, blockName );\n\n\tconst blockAllowedParentBlocks = blockType.parent;\n\tconst parentName = getBlockName( state, rootClientId );\n\tconst hasBlockAllowedParent = checkAllowList( blockAllowedParentBlocks, parentName );\n\n\tif ( hasParentAllowedBlock !== null && hasBlockAllowedParent !== null ) {\n\t\treturn hasParentAllowedBlock || hasBlockAllowedParent;\n\t} else if ( hasParentAllowedBlock !== null ) {\n\t\treturn hasParentAllowedBlock;\n\t} else if ( hasBlockAllowedParent !== null ) {\n\t\treturn hasBlockAllowedParent;\n\t}\n\n\treturn true;\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nexport const canInsertBlockType = createSelector(\n\tcanInsertBlockTypeUnmemoized,\n\t( state, blockName, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId[ rootClientId ],\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t],\n);\n\n/**\n * Returns information about how recently and frequently a block has been inserted.\n *\n * @param {Object} state Global application state.\n * @param {string} id    A string which identifies the insert, e.g. 'core/block/12'\n *\n * @return {?{ time: number, count: number }} An object containing `time` which is when the last\n *                                            insert occurred as a UNIX epoch, and `count` which is\n *                                            the number of inserts that have occurred.\n */\nfunction getInsertUsage( state, id ) {\n\treturn get( state.preferences.insertUsage, [ id ], null );\n}\n\n/**\n * Returns whether we can show a block type in the inserter\n *\n * @param {Object} state Global State\n * @param {Object} blockType BlockType\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be shown in the inserter.\n */\nconst canIncludeBlockTypeInInserter = ( state, blockType, rootClientId ) => {\n\tif ( ! hasBlockSupport( blockType, 'inserter', true ) ) {\n\t\treturn false;\n\t}\n\n\treturn canInsertBlockTypeUnmemoized( state, blockType.name, rootClientId );\n};\n\n/**\n * Determines the items that appear in the inserter. Includes both static\n * items (e.g. a regular block type) and dynamic items (e.g. a reusable block).\n *\n * Each item object contains what's necessary to display a button in the\n * inserter and handle its selection.\n *\n * The 'utility' property indicates how useful we think an item will be to the\n * user. There are 4 levels of utility:\n *\n * 1. Blocks that are contextually useful (utility = 3)\n * 2. Blocks that have been previously inserted (utility = 2)\n * 3. Blocks that are in the common category (utility = 1)\n * 4. All other blocks (utility = 0)\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'utility' and 'frecency'.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Editor.InserterItem[]} Items that appear in inserter.\n *\n * @typedef {Object} Editor.InserterItem\n * @property {string}   id                Unique identifier for the item.\n * @property {string}   name              The type of block to create.\n * @property {Object}   initialAttributes Attributes to pass to the newly created block.\n * @property {string}   title             Title of the item, as it appears in the inserter.\n * @property {string}   icon              Dashicon for the item, as it appears in the inserter.\n * @property {string}   category          Block category that the item is associated with.\n * @property {string[]} keywords          Keywords that can be searched to find this item.\n * @property {boolean}  isDisabled        Whether or not the user should be prevented from inserting\n *                                        this item.\n * @property {number}   utility           How useful we think this item is, between 0 and 3.\n * @property {number}   frecency          Hueristic that combines frequency and recency.\n */\nexport const getInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst calculateUtility = ( category, count, isContextual ) => {\n\t\t\tif ( isContextual ) {\n\t\t\t\treturn INSERTER_UTILITY_HIGH;\n\t\t\t} else if ( count > 0 ) {\n\t\t\t\treturn INSERTER_UTILITY_MEDIUM;\n\t\t\t} else if ( category === 'common' ) {\n\t\t\t\treturn INSERTER_UTILITY_LOW;\n\t\t\t}\n\t\t\treturn INSERTER_UTILITY_NONE;\n\t\t};\n\n\t\tconst calculateFrecency = ( time, count ) => {\n\t\t\tif ( ! time ) {\n\t\t\t\treturn count;\n\t\t\t}\n\n\t\t\t// The selector is cached, which means Date.now() is the last time that the\n\t\t\t// relevant state changed. This suits our needs.\n\t\t\tconst duration = Date.now() - time;\n\n\t\t\tswitch ( true ) {\n\t\t\t\tcase duration < MILLISECONDS_PER_HOUR:\n\t\t\t\t\treturn count * 4;\n\t\t\t\tcase duration < MILLISECONDS_PER_DAY:\n\t\t\t\t\treturn count * 2;\n\t\t\t\tcase duration < MILLISECONDS_PER_WEEK:\n\t\t\t\t\treturn count / 2;\n\t\t\t\tdefault:\n\t\t\t\t\treturn count / 4;\n\t\t\t}\n\t\t};\n\n\t\tconst buildBlockTypeInserterItem = ( blockType ) => {\n\t\t\tconst id = blockType.name;\n\n\t\t\tlet isDisabled = false;\n\t\t\tif ( ! hasBlockSupport( blockType.name, 'multiple', true ) ) {\n\t\t\t\tisDisabled = some( getBlocksByClientId( state, getClientIdsWithDescendants( state ) ), { name: blockType.name } );\n\t\t\t}\n\n\t\t\tconst isContextual = isArray( blockType.parent );\n\t\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tname: blockType.name,\n\t\t\t\tinitialAttributes: {},\n\t\t\t\ttitle: blockType.title,\n\t\t\t\ticon: blockType.icon,\n\t\t\t\tcategory: blockType.category,\n\t\t\t\tkeywords: blockType.keywords,\n\t\t\t\tisDisabled,\n\t\t\t\tutility: calculateUtility( blockType.category, count, isContextual ),\n\t\t\t\tfrecency: calculateFrecency( time, count ),\n\t\t\t};\n\t\t};\n\n\t\tconst buildReusableBlockInserterItem = ( reusableBlock ) => {\n\t\t\tconst id = `core/block/${ reusableBlock.id }`;\n\n\t\t\tconst referencedBlocks = __experimentalGetParsedReusableBlock( state, reusableBlock.id );\n\t\t\tlet referencedBlockType;\n\t\t\tif ( referencedBlocks.length === 1 ) {\n\t\t\t\treferencedBlockType = getBlockType( referencedBlocks[ 0 ].name );\n\t\t\t}\n\n\t\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\t\tconst utility = calculateUtility( 'reusable', count, false );\n\t\t\tconst frecency = calculateFrecency( time, count );\n\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tname: 'core/block',\n\t\t\t\tinitialAttributes: { ref: reusableBlock.id },\n\t\t\t\ttitle: reusableBlock.title,\n\t\t\t\ticon: referencedBlockType ? referencedBlockType.icon : templateIcon,\n\t\t\t\tcategory: 'reusable',\n\t\t\t\tkeywords: [],\n\t\t\t\tisDisabled: false,\n\t\t\t\tutility,\n\t\t\t\tfrecency,\n\t\t\t};\n\t\t};\n\n\t\tconst blockTypeInserterItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) => canIncludeBlockTypeInInserter( state, blockType, rootClientId ) )\n\t\t\t.map( buildBlockTypeInserterItem );\n\n\t\tconst reusableBlockInserterItems = canInsertBlockTypeUnmemoized( state, 'core/block', rootClientId ) ?\n\t\t\tgetReusableBlocks( state ).map( buildReusableBlockInserterItem ) :\n\t\t\t[];\n\n\t\treturn orderBy(\n\t\t\t[ ...blockTypeInserterItems, ...reusableBlockInserterItems ],\n\t\t\t[ 'utility', 'frecency' ],\n\t\t\t[ 'desc', 'desc' ]\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t],\n);\n\n/**\n * Determines whether there are items to show in the inserter.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Items that appear in inserter.\n */\nexport const hasInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst hasBlockType = some(\n\t\t\tgetBlockTypes(),\n\t\t\t( blockType ) => canIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t\tif ( hasBlockType ) {\n\t\t\treturn true;\n\t\t}\n\t\tconst hasReusableBlock = (\n\t\t\tcanInsertBlockTypeUnmemoized( state, 'core/block', rootClientId ) &&\n\t\t\tgetReusableBlocks( state ).length > 0\n\t\t);\n\n\t\treturn hasReusableBlock;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t],\n);\n\n/**\n * Returns the Block List settings of a block, if any exist.\n *\n * @param {Object}  state    Editor state.\n * @param {?string} clientId Block client ID.\n *\n * @return {?Object} Block settings of the block if set.\n */\nexport function getBlockListSettings( state, clientId ) {\n\treturn state.blockListSettings[ clientId ];\n}\n\n/**\n * Returns the editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getSettings( state ) {\n\treturn state.settings;\n}\n\n/**\n * Returns true if the most recent block change is be considered persistent, or\n * false otherwise. A persistent change is one committed by BlockEditorProvider\n * via its `onChange` callback, in addition to `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was persistent.\n */\nexport function isLastBlockChangePersistent( state ) {\n\treturn state.blocks.isPersistentChange;\n}\n\n/**\n * Returns the parsed block saved as shared block with the given ID.\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The shared block's ID.\n *\n * @return {Object} The parsed block.\n */\nexport const __experimentalGetParsedReusableBlock = createSelector(\n\t( state, ref ) => {\n\t\tconst reusableBlock = find(\n\t\t\tgetReusableBlocks( state ),\n\t\t\t( block ) => block.id === ref\n\t\t);\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn parse( reusableBlock.content );\n\t},\n\t( state ) => [\n\t\tgetReusableBlocks( state ),\n\t],\n);\n\n/**\n * Returns true if the most recent block change is be considered ignored, or\n * false otherwise. An ignored change is one not to be committed by\n * BlockEditorProvider, neither via `onChange` nor `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was ignored.\n */\nexport function __unstableIsLastBlockChangeIgnored( state ) {\n\t// TODO: Removal Plan: Changes incurred by RECEIVE_BLOCKS should not be\n\t// ignored if in-fact they result in a change in blocks state. The current\n\t// need to ignore changes not a result of user interaction should be\n\t// accounted for in the refactoring of reusable blocks as occurring within\n\t// their own separate block editor / state (#7119).\n\treturn state.blocks.isIgnoredChange;\n}\n\n/**\n * Returns the block attributes changed as a result of the last dispatched\n * action.\n *\n * @param {Object} state Block editor state.\n *\n * @return {Object<string,Object>} Subsets of block attributes changed, keyed\n *                                 by block client ID.\n */\nexport function __experimentalGetLastBlockAttributeChanges( state ) {\n\treturn state.lastBlockAttributesChange;\n}\n\n/**\n * Returns the available reusable blocks\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} Reusable blocks\n */\nfunction getReusableBlocks( state ) {\n\treturn get( state, [ 'settings', '__experimentalReusableBlocks' ], EMPTY_ARRAY );\n}\n\n/**\n * Returns whether the navigation mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean}     Is navigation mode enabled.\n */\nexport function isNavigationMode( state ) {\n\treturn state.isNavigationMode;\n}\n\n/**\n * Returns true if the last change was an automatic change, false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the last change was automatic.\n */\nexport function didAutomaticChange( state ) {\n\treturn state.didAutomaticChange;\n}\n"]}