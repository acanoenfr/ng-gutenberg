"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _reactNative = require("react-native");

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _styles = _interopRequireDefault(require("./styles.scss"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function MediaPlaceholder(props) {
  var mediaType = props.mediaType,
      _props$labels = props.labels,
      labels = _props$labels === void 0 ? {} : _props$labels,
      icon = props.icon,
      onSelectURL = props.onSelectURL;
  var isImage = _blockEditor.MEDIA_TYPE_IMAGE === mediaType;
  var isVideo = _blockEditor.MEDIA_TYPE_VIDEO === mediaType;
  var placeholderTitle = labels.title;

  if (placeholderTitle === undefined) {
    placeholderTitle = (0, _i18n.__)('Media');

    if (isImage) {
      placeholderTitle = (0, _i18n.__)('Image');
    } else if (isVideo) {
      placeholderTitle = (0, _i18n.__)('Video');
    }
  }

  var instructions = labels.instructions;

  if (instructions === undefined) {
    if (isImage) {
      instructions = (0, _i18n.__)('ADD IMAGE');
    } else if (isVideo) {
      instructions = (0, _i18n.__)('ADD VIDEO');
    }
  }

  var accessibilityHint = (0, _i18n.__)('Double tap to select');

  if (isImage) {
    accessibilityHint = (0, _i18n.__)('Double tap to select an image');
  } else if (isVideo) {
    accessibilityHint = (0, _i18n.__)('Double tap to select a video');
  }

  return (0, _element.createElement)(_blockEditor.MediaUpload, {
    mediaType: mediaType,
    onSelectURL: onSelectURL,
    render: function render(_ref) {
      var open = _ref.open,
          getMediaOptions = _ref.getMediaOptions;
      return (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
        accessibilityLabel: (0, _i18n.sprintf)(
        /* translators: accessibility text for the media block empty state. %s: media type */
        (0, _i18n.__)('%s block. Empty'), placeholderTitle),
        accessibilityRole: 'button',
        accessibilityHint: accessibilityHint,
        onPress: function onPress(event) {
          props.onFocus(event);
          open();
        }
      }, (0, _element.createElement)(_reactNative.View, {
        style: _styles.default.emptyStateContainer
      }, getMediaOptions(), (0, _element.createElement)(_reactNative.View, {
        style: _styles.default.modalIcon
      }, icon), (0, _element.createElement)(_reactNative.Text, {
        style: _styles.default.emptyStateTitle
      }, placeholderTitle), (0, _element.createElement)(_reactNative.Text, {
        style: _styles.default.emptyStateDescription
      }, instructions)));
    }
  });
}

var _default = MediaPlaceholder;
exports.default = _default;
//# sourceMappingURL=index.native.js.map