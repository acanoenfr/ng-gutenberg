"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _lodash = require("lodash");

var _data = require("@wordpress/data");

var _blocks = require("@wordpress/blocks");

var _ignoreNestedEvents = _interopRequireDefault(require("../ignore-nested-events"));

var _defaultBlockAppender = _interopRequireDefault(require("../default-block-appender"));

var _buttonBlockAppender = _interopRequireDefault(require("../button-block-appender"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function BlockListAppender(_ref) {
  var blockClientIds = _ref.blockClientIds,
      rootClientId = _ref.rootClientId,
      canInsertDefaultBlock = _ref.canInsertDefaultBlock,
      isLocked = _ref.isLocked,
      CustomAppender = _ref.renderAppender;

  if (isLocked) {
    return null;
  } // If a render prop has been provided
  // use it to render the appender.


  if (CustomAppender) {
    return (0, _element.createElement)("div", {
      className: "block-list-appender"
    }, (0, _element.createElement)(CustomAppender, null));
  } // a false value means, don't render any appender.


  if (CustomAppender === false) {
    return null;
  } // Render the default block appender when renderAppender has not been
  // provided and the context supports use of the default appender.


  if (canInsertDefaultBlock) {
    return (0, _element.createElement)("div", {
      className: "block-list-appender"
    }, (0, _element.createElement)(_ignoreNestedEvents.default, {
      childHandledEvents: ['onFocus', 'onClick', 'onKeyDown']
    }, (0, _element.createElement)(_defaultBlockAppender.default, {
      rootClientId: rootClientId,
      lastBlockClientId: (0, _lodash.last)(blockClientIds)
    })));
  } // Fallback in the case no renderAppender has been provided and the
  // default block can't be inserted.


  return (0, _element.createElement)("div", {
    className: "block-list-appender"
  }, (0, _element.createElement)(_buttonBlockAppender.default, {
    rootClientId: rootClientId,
    className: "block-list-appender__toggle"
  }));
}

var _default = (0, _data.withSelect)(function (select, _ref2) {
  var rootClientId = _ref2.rootClientId;

  var _select = select('core/block-editor'),
      getBlockOrder = _select.getBlockOrder,
      canInsertBlockType = _select.canInsertBlockType,
      getTemplateLock = _select.getTemplateLock;

  return {
    isLocked: !!getTemplateLock(rootClientId),
    blockClientIds: getBlockOrder(rootClientId),
    canInsertDefaultBlock: canInsertBlockType((0, _blocks.getDefaultBlockName)(), rootClientId)
  };
})(BlockListAppender);

exports.default = _default;
//# sourceMappingURL=index.js.map