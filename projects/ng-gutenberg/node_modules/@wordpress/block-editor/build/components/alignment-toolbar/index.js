"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AlignmentToolbar = AlignmentToolbar;
exports.default = void 0;

var _element = require("@wordpress/element");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
var DEFAULT_ALIGNMENT_CONTROLS = [{
  icon: 'editor-alignleft',
  title: (0, _i18n.__)('Align Text Left'),
  align: 'left'
}, {
  icon: 'editor-aligncenter',
  title: (0, _i18n.__)('Align Text Center'),
  align: 'center'
}, {
  icon: 'editor-alignright',
  title: (0, _i18n.__)('Align Text Right'),
  align: 'right'
}];

function AlignmentToolbar(props) {
  var value = props.value,
      onChange = props.onChange,
      _props$alignmentContr = props.alignmentControls,
      alignmentControls = _props$alignmentContr === void 0 ? DEFAULT_ALIGNMENT_CONTROLS : _props$alignmentContr,
      _props$label = props.label,
      label = _props$label === void 0 ? (0, _i18n.__)('Change text alignment') : _props$label,
      _props$isCollapsed = props.isCollapsed,
      isCollapsed = _props$isCollapsed === void 0 ? true : _props$isCollapsed;

  function applyOrUnset(align) {
    return function () {
      return onChange(value === align ? undefined : align);
    };
  }

  var activeAlignment = (0, _lodash.find)(alignmentControls, function (control) {
    return control.align === value;
  });
  return (0, _element.createElement)(_components.Toolbar, {
    isCollapsed: isCollapsed,
    icon: activeAlignment ? activeAlignment.icon : 'editor-alignleft',
    label: label,
    controls: alignmentControls.map(function (control) {
      var align = control.align;
      var isActive = value === align;
      return (0, _objectSpread2.default)({}, control, {
        isActive: isActive,
        onClick: applyOrUnset(align)
      });
    })
  });
}

var _default = AlignmentToolbar;
exports.default = _default;
//# sourceMappingURL=index.js.map