{"version":3,"sources":["@wordpress/block-editor/src/components/provider/index.js"],"names":["BlockEditorProvider","props","updateSettings","settings","resetBlocks","value","attachChangeObserver","registry","prevProps","isSyncingOutcomingValue","isSyncingIncomingValue","unsubscribe","select","getBlocks","isLastBlockChangePersistent","__unstableIsLastBlockChangeIgnored","blocks","isPersistent","subscribe","onChange","noop","onInput","newBlocks","newIsPersistent","children","Component","withRegistryProvider","dispatch"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { noop } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Component } from '@wordpress/element';\nimport { withDispatch } from '@wordpress/data';\nimport { compose } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport withRegistryProvider from './with-registry-provider';\n\nclass BlockEditorProvider extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.updateSettings( this.props.settings );\n\t\tthis.props.resetBlocks( this.props.value );\n\t\tthis.attachChangeObserver( this.props.registry );\n\t}\n\n\tcomponentDidUpdate( prevProps ) {\n\t\tconst {\n\t\t\tsettings,\n\t\t\tupdateSettings,\n\t\t\tvalue,\n\t\t\tresetBlocks,\n\t\t\tregistry,\n\t\t} = this.props;\n\n\t\tif ( settings !== prevProps.settings ) {\n\t\t\tupdateSettings( settings );\n\t\t}\n\n\t\tif ( registry !== prevProps.registry ) {\n\t\t\tthis.attachChangeObserver( registry );\n\t\t}\n\n\t\tif ( this.isSyncingOutcomingValue !== null && this.isSyncingOutcomingValue === value ) {\n\t\t\t// Skip block reset if the value matches expected outbound sync\n\t\t\t// triggered by this component by a preceding change detection.\n\t\t\t// Only skip if the value matches expectation, since a reset should\n\t\t\t// still occur if the value is modified (not equal by reference),\n\t\t\t// to allow that the consumer may apply modifications to reflect\n\t\t\t// back on the editor.\n\t\t\tthis.isSyncingOutcomingValue = null;\n\t\t} else if ( value !== prevProps.value ) {\n\t\t\t// Reset changing value in all other cases than the sync described\n\t\t\t// above. Since this can be reached in an update following an out-\n\t\t\t// bound sync, unset the outbound value to avoid considering it in\n\t\t\t// subsequent renders.\n\t\t\tthis.isSyncingOutcomingValue = null;\n\t\t\tthis.isSyncingIncomingValue = value;\n\t\t\tresetBlocks( value );\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tif ( this.unsubscribe ) {\n\t\t\tthis.unsubscribe();\n\t\t}\n\t}\n\n\t/**\n\t * Given a registry object, overrides the default dispatch behavior for the\n\t * `core/block-editor` store to interpret a state change and decide whether\n\t * we should call `onChange` or `onInput` depending on whether the change\n\t * is persistent or not.\n\t *\n\t * This needs to be done synchronously after state changes (instead of using\n\t * `componentDidUpdate`) in order to avoid batching these changes.\n\t *\n\t * @param {WPDataRegistry} registry     Registry from which block editor\n\t *                                      dispatch is to be overriden.\n\t */\n\tattachChangeObserver( registry ) {\n\t\tif ( this.unsubscribe ) {\n\t\t\tthis.unsubscribe();\n\t\t}\n\n\t\tconst {\n\t\t\tgetBlocks,\n\t\t\tisLastBlockChangePersistent,\n\t\t\t__unstableIsLastBlockChangeIgnored,\n\t\t} = registry.select( 'core/block-editor' );\n\n\t\tlet blocks = getBlocks();\n\t\tlet isPersistent = isLastBlockChangePersistent();\n\n\t\tthis.unsubscribe = registry.subscribe( () => {\n\t\t\tconst {\n\t\t\t\tonChange = noop,\n\t\t\t\tonInput = noop,\n\t\t\t} = this.props;\n\n\t\t\tconst newBlocks = getBlocks();\n\t\t\tconst newIsPersistent = isLastBlockChangePersistent();\n\n\t\t\tif (\n\t\t\t\tnewBlocks !== blocks && (\n\t\t\t\t\tthis.isSyncingIncomingValue ||\n\t\t\t\t\t__unstableIsLastBlockChangeIgnored()\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis.isSyncingIncomingValue = null;\n\t\t\t\tblocks = newBlocks;\n\t\t\t\tisPersistent = newIsPersistent;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tnewBlocks !== blocks ||\n\t\t\t\t// This happens when a previous input is explicitely marked as persistent.\n\t\t\t\t( newIsPersistent && ! isPersistent )\n\t\t\t) {\n\t\t\t\t// When knowing the blocks value is changing, assign instance\n\t\t\t\t// value to skip reset in subsequent `componentDidUpdate`.\n\t\t\t\tif ( newBlocks !== blocks ) {\n\t\t\t\t\tthis.isSyncingOutcomingValue = newBlocks;\n\t\t\t\t}\n\n\t\t\t\tblocks = newBlocks;\n\t\t\t\tisPersistent = newIsPersistent;\n\n\t\t\t\tif ( isPersistent ) {\n\t\t\t\t\tonChange( blocks );\n\t\t\t\t} else {\n\t\t\t\t\tonInput( blocks );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\trender() {\n\t\tconst { children } = this.props;\n\n\t\treturn children;\n\t}\n}\n\nexport default compose( [\n\twithRegistryProvider,\n\twithDispatch( ( dispatch ) => {\n\t\tconst {\n\t\t\tupdateSettings,\n\t\t\tresetBlocks,\n\t\t} = dispatch( 'core/block-editor' );\n\n\t\treturn {\n\t\t\tupdateSettings,\n\t\t\tresetBlocks,\n\t\t};\n\t} ),\n] )( BlockEditorProvider );\n"]}