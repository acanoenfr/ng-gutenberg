"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _classnames = _interopRequireDefault(require("classnames"));

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _blockDropZone = _interopRequireDefault(require("../block-drop-zone"));

var _inserter = _interopRequireDefault(require("../inserter"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ButtonBlockAppender(_ref) {
  var rootClientId = _ref.rootClientId,
      className = _ref.className;
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockDropZone.default, {
    rootClientId: rootClientId
  }), (0, _element.createElement)(_inserter.default, {
    rootClientId: rootClientId,
    renderToggle: function renderToggle(_ref2) {
      var onToggle = _ref2.onToggle,
          disabled = _ref2.disabled,
          isOpen = _ref2.isOpen;
      return (0, _element.createElement)(_components.Button, {
        className: (0, _classnames.default)(className, 'block-editor-button-block-appender'),
        onClick: onToggle,
        "aria-expanded": isOpen,
        disabled: disabled
      }, (0, _element.createElement)("span", {
        className: "screen-reader-text"
      }, (0, _i18n.__)('Add Block')), (0, _element.createElement)(_components.Icon, {
        icon: "insert"
      }));
    },
    isAppender: true
  }));
}
/**
 * @see https://github.com/WordPress/gutenberg/blob/master/packages/block-editor/src/components/button-block-appender/README.md
 */


var _default = ButtonBlockAppender;
exports.default = _default;
//# sourceMappingURL=index.js.map