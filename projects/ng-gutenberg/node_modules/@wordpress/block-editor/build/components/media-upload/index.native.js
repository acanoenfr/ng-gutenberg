"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MediaUpload = exports.OPTION_TAKE_PHOTO = exports.OPTION_TAKE_VIDEO = exports.MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_WORD_PRESS_LIBRARY = exports.MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_TAKE_MEDIA = exports.MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_CHOOSE_FROM_DEVICE = exports.MEDIA_TYPE_VIDEO = exports.MEDIA_TYPE_IMAGE = void 0;

var _element = require("@wordpress/element");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _reactNativeGutenbergBridge = require("react-native-gutenberg-bridge");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
var MEDIA_TYPE_IMAGE = 'image';
exports.MEDIA_TYPE_IMAGE = MEDIA_TYPE_IMAGE;
var MEDIA_TYPE_VIDEO = 'video';
exports.MEDIA_TYPE_VIDEO = MEDIA_TYPE_VIDEO;
var MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_CHOOSE_FROM_DEVICE = 'choose_from_device';
exports.MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_CHOOSE_FROM_DEVICE = MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_CHOOSE_FROM_DEVICE;
var MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_TAKE_MEDIA = 'take_media';
exports.MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_TAKE_MEDIA = MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_TAKE_MEDIA;
var MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_WORD_PRESS_LIBRARY = 'wordpress_media_library';
exports.MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_WORD_PRESS_LIBRARY = MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_WORD_PRESS_LIBRARY;
var OPTION_TAKE_VIDEO = (0, _i18n.__)('Take a Video');
exports.OPTION_TAKE_VIDEO = OPTION_TAKE_VIDEO;
var OPTION_TAKE_PHOTO = (0, _i18n.__)('Take a Photo');
exports.OPTION_TAKE_PHOTO = OPTION_TAKE_PHOTO;

var MediaUpload =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(MediaUpload, _React$Component);

  function MediaUpload() {
    (0, _classCallCheck2.default)(this, MediaUpload);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MediaUpload).apply(this, arguments));
  }

  (0, _createClass2.default)(MediaUpload, [{
    key: "getTakeMediaLabel",
    value: function getTakeMediaLabel() {
      var mediaType = this.props.mediaType;

      if (mediaType === MEDIA_TYPE_IMAGE) {
        return OPTION_TAKE_PHOTO;
      } else if (mediaType === MEDIA_TYPE_VIDEO) {
        return OPTION_TAKE_VIDEO;
      }
    }
  }, {
    key: "getMediaOptionsItems",
    value: function getMediaOptionsItems() {
      return [{
        icon: this.getChooseFromDeviceIcon(),
        value: MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_CHOOSE_FROM_DEVICE,
        label: (0, _i18n.__)('Choose from device')
      }, {
        icon: this.getTakeMediaIcon(),
        value: MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_TAKE_MEDIA,
        label: this.getTakeMediaLabel()
      }, {
        icon: this.getWordPressLibraryIcon(),
        value: MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_WORD_PRESS_LIBRARY,
        label: (0, _i18n.__)('WordPress Media Library')
      }];
    }
  }, {
    key: "getChooseFromDeviceIcon",
    value: function getChooseFromDeviceIcon() {
      var mediaType = this.props.mediaType;

      if (mediaType === MEDIA_TYPE_IMAGE) {
        return 'format-image';
      } else if (mediaType === MEDIA_TYPE_VIDEO) {
        return 'format-video';
      }
    }
  }, {
    key: "getTakeMediaIcon",
    value: function getTakeMediaIcon() {
      return 'camera';
    }
  }, {
    key: "getWordPressLibraryIcon",
    value: function getWordPressLibraryIcon() {
      return 'wordpress-alt';
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var mediaType = this.props.mediaType;

      var onMediaLibraryButtonPressed = function onMediaLibraryButtonPressed() {
        (0, _reactNativeGutenbergBridge.requestMediaPickFromMediaLibrary)([mediaType], function (mediaId, mediaUrl) {
          if (mediaId) {
            _this.props.onSelectURL(mediaId, mediaUrl);
          }
        });
      };

      var onMediaUploadButtonPressed = function onMediaUploadButtonPressed() {
        (0, _reactNativeGutenbergBridge.requestMediaPickFromDeviceLibrary)([mediaType], function (mediaId, mediaUrl) {
          if (mediaId) {
            _this.props.onSelectURL(mediaId, mediaUrl);
          }
        });
      };

      var onMediaCaptureButtonPressed = function onMediaCaptureButtonPressed() {
        (0, _reactNativeGutenbergBridge.requestMediaPickFromDeviceCamera)([mediaType], function (mediaId, mediaUrl) {
          if (mediaId) {
            _this.props.onSelectURL(mediaId, mediaUrl);
          }
        });
      };

      var mediaOptions = this.getMediaOptionsItems();
      var picker;

      var onPickerPresent = function onPickerPresent() {
        picker.presentPicker();
      };

      var getMediaOptions = function getMediaOptions() {
        return (0, _element.createElement)(_components.Picker, {
          hideCancelButton: true,
          ref: function ref(instance) {
            return picker = instance;
          },
          options: mediaOptions,
          onChange: function onChange(value) {
            if (value === MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_CHOOSE_FROM_DEVICE) {
              onMediaUploadButtonPressed();
            } else if (value === MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_TAKE_MEDIA) {
              onMediaCaptureButtonPressed();
            } else if (value === MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_WORD_PRESS_LIBRARY) {
              onMediaLibraryButtonPressed();
            }
          }
        });
      };

      return this.props.render({
        open: onPickerPresent,
        getMediaOptions: getMediaOptions
      });
    }
  }]);
  return MediaUpload;
}(_react.default.Component);

exports.MediaUpload = MediaUpload;
var _default = MediaUpload;
exports.default = _default;
//# sourceMappingURL=index.native.js.map