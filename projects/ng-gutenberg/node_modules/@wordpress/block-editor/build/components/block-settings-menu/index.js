"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockSettingsMenu = BlockSettingsMenu;
exports.default = void 0;

var _element = require("@wordpress/element");

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _blockEditorKeyboardShortcuts = require("../block-editor-keyboard-shortcuts");

var _blockActions = _interopRequireDefault(require("../block-actions"));

var _blockModeToggle = _interopRequireDefault(require("./block-mode-toggle"));

var _blockHtmlConvertButton = _interopRequireDefault(require("./block-html-convert-button"));

var _blockUnknownConvertButton = _interopRequireDefault(require("./block-unknown-convert-button"));

var _blockSettingsMenuFirstItem = _interopRequireDefault(require("./block-settings-menu-first-item"));

var _blockSettingsMenuPluginsExtension = _interopRequireDefault(require("./block-settings-menu-plugins-extension"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var POPOVER_PROPS = {
  className: 'block-editor-block-settings-menu__popover editor-block-settings-menu__popover',
  position: 'bottom right'
};

function BlockSettingsMenu(_ref) {
  var clientIds = _ref.clientIds;
  var blockClientIds = (0, _lodash.castArray)(clientIds);
  var count = blockClientIds.length;
  var firstBlockClientId = blockClientIds[0];
  return (0, _element.createElement)(_blockActions.default, {
    clientIds: clientIds
  }, function (_ref2) {
    var canDuplicate = _ref2.canDuplicate,
        canInsertDefaultBlock = _ref2.canInsertDefaultBlock,
        isLocked = _ref2.isLocked,
        onDuplicate = _ref2.onDuplicate,
        onInsertAfter = _ref2.onInsertAfter,
        onInsertBefore = _ref2.onInsertBefore,
        onRemove = _ref2.onRemove;
    return (0, _element.createElement)(_components.Toolbar, null, (0, _element.createElement)(_components.DropdownMenu, {
      icon: "ellipsis",
      label: (0, _i18n.__)('More options'),
      className: "block-editor-block-settings-menu",
      popoverProps: POPOVER_PROPS
    }, function (_ref3) {
      var onClose = _ref3.onClose;
      return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.MenuGroup, null, (0, _element.createElement)(_blockSettingsMenuFirstItem.default.Slot, {
        fillProps: {
          onClose: onClose
        }
      }), count === 1 && (0, _element.createElement)(_blockUnknownConvertButton.default, {
        clientId: firstBlockClientId
      }), count === 1 && (0, _element.createElement)(_blockHtmlConvertButton.default, {
        clientId: firstBlockClientId
      }), canDuplicate && (0, _element.createElement)(_components.MenuItem, {
        className: "editor-block-settings-menu__control block-editor-block-settings-menu__control",
        onClick: (0, _lodash.flow)(onClose, onDuplicate),
        icon: "admin-page",
        shortcut: _blockEditorKeyboardShortcuts.shortcuts.duplicate.display
      }, (0, _i18n.__)('Duplicate')), canInsertDefaultBlock && (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.MenuItem, {
        className: "editor-block-settings-menu__control block-editor-block-settings-menu__control",
        onClick: (0, _lodash.flow)(onClose, onInsertBefore),
        icon: "insert-before",
        shortcut: _blockEditorKeyboardShortcuts.shortcuts.insertBefore.display
      }, (0, _i18n.__)('Insert Before')), (0, _element.createElement)(_components.MenuItem, {
        className: "editor-block-settings-menu__control block-editor-block-settings-menu__control",
        onClick: (0, _lodash.flow)(onClose, onInsertAfter),
        icon: "insert-after",
        shortcut: _blockEditorKeyboardShortcuts.shortcuts.insertAfter.display
      }, (0, _i18n.__)('Insert After'))), count === 1 && (0, _element.createElement)(_blockModeToggle.default, {
        clientId: firstBlockClientId,
        onToggle: onClose
      }), (0, _element.createElement)(_blockSettingsMenuPluginsExtension.default.Slot, {
        fillProps: {
          clientIds: clientIds,
          onClose: onClose
        }
      })), (0, _element.createElement)(_components.MenuGroup, null, !isLocked && (0, _element.createElement)(_components.MenuItem, {
        className: "editor-block-settings-menu__control block-editor-block-settings-menu__control",
        onClick: (0, _lodash.flow)(onClose, onRemove),
        icon: "trash",
        shortcut: _blockEditorKeyboardShortcuts.shortcuts.removeBlock.display
      }, (0, _i18n._n)('Remove Block', 'Remove Blocks', count))));
    }));
  });
}

var _default = BlockSettingsMenu;
exports.default = _default;
//# sourceMappingURL=index.js.map