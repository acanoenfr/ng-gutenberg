"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BlockList = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _lodash = require("lodash");

var _reactNative = require("react-native");

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _blocks = require("@wordpress/blocks");

var _components = require("@wordpress/components");

var _style = _interopRequireDefault(require("./style.scss"));

var _block = _interopRequireDefault(require("./block"));

var _defaultBlockAppender = _interopRequireDefault(require("../default-block-appender"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var innerToolbarHeight = 44;

var BlockList =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(BlockList, _Component);

  function BlockList() {
    var _this;

    (0, _classCallCheck2.default)(this, BlockList);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BlockList).apply(this, arguments));
    _this.renderItem = _this.renderItem.bind((0, _assertThisInitialized2.default)(_this));
    _this.renderAddBlockSeparator = _this.renderAddBlockSeparator.bind((0, _assertThisInitialized2.default)(_this));
    _this.renderBlockListFooter = _this.renderBlockListFooter.bind((0, _assertThisInitialized2.default)(_this));
    _this.renderDefaultBlockAppender = _this.renderDefaultBlockAppender.bind((0, _assertThisInitialized2.default)(_this));
    _this.onCaretVerticalPositionChange = _this.onCaretVerticalPositionChange.bind((0, _assertThisInitialized2.default)(_this));
    _this.scrollViewInnerRef = _this.scrollViewInnerRef.bind((0, _assertThisInitialized2.default)(_this));
    _this.addBlockToEndOfPost = _this.addBlockToEndOfPost.bind((0, _assertThisInitialized2.default)(_this));
    _this.shouldFlatListPreventAutomaticScroll = _this.shouldFlatListPreventAutomaticScroll.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(BlockList, [{
    key: "addBlockToEndOfPost",
    value: function addBlockToEndOfPost(newBlock) {
      this.props.insertBlock(newBlock, this.props.blockCount);
    }
  }, {
    key: "blockHolderBorderStyle",
    value: function blockHolderBorderStyle() {
      return this.props.isFullyBordered ? _style.default.blockHolderFullBordered : _style.default.blockHolderSemiBordered;
    }
  }, {
    key: "onCaretVerticalPositionChange",
    value: function onCaretVerticalPositionChange(targetId, caretY, previousCaretY) {
      _components.KeyboardAwareFlatList.handleCaretVerticalPositionChange(this.scrollViewRef, targetId, caretY, previousCaretY);
    }
  }, {
    key: "scrollViewInnerRef",
    value: function scrollViewInnerRef(ref) {
      this.scrollViewRef = ref;
    }
  }, {
    key: "shouldFlatListPreventAutomaticScroll",
    value: function shouldFlatListPreventAutomaticScroll() {
      return this.props.isBlockInsertionPointVisible;
    }
  }, {
    key: "renderDefaultBlockAppender",
    value: function renderDefaultBlockAppender() {
      return (0, _element.createElement)(_components.ReadableContentView, null, (0, _element.createElement)(_defaultBlockAppender.default, {
        rootClientId: this.props.rootClientId,
        containerStyle: [_style.default.blockContainerFocused, this.blockHolderBorderStyle(), {
          borderColor: 'transparent'
        }]
      }));
    }
  }, {
    key: "render",
    value: function render() {
      return (0, _element.createElement)(_reactNative.View, {
        style: {
          flex: 1
        },
        onAccessibilityEscape: this.props.clearSelectedBlock
      }, (0, _element.createElement)(_components.KeyboardAwareFlatList, (0, _extends2.default)({}, _reactNative.Platform.OS === 'android' ? {
        removeClippedSubviews: false
      } : {}, {
        // Disable clipping on Android to fix focus losing. See https://github.com/wordpress-mobile/gutenberg-mobile/pull/741#issuecomment-472746541
        accessibilityLabel: "block-list",
        innerRef: this.scrollViewInnerRef,
        extraScrollHeight: innerToolbarHeight + 10,
        keyboardShouldPersistTaps: "always",
        style: _style.default.list,
        data: this.props.blockClientIds,
        extraData: [this.props.isFullyBordered],
        keyExtractor: _lodash.identity,
        renderItem: this.renderItem,
        shouldPreventAutomaticScroll: this.shouldFlatListPreventAutomaticScroll,
        title: this.props.title,
        ListHeaderComponent: this.props.header,
        ListEmptyComponent: this.renderDefaultBlockAppender,
        ListFooterComponent: this.renderBlockListFooter
      })));
    }
  }, {
    key: "isReplaceable",
    value: function isReplaceable(block) {
      if (!block) {
        return false;
      }

      return (0, _blocks.isUnmodifiedDefaultBlock)(block);
    }
  }, {
    key: "renderItem",
    value: function renderItem(_ref) {
      var clientId = _ref.item,
          index = _ref.index;
      var _this$props = this.props,
          shouldShowBlockAtIndex = _this$props.shouldShowBlockAtIndex,
          shouldShowInsertionPoint = _this$props.shouldShowInsertionPoint;
      return (0, _element.createElement)(_components.ReadableContentView, null, shouldShowInsertionPoint(clientId) && this.renderAddBlockSeparator(), shouldShowBlockAtIndex(index) && (0, _element.createElement)(_block.default, {
        key: clientId,
        showTitle: false,
        clientId: clientId,
        rootClientId: this.props.rootClientId,
        onCaretVerticalPositionChange: this.onCaretVerticalPositionChange,
        borderStyle: this.blockHolderBorderStyle(),
        focusedBorderColor: _style.default.blockHolderFocused.borderColor
      }));
    }
  }, {
    key: "renderAddBlockSeparator",
    value: function renderAddBlockSeparator() {
      return (0, _element.createElement)(_reactNative.View, {
        style: _style.default.containerStyleAddHere
      }, (0, _element.createElement)(_reactNative.View, {
        style: _style.default.lineStyleAddHere
      }), (0, _element.createElement)(_reactNative.Text, {
        style: _style.default.labelStyleAddHere
      }, (0, _i18n.__)('ADD BLOCK HERE')), (0, _element.createElement)(_reactNative.View, {
        style: _style.default.lineStyleAddHere
      }));
    }
  }, {
    key: "renderBlockListFooter",
    value: function renderBlockListFooter() {
      var _this2 = this;

      var paragraphBlock = (0, _blocks.createBlock)('core/paragraph');
      return (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
        onPress: function onPress() {
          _this2.addBlockToEndOfPost(paragraphBlock);
        }
      }, (0, _element.createElement)(_reactNative.View, {
        style: _style.default.blockListFooter
      }));
    }
  }]);
  return BlockList;
}(_element.Component);

exports.BlockList = BlockList;

var _default = (0, _compose.compose)([(0, _data.withSelect)(function (select, _ref2) {
  var rootClientId = _ref2.rootClientId;

  var _select = select('core/block-editor'),
      getBlockCount = _select.getBlockCount,
      getBlockIndex = _select.getBlockIndex,
      getBlockOrder = _select.getBlockOrder,
      getSelectedBlockClientId = _select.getSelectedBlockClientId,
      getBlockInsertionPoint = _select.getBlockInsertionPoint,
      isBlockInsertionPointVisible = _select.isBlockInsertionPointVisible;

  var selectedBlockClientId = getSelectedBlockClientId();
  var blockClientIds = getBlockOrder(rootClientId);
  var insertionPoint = getBlockInsertionPoint();
  var blockInsertionPointIsVisible = isBlockInsertionPointVisible();

  var shouldShowInsertionPoint = function shouldShowInsertionPoint(clientId) {
    return blockInsertionPointIsVisible && insertionPoint.rootClientId === rootClientId && blockClientIds[insertionPoint.index] === clientId;
  };

  var selectedBlockIndex = getBlockIndex(selectedBlockClientId);

  var shouldShowBlockAtIndex = function shouldShowBlockAtIndex(index) {
    var shouldHideBlockAtIndex = blockInsertionPointIsVisible && // if `index` === `insertionPoint.index`, then block is replaceable
    index === insertionPoint.index && // only hide selected block
    index === selectedBlockIndex;
    return !shouldHideBlockAtIndex;
  };

  return {
    blockClientIds: blockClientIds,
    blockCount: getBlockCount(rootClientId),
    isBlockInsertionPointVisible: isBlockInsertionPointVisible(),
    shouldShowBlockAtIndex: shouldShowBlockAtIndex,
    shouldShowInsertionPoint: shouldShowInsertionPoint,
    selectedBlockClientId: selectedBlockClientId
  };
}), (0, _data.withDispatch)(function (dispatch) {
  var _dispatch = dispatch('core/block-editor'),
      insertBlock = _dispatch.insertBlock,
      replaceBlock = _dispatch.replaceBlock,
      clearSelectedBlock = _dispatch.clearSelectedBlock;

  return {
    clearSelectedBlock: clearSelectedBlock,
    insertBlock: insertBlock,
    replaceBlock: replaceBlock
  };
})])(BlockList);

exports.default = _default;
//# sourceMappingURL=index.native.js.map