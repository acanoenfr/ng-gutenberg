import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { View, Text, TouchableWithoutFeedback } from 'react-native';
/**
 * WordPress dependencies
 */

import { __, sprintf } from '@wordpress/i18n';
import { MediaUpload, MEDIA_TYPE_IMAGE, MEDIA_TYPE_VIDEO } from '@wordpress/block-editor';
/**
 * Internal dependencies
 */

import styles from './styles.scss';

function MediaPlaceholder(props) {
  var mediaType = props.mediaType,
      _props$labels = props.labels,
      labels = _props$labels === void 0 ? {} : _props$labels,
      icon = props.icon,
      onSelectURL = props.onSelectURL;
  var isImage = MEDIA_TYPE_IMAGE === mediaType;
  var isVideo = MEDIA_TYPE_VIDEO === mediaType;
  var placeholderTitle = labels.title;

  if (placeholderTitle === undefined) {
    placeholderTitle = __('Media');

    if (isImage) {
      placeholderTitle = __('Image');
    } else if (isVideo) {
      placeholderTitle = __('Video');
    }
  }

  var instructions = labels.instructions;

  if (instructions === undefined) {
    if (isImage) {
      instructions = __('ADD IMAGE');
    } else if (isVideo) {
      instructions = __('ADD VIDEO');
    }
  }

  var accessibilityHint = __('Double tap to select');

  if (isImage) {
    accessibilityHint = __('Double tap to select an image');
  } else if (isVideo) {
    accessibilityHint = __('Double tap to select a video');
  }

  return createElement(MediaUpload, {
    mediaType: mediaType,
    onSelectURL: onSelectURL,
    render: function render(_ref) {
      var open = _ref.open,
          getMediaOptions = _ref.getMediaOptions;
      return createElement(TouchableWithoutFeedback, {
        accessibilityLabel: sprintf(
        /* translators: accessibility text for the media block empty state. %s: media type */
        __('%s block. Empty'), placeholderTitle),
        accessibilityRole: 'button',
        accessibilityHint: accessibilityHint,
        onPress: function onPress(event) {
          props.onFocus(event);
          open();
        }
      }, createElement(View, {
        style: styles.emptyStateContainer
      }, getMediaOptions(), createElement(View, {
        style: styles.modalIcon
      }, icon), createElement(Text, {
        style: styles.emptyStateTitle
      }, placeholderTitle), createElement(Text, {
        style: styles.emptyStateDescription
      }, instructions)));
    }
  });
}

export default MediaPlaceholder;
//# sourceMappingURL=index.native.js.map