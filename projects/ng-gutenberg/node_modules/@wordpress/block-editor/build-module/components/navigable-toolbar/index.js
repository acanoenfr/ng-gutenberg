import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { omit } from 'lodash';
/**
 * WordPress dependencies
 */

import { NavigableMenu, KeyboardShortcuts } from '@wordpress/components';
import { Component, createRef } from '@wordpress/element';
import { focus } from '@wordpress/dom';

var NavigableToolbar =
/*#__PURE__*/
function (_Component) {
  _inherits(NavigableToolbar, _Component);

  function NavigableToolbar() {
    var _this;

    _classCallCheck(this, NavigableToolbar);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(NavigableToolbar).apply(this, arguments));
    _this.focusToolbar = _this.focusToolbar.bind(_assertThisInitialized(_this));
    _this.toolbar = createRef();
    return _this;
  }

  _createClass(NavigableToolbar, [{
    key: "focusToolbar",
    value: function focusToolbar() {
      var tabbables = focus.tabbable.find(this.toolbar.current);

      if (tabbables.length) {
        tabbables[0].focus();
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.focusOnMount) {
        this.focusToolbar();
      } // We use DOM event listeners instead of React event listeners
      // because we want to catch events from the underlying DOM tree
      // The React Tree can be different from the DOM tree when using
      // portals. Block Toolbars for instance are rendered in a separate
      // React Tree.


      this.toolbar.current.addEventListener('keydown', this.switchOnKeyDown);
    }
  }, {
    key: "componentwillUnmount",
    value: function componentwillUnmount() {
      this.toolbar.current.removeEventListener('keydown', this.switchOnKeyDown);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          props = _objectWithoutProperties(_this$props, ["children"]);

      return createElement(NavigableMenu, _extends({
        orientation: "horizontal",
        role: "toolbar",
        ref: this.toolbar
      }, omit(props, ['focusOnMount'])), createElement(KeyboardShortcuts, {
        bindGlobal: true // Use the same event that TinyMCE uses in the Classic block for its own `alt+f10` shortcut.
        ,
        eventName: "keydown",
        shortcuts: {
          'alt+f10': this.focusToolbar
        }
      }), children);
    }
  }]);

  return NavigableToolbar;
}(Component);

export default NavigableToolbar;
//# sourceMappingURL=index.js.map