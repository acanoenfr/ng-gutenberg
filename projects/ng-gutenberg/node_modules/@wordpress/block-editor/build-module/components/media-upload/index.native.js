import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import React from 'react';
import { requestMediaPickFromMediaLibrary, requestMediaPickFromDeviceLibrary, requestMediaPickFromDeviceCamera } from 'react-native-gutenberg-bridge';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { Picker } from '@wordpress/components';
export var MEDIA_TYPE_IMAGE = 'image';
export var MEDIA_TYPE_VIDEO = 'video';
export var MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_CHOOSE_FROM_DEVICE = 'choose_from_device';
export var MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_TAKE_MEDIA = 'take_media';
export var MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_WORD_PRESS_LIBRARY = 'wordpress_media_library';
export var OPTION_TAKE_VIDEO = __('Take a Video');
export var OPTION_TAKE_PHOTO = __('Take a Photo');
export var MediaUpload =
/*#__PURE__*/
function (_React$Component) {
  _inherits(MediaUpload, _React$Component);

  function MediaUpload() {
    _classCallCheck(this, MediaUpload);

    return _possibleConstructorReturn(this, _getPrototypeOf(MediaUpload).apply(this, arguments));
  }

  _createClass(MediaUpload, [{
    key: "getTakeMediaLabel",
    value: function getTakeMediaLabel() {
      var mediaType = this.props.mediaType;

      if (mediaType === MEDIA_TYPE_IMAGE) {
        return OPTION_TAKE_PHOTO;
      } else if (mediaType === MEDIA_TYPE_VIDEO) {
        return OPTION_TAKE_VIDEO;
      }
    }
  }, {
    key: "getMediaOptionsItems",
    value: function getMediaOptionsItems() {
      return [{
        icon: this.getChooseFromDeviceIcon(),
        value: MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_CHOOSE_FROM_DEVICE,
        label: __('Choose from device')
      }, {
        icon: this.getTakeMediaIcon(),
        value: MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_TAKE_MEDIA,
        label: this.getTakeMediaLabel()
      }, {
        icon: this.getWordPressLibraryIcon(),
        value: MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_WORD_PRESS_LIBRARY,
        label: __('WordPress Media Library')
      }];
    }
  }, {
    key: "getChooseFromDeviceIcon",
    value: function getChooseFromDeviceIcon() {
      var mediaType = this.props.mediaType;

      if (mediaType === MEDIA_TYPE_IMAGE) {
        return 'format-image';
      } else if (mediaType === MEDIA_TYPE_VIDEO) {
        return 'format-video';
      }
    }
  }, {
    key: "getTakeMediaIcon",
    value: function getTakeMediaIcon() {
      return 'camera';
    }
  }, {
    key: "getWordPressLibraryIcon",
    value: function getWordPressLibraryIcon() {
      return 'wordpress-alt';
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var mediaType = this.props.mediaType;

      var onMediaLibraryButtonPressed = function onMediaLibraryButtonPressed() {
        requestMediaPickFromMediaLibrary([mediaType], function (mediaId, mediaUrl) {
          if (mediaId) {
            _this.props.onSelectURL(mediaId, mediaUrl);
          }
        });
      };

      var onMediaUploadButtonPressed = function onMediaUploadButtonPressed() {
        requestMediaPickFromDeviceLibrary([mediaType], function (mediaId, mediaUrl) {
          if (mediaId) {
            _this.props.onSelectURL(mediaId, mediaUrl);
          }
        });
      };

      var onMediaCaptureButtonPressed = function onMediaCaptureButtonPressed() {
        requestMediaPickFromDeviceCamera([mediaType], function (mediaId, mediaUrl) {
          if (mediaId) {
            _this.props.onSelectURL(mediaId, mediaUrl);
          }
        });
      };

      var mediaOptions = this.getMediaOptionsItems();
      var picker;

      var onPickerPresent = function onPickerPresent() {
        picker.presentPicker();
      };

      var getMediaOptions = function getMediaOptions() {
        return createElement(Picker, {
          hideCancelButton: true,
          ref: function ref(instance) {
            return picker = instance;
          },
          options: mediaOptions,
          onChange: function onChange(value) {
            if (value === MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_CHOOSE_FROM_DEVICE) {
              onMediaUploadButtonPressed();
            } else if (value === MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_TAKE_MEDIA) {
              onMediaCaptureButtonPressed();
            } else if (value === MEDIA_UPLOAD_BOTTOM_SHEET_VALUE_WORD_PRESS_LIBRARY) {
              onMediaLibraryButtonPressed();
            }
          }
        });
      };

      return this.props.render({
        open: onPickerPresent,
        getMediaOptions: getMediaOptions
      });
    }
  }]);

  return MediaUpload;
}(React.Component);
export default MediaUpload;
//# sourceMappingURL=index.native.js.map