import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { FlatList, View, Text, TouchableHighlight } from 'react-native';
import { subscribeMediaAppend } from 'react-native-gutenberg-bridge';
/**
 * WordPress dependencies
 */

import { Component } from '@wordpress/element';
import { createBlock, isUnmodifiedDefaultBlock } from '@wordpress/blocks';
import { withDispatch, withSelect } from '@wordpress/data';
import { withInstanceId, compose } from '@wordpress/compose';
import { BottomSheet, Icon } from '@wordpress/components';
/**
 * Internal dependencies
 */

import styles from './style.scss';
export var InserterMenu =
/*#__PURE__*/
function (_Component) {
  _inherits(InserterMenu, _Component);

  function InserterMenu() {
    _classCallCheck(this, InserterMenu);

    return _possibleConstructorReturn(this, _getPrototypeOf(InserterMenu).apply(this, arguments));
  }

  _createClass(InserterMenu, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this = this;

      this.subscriptionParentMediaAppend = subscribeMediaAppend(function (payload) {
        _this.props.onSelect({
          name: 'core/' + payload.mediaType,
          initialAttributes: _defineProperty({
            id: payload.mediaId
          }, payload.mediaType === 'image' ? 'url' : 'src', payload.mediaUrl)
        });
      });
      this.onOpen();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.subscriptionParentMediaAppend) {
        this.subscriptionParentMediaAppend.remove();
      }

      this.onClose();
    }
  }, {
    key: "calculateNumberOfColumns",
    value: function calculateNumberOfColumns() {
      var bottomSheetWidth = BottomSheet.getWidth();
      var _styles$modalItem = styles.modalItem,
          itemPaddingLeft = _styles$modalItem.paddingLeft,
          itemPaddingRight = _styles$modalItem.paddingRight;
      var _styles$content = styles.content,
          containerPaddingLeft = _styles$content.paddingLeft,
          containerPaddingRight = _styles$content.paddingRight;
      var itemWidth = styles.modalIconWrapper.width;
      var itemTotalWidth = itemWidth + itemPaddingLeft + itemPaddingRight;
      var containerTotalWidth = bottomSheetWidth - (containerPaddingLeft + containerPaddingRight);
      return Math.floor(containerTotalWidth / itemTotalWidth);
    }
  }, {
    key: "onOpen",
    value: function onOpen() {
      this.props.showInsertionPoint();
    }
  }, {
    key: "onClose",
    value: function onClose() {
      this.props.hideInsertionPoint();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var numberOfColumns = this.calculateNumberOfColumns();
      var bottomPadding = styles.contentBottomPadding;
      return createElement(BottomSheet, {
        isVisible: true,
        onClose: this.props.onDismiss,
        contentStyle: [styles.content, bottomPadding],
        hideHeader: true
      }, createElement(FlatList, {
        scrollEnabled: false,
        key: "InserterUI-".concat(numberOfColumns) //re-render when numberOfColumns changes
        ,
        keyboardShouldPersistTaps: "always",
        numColumns: numberOfColumns,
        data: this.props.items,
        ItemSeparatorComponent: function ItemSeparatorComponent() {
          return createElement(View, {
            style: styles.rowSeparator
          });
        },
        keyExtractor: function keyExtractor(item) {
          return item.name;
        },
        renderItem: function renderItem(_ref) {
          var item = _ref.item;
          return createElement(TouchableHighlight, {
            style: styles.touchableArea,
            underlayColor: "transparent",
            activeOpacity: .5,
            accessibilityLabel: item.title,
            onPress: function onPress() {
              return _this2.props.onSelect(item);
            }
          }, createElement(View, {
            style: styles.modalItem
          }, createElement(View, {
            style: styles.modalIconWrapper
          }, createElement(View, {
            style: styles.modalIcon
          }, createElement(Icon, {
            icon: item.icon.src,
            fill: styles.modalIcon.fill,
            size: styles.modalIcon.width
          }))), createElement(Text, {
            style: styles.modalItemLabel
          }, item.title)));
        }
      }));
    }
  }]);

  return InserterMenu;
}(Component);
export default compose(withSelect(function (select, _ref2) {
  var clientId = _ref2.clientId,
      isAppender = _ref2.isAppender,
      rootClientId = _ref2.rootClientId;

  var _select = select('core/block-editor'),
      getInserterItems = _select.getInserterItems,
      getBlockName = _select.getBlockName,
      getBlockRootClientId = _select.getBlockRootClientId,
      getBlockSelectionEnd = _select.getBlockSelectionEnd;

  var _select2 = select('core/blocks'),
      getChildBlockNames = _select2.getChildBlockNames;

  var destinationRootClientId = rootClientId;

  if (!destinationRootClientId && !clientId && !isAppender) {
    var end = getBlockSelectionEnd();

    if (end) {
      destinationRootClientId = getBlockRootClientId(end) || undefined;
    }
  }

  var destinationRootBlockName = getBlockName(destinationRootClientId);
  return {
    rootChildBlocks: getChildBlockNames(destinationRootBlockName),
    items: getInserterItems(destinationRootClientId),
    destinationRootClientId: destinationRootClientId
  };
}), withDispatch(function (dispatch, ownProps, _ref3) {
  var select = _ref3.select;

  var _dispatch = dispatch('core/block-editor'),
      _showInsertionPoint = _dispatch.showInsertionPoint,
      hideInsertionPoint = _dispatch.hideInsertionPoint; // To avoid duplication, getInsertionIndex is extracted and used in two event handlers
  // This breaks the withDispatch not containing any logic rule.
  // Since it's a function only called when the event handlers are called,
  // it's fine to extract it.
  // eslint-disable-next-line no-restricted-syntax


  function getInsertionIndex() {
    var _select3 = select('core/block-editor'),
        getBlock = _select3.getBlock,
        getBlockIndex = _select3.getBlockIndex,
        getBlockSelectionEnd = _select3.getBlockSelectionEnd,
        getBlockOrder = _select3.getBlockOrder;

    var _select4 = select('core/editor'),
        isPostTitleSelected = _select4.isPostTitleSelected;

    var clientId = ownProps.clientId,
        destinationRootClientId = ownProps.destinationRootClientId,
        isAppender = ownProps.isAppender; // if post title is selected insert as first block

    if (isPostTitleSelected()) {
      return 0;
    } // If the clientId is defined, we insert at the position of the block.


    if (clientId) {
      return getBlockIndex(clientId, destinationRootClientId);
    } // If there a selected block,


    var end = getBlockSelectionEnd();

    if (!isAppender && end) {
      // and the last selected block is unmodified (empty), it will be replaced
      if (isUnmodifiedDefaultBlock(getBlock(end))) {
        return getBlockIndex(end, destinationRootClientId);
      } // we insert after the selected block.


      return getBlockIndex(end, destinationRootClientId) + 1;
    } // Otherwise, we insert at the end of the current rootClientId


    return getBlockOrder(destinationRootClientId).length;
  }

  return {
    showInsertionPoint: function showInsertionPoint() {
      var index = getInsertionIndex();

      _showInsertionPoint(ownProps.destinationRootClientId, index);
    },
    hideInsertionPoint: hideInsertionPoint,
    onSelect: function onSelect(item) {
      var _dispatch2 = dispatch('core/block-editor'),
          replaceBlocks = _dispatch2.replaceBlocks,
          insertBlock = _dispatch2.insertBlock;

      var _select5 = select('core/block-editor'),
          getSelectedBlock = _select5.getSelectedBlock;

      var isAppender = ownProps.isAppender;
      var name = item.name,
          initialAttributes = item.initialAttributes;
      var selectedBlock = getSelectedBlock();
      var insertedBlock = createBlock(name, initialAttributes);

      if (!isAppender && selectedBlock && isUnmodifiedDefaultBlock(selectedBlock)) {
        replaceBlocks(selectedBlock.clientId, insertedBlock);
      } else {
        insertBlock(insertedBlock, getInsertionIndex(), ownProps.destinationRootClientId);
      }

      ownProps.onSelect();
    }
  };
}), withInstanceId)(InserterMenu);
//# sourceMappingURL=menu.native.js.map