import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { last } from 'lodash';
/**
 * WordPress dependencies
 */

import { withSelect } from '@wordpress/data';
import { getDefaultBlockName } from '@wordpress/blocks';
/**
 * Internal dependencies
 */

import IgnoreNestedEvents from '../ignore-nested-events';
import DefaultBlockAppender from '../default-block-appender';
import ButtonBlockAppender from '../button-block-appender';

function BlockListAppender(_ref) {
  var blockClientIds = _ref.blockClientIds,
      rootClientId = _ref.rootClientId,
      canInsertDefaultBlock = _ref.canInsertDefaultBlock,
      isLocked = _ref.isLocked,
      CustomAppender = _ref.renderAppender;

  if (isLocked) {
    return null;
  } // If a render prop has been provided
  // use it to render the appender.


  if (CustomAppender) {
    return createElement("div", {
      className: "block-list-appender"
    }, createElement(CustomAppender, null));
  } // a false value means, don't render any appender.


  if (CustomAppender === false) {
    return null;
  } // Render the default block appender when renderAppender has not been
  // provided and the context supports use of the default appender.


  if (canInsertDefaultBlock) {
    return createElement("div", {
      className: "block-list-appender"
    }, createElement(IgnoreNestedEvents, {
      childHandledEvents: ['onFocus', 'onClick', 'onKeyDown']
    }, createElement(DefaultBlockAppender, {
      rootClientId: rootClientId,
      lastBlockClientId: last(blockClientIds)
    })));
  } // Fallback in the case no renderAppender has been provided and the
  // default block can't be inserted.


  return createElement("div", {
    className: "block-list-appender"
  }, createElement(ButtonBlockAppender, {
    rootClientId: rootClientId,
    className: "block-list-appender__toggle"
  }));
}

export default withSelect(function (select, _ref2) {
  var rootClientId = _ref2.rootClientId;

  var _select = select('core/block-editor'),
      getBlockOrder = _select.getBlockOrder,
      canInsertBlockType = _select.canInsertBlockType,
      getTemplateLock = _select.getTemplateLock;

  return {
    isLocked: !!getTemplateLock(rootClientId),
    blockClientIds: getBlockOrder(rootClientId),
    canInsertDefaultBlock: canInsertBlockType(getDefaultBlockName(), rootClientId)
  };
})(BlockListAppender);
//# sourceMappingURL=index.js.map