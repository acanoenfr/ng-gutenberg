import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { View, Text, TouchableWithoutFeedback } from 'react-native';
/**
 * WordPress dependencies
 */

import { Component } from '@wordpress/element';
import { withDispatch, withSelect } from '@wordpress/data';
import { compose } from '@wordpress/compose';
import { getBlockType } from '@wordpress/blocks';
import { __, sprintf } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import styles from './block.scss';
import BlockEdit from '../block-edit';
import BlockInvalidWarning from './block-invalid-warning';
import BlockMobileToolbar from './block-mobile-toolbar';

var BlockListBlock =
/*#__PURE__*/
function (_Component) {
  _inherits(BlockListBlock, _Component);

  function BlockListBlock() {
    var _this;

    _classCallCheck(this, BlockListBlock);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BlockListBlock).apply(this, arguments));
    _this.insertBlocksAfter = _this.insertBlocksAfter.bind(_assertThisInitialized(_this));
    _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_this));
    _this.state = {
      isFullyBordered: false
    };
    return _this;
  }

  _createClass(BlockListBlock, [{
    key: "onFocus",
    value: function onFocus() {
      if (!this.props.isSelected) {
        this.props.onSelect();
      }
    }
  }, {
    key: "insertBlocksAfter",
    value: function insertBlocksAfter(blocks) {
      this.props.onInsertBlocks(blocks, this.props.order + 1);

      if (blocks[0]) {
        // focus on the first block inserted
        this.props.onSelect(blocks[0].clientId);
      }
    }
  }, {
    key: "getBlockForType",
    value: function getBlockForType() {
      return createElement(BlockEdit, {
        name: this.props.name,
        isSelected: this.props.isSelected,
        attributes: this.props.attributes,
        setAttributes: this.props.onChange,
        onFocus: this.onFocus,
        onReplace: this.props.onReplace,
        insertBlocksAfter: this.insertBlocksAfter,
        mergeBlocks: this.props.mergeBlocks,
        onCaretVerticalPositionChange: this.props.onCaretVerticalPositionChange,
        clientId: this.props.clientId
      });
    }
  }, {
    key: "renderBlockTitle",
    value: function renderBlockTitle() {
      return createElement(View, {
        style: styles.blockTitle
      }, createElement(Text, null, "BlockType: ", this.props.name));
    }
  }, {
    key: "getAccessibilityLabel",
    value: function getAccessibilityLabel() {
      var _this$props = this.props,
          attributes = _this$props.attributes,
          name = _this$props.name,
          order = _this$props.order,
          title = _this$props.title,
          getAccessibilityLabelExtra = _this$props.getAccessibilityLabelExtra;
      var blockName = '';

      if (name === 'core/missing') {
        // is the block unrecognized?
        blockName = title;
      } else {
        blockName = sprintf(
        /* translators: accessibility text. %s: block name. */
        __('%s Block'), title //already localized
        );
      }

      blockName += '. ' + sprintf(__('Row %d.'), order + 1);

      if (getAccessibilityLabelExtra) {
        var blockAccessibilityLabel = getAccessibilityLabelExtra(attributes);
        blockName += blockAccessibilityLabel ? ' ' + blockAccessibilityLabel : '';
      }

      return blockName;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          borderStyle = _this$props2.borderStyle,
          clientId = _this$props2.clientId,
          focusedBorderColor = _this$props2.focusedBorderColor,
          icon = _this$props2.icon,
          isSelected = _this$props2.isSelected,
          isValid = _this$props2.isValid,
          showTitle = _this$props2.showTitle,
          title = _this$props2.title;
      var borderColor = isSelected ? focusedBorderColor : 'transparent';
      var accessibilityLabel = this.getAccessibilityLabel();
      return createElement(TouchableWithoutFeedback, {
        onPress: this.onFocus,
        accessible: !isSelected,
        accessibilityRole: 'button'
      }, createElement(View, {
        style: [styles.blockHolder, borderStyle, {
          borderColor: borderColor
        }]
      }, showTitle && this.renderBlockTitle(), createElement(View, {
        accessibilityLabel: accessibilityLabel,
        style: [!isSelected && styles.blockContainer, isSelected && styles.blockContainerFocused]
      }, isValid && this.getBlockForType(), !isValid && createElement(BlockInvalidWarning, {
        blockTitle: title,
        icon: icon
      })), isSelected && createElement(BlockMobileToolbar, {
        clientId: clientId
      })));
    }
  }]);

  return BlockListBlock;
}(Component);

export default compose([withSelect(function (select, _ref) {
  var clientId = _ref.clientId,
      rootClientId = _ref.rootClientId;

  var _select = select('core/block-editor'),
      getBlockIndex = _select.getBlockIndex,
      getBlocks = _select.getBlocks,
      isBlockSelected = _select.isBlockSelected,
      __unstableGetBlockWithoutInnerBlocks = _select.__unstableGetBlockWithoutInnerBlocks;

  var order = getBlockIndex(clientId, rootClientId);
  var isSelected = isBlockSelected(clientId);
  var isFirstBlock = order === 0;
  var isLastBlock = order === getBlocks().length - 1;

  var block = __unstableGetBlockWithoutInnerBlocks(clientId);

  var _ref2 = block || {},
      name = _ref2.name,
      attributes = _ref2.attributes,
      isValid = _ref2.isValid;

  var blockType = getBlockType(name || 'core/missing');
  var title = blockType.title;
  var icon = blockType.icon;
  var getAccessibilityLabelExtra = blockType.__experimentalGetAccessibilityLabel;
  return {
    icon: icon,
    name: name || 'core/missing',
    order: order,
    title: title,
    attributes: attributes,
    blockType: blockType,
    isFirstBlock: isFirstBlock,
    isLastBlock: isLastBlock,
    isSelected: isSelected,
    isValid: isValid,
    getAccessibilityLabelExtra: getAccessibilityLabelExtra
  };
}), withDispatch(function (dispatch, ownProps, _ref3) {
  var select = _ref3.select;

  var _dispatch = dispatch('core/block-editor'),
      insertBlocks = _dispatch.insertBlocks,
      _mergeBlocks = _dispatch.mergeBlocks,
      replaceBlocks = _dispatch.replaceBlocks,
      selectBlock = _dispatch.selectBlock,
      updateBlockAttributes = _dispatch.updateBlockAttributes;

  return {
    mergeBlocks: function mergeBlocks(forward) {
      var clientId = ownProps.clientId;

      var _select2 = select('core/block-editor'),
          getPreviousBlockClientId = _select2.getPreviousBlockClientId,
          getNextBlockClientId = _select2.getNextBlockClientId;

      if (forward) {
        var nextBlockClientId = getNextBlockClientId(clientId);

        if (nextBlockClientId) {
          _mergeBlocks(clientId, nextBlockClientId);
        }
      } else {
        var previousBlockClientId = getPreviousBlockClientId(clientId);

        if (previousBlockClientId) {
          _mergeBlocks(previousBlockClientId, clientId);
        }
      }
    },
    onInsertBlocks: function onInsertBlocks(blocks, index) {
      insertBlocks(blocks, index, ownProps.rootClientId);
    },
    onSelect: function onSelect() {
      var clientId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ownProps.clientId;
      var initialPosition = arguments.length > 1 ? arguments[1] : undefined;
      selectBlock(clientId, initialPosition);
    },
    onChange: function onChange(attributes) {
      updateBlockAttributes(ownProps.clientId, attributes);
    },
    onReplace: function onReplace(blocks, indexToSelect) {
      replaceBlocks([ownProps.clientId], blocks, indexToSelect);
    }
  };
})])(BlockListBlock);
//# sourceMappingURL=block.native.js.map