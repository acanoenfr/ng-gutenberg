import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { identity } from 'lodash';
import { Text, View, Platform, TouchableWithoutFeedback } from 'react-native';
/**
 * WordPress dependencies
 */

import { Component } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
import { withDispatch, withSelect } from '@wordpress/data';
import { compose } from '@wordpress/compose';
import { createBlock, isUnmodifiedDefaultBlock } from '@wordpress/blocks';
import { KeyboardAwareFlatList, ReadableContentView } from '@wordpress/components';
/**
 * Internal dependencies
 */

import styles from './style.scss';
import BlockListBlock from './block';
import DefaultBlockAppender from '../default-block-appender';
var innerToolbarHeight = 44;
export var BlockList =
/*#__PURE__*/
function (_Component) {
  _inherits(BlockList, _Component);

  function BlockList() {
    var _this;

    _classCallCheck(this, BlockList);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BlockList).apply(this, arguments));
    _this.renderItem = _this.renderItem.bind(_assertThisInitialized(_this));
    _this.renderAddBlockSeparator = _this.renderAddBlockSeparator.bind(_assertThisInitialized(_this));
    _this.renderBlockListFooter = _this.renderBlockListFooter.bind(_assertThisInitialized(_this));
    _this.renderDefaultBlockAppender = _this.renderDefaultBlockAppender.bind(_assertThisInitialized(_this));
    _this.onCaretVerticalPositionChange = _this.onCaretVerticalPositionChange.bind(_assertThisInitialized(_this));
    _this.scrollViewInnerRef = _this.scrollViewInnerRef.bind(_assertThisInitialized(_this));
    _this.addBlockToEndOfPost = _this.addBlockToEndOfPost.bind(_assertThisInitialized(_this));
    _this.shouldFlatListPreventAutomaticScroll = _this.shouldFlatListPreventAutomaticScroll.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(BlockList, [{
    key: "addBlockToEndOfPost",
    value: function addBlockToEndOfPost(newBlock) {
      this.props.insertBlock(newBlock, this.props.blockCount);
    }
  }, {
    key: "blockHolderBorderStyle",
    value: function blockHolderBorderStyle() {
      return this.props.isFullyBordered ? styles.blockHolderFullBordered : styles.blockHolderSemiBordered;
    }
  }, {
    key: "onCaretVerticalPositionChange",
    value: function onCaretVerticalPositionChange(targetId, caretY, previousCaretY) {
      KeyboardAwareFlatList.handleCaretVerticalPositionChange(this.scrollViewRef, targetId, caretY, previousCaretY);
    }
  }, {
    key: "scrollViewInnerRef",
    value: function scrollViewInnerRef(ref) {
      this.scrollViewRef = ref;
    }
  }, {
    key: "shouldFlatListPreventAutomaticScroll",
    value: function shouldFlatListPreventAutomaticScroll() {
      return this.props.isBlockInsertionPointVisible;
    }
  }, {
    key: "renderDefaultBlockAppender",
    value: function renderDefaultBlockAppender() {
      return createElement(ReadableContentView, null, createElement(DefaultBlockAppender, {
        rootClientId: this.props.rootClientId,
        containerStyle: [styles.blockContainerFocused, this.blockHolderBorderStyle(), {
          borderColor: 'transparent'
        }]
      }));
    }
  }, {
    key: "render",
    value: function render() {
      return createElement(View, {
        style: {
          flex: 1
        },
        onAccessibilityEscape: this.props.clearSelectedBlock
      }, createElement(KeyboardAwareFlatList, _extends({}, Platform.OS === 'android' ? {
        removeClippedSubviews: false
      } : {}, {
        // Disable clipping on Android to fix focus losing. See https://github.com/wordpress-mobile/gutenberg-mobile/pull/741#issuecomment-472746541
        accessibilityLabel: "block-list",
        innerRef: this.scrollViewInnerRef,
        extraScrollHeight: innerToolbarHeight + 10,
        keyboardShouldPersistTaps: "always",
        style: styles.list,
        data: this.props.blockClientIds,
        extraData: [this.props.isFullyBordered],
        keyExtractor: identity,
        renderItem: this.renderItem,
        shouldPreventAutomaticScroll: this.shouldFlatListPreventAutomaticScroll,
        title: this.props.title,
        ListHeaderComponent: this.props.header,
        ListEmptyComponent: this.renderDefaultBlockAppender,
        ListFooterComponent: this.renderBlockListFooter
      })));
    }
  }, {
    key: "isReplaceable",
    value: function isReplaceable(block) {
      if (!block) {
        return false;
      }

      return isUnmodifiedDefaultBlock(block);
    }
  }, {
    key: "renderItem",
    value: function renderItem(_ref) {
      var clientId = _ref.item,
          index = _ref.index;
      var _this$props = this.props,
          shouldShowBlockAtIndex = _this$props.shouldShowBlockAtIndex,
          shouldShowInsertionPoint = _this$props.shouldShowInsertionPoint;
      return createElement(ReadableContentView, null, shouldShowInsertionPoint(clientId) && this.renderAddBlockSeparator(), shouldShowBlockAtIndex(index) && createElement(BlockListBlock, {
        key: clientId,
        showTitle: false,
        clientId: clientId,
        rootClientId: this.props.rootClientId,
        onCaretVerticalPositionChange: this.onCaretVerticalPositionChange,
        borderStyle: this.blockHolderBorderStyle(),
        focusedBorderColor: styles.blockHolderFocused.borderColor
      }));
    }
  }, {
    key: "renderAddBlockSeparator",
    value: function renderAddBlockSeparator() {
      return createElement(View, {
        style: styles.containerStyleAddHere
      }, createElement(View, {
        style: styles.lineStyleAddHere
      }), createElement(Text, {
        style: styles.labelStyleAddHere
      }, __('ADD BLOCK HERE')), createElement(View, {
        style: styles.lineStyleAddHere
      }));
    }
  }, {
    key: "renderBlockListFooter",
    value: function renderBlockListFooter() {
      var _this2 = this;

      var paragraphBlock = createBlock('core/paragraph');
      return createElement(TouchableWithoutFeedback, {
        onPress: function onPress() {
          _this2.addBlockToEndOfPost(paragraphBlock);
        }
      }, createElement(View, {
        style: styles.blockListFooter
      }));
    }
  }]);

  return BlockList;
}(Component);
export default compose([withSelect(function (select, _ref2) {
  var rootClientId = _ref2.rootClientId;

  var _select = select('core/block-editor'),
      getBlockCount = _select.getBlockCount,
      getBlockIndex = _select.getBlockIndex,
      getBlockOrder = _select.getBlockOrder,
      getSelectedBlockClientId = _select.getSelectedBlockClientId,
      getBlockInsertionPoint = _select.getBlockInsertionPoint,
      isBlockInsertionPointVisible = _select.isBlockInsertionPointVisible;

  var selectedBlockClientId = getSelectedBlockClientId();
  var blockClientIds = getBlockOrder(rootClientId);
  var insertionPoint = getBlockInsertionPoint();
  var blockInsertionPointIsVisible = isBlockInsertionPointVisible();

  var shouldShowInsertionPoint = function shouldShowInsertionPoint(clientId) {
    return blockInsertionPointIsVisible && insertionPoint.rootClientId === rootClientId && blockClientIds[insertionPoint.index] === clientId;
  };

  var selectedBlockIndex = getBlockIndex(selectedBlockClientId);

  var shouldShowBlockAtIndex = function shouldShowBlockAtIndex(index) {
    var shouldHideBlockAtIndex = blockInsertionPointIsVisible && // if `index` === `insertionPoint.index`, then block is replaceable
    index === insertionPoint.index && // only hide selected block
    index === selectedBlockIndex;
    return !shouldHideBlockAtIndex;
  };

  return {
    blockClientIds: blockClientIds,
    blockCount: getBlockCount(rootClientId),
    isBlockInsertionPointVisible: isBlockInsertionPointVisible(),
    shouldShowBlockAtIndex: shouldShowBlockAtIndex,
    shouldShowInsertionPoint: shouldShowInsertionPoint,
    selectedBlockClientId: selectedBlockClientId
  };
}), withDispatch(function (dispatch) {
  var _dispatch = dispatch('core/block-editor'),
      insertBlock = _dispatch.insertBlock,
      replaceBlock = _dispatch.replaceBlock,
      clearSelectedBlock = _dispatch.clearSelectedBlock;

  return {
    clearSelectedBlock: clearSelectedBlock,
    insertBlock: insertBlock,
    replaceBlock: replaceBlock
  };
})])(BlockList);
//# sourceMappingURL=index.native.js.map