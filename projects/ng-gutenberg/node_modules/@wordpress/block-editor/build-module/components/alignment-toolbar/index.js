import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { find } from 'lodash';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { Toolbar } from '@wordpress/components';
var DEFAULT_ALIGNMENT_CONTROLS = [{
  icon: 'editor-alignleft',
  title: __('Align Text Left'),
  align: 'left'
}, {
  icon: 'editor-aligncenter',
  title: __('Align Text Center'),
  align: 'center'
}, {
  icon: 'editor-alignright',
  title: __('Align Text Right'),
  align: 'right'
}];
export function AlignmentToolbar(props) {
  var value = props.value,
      onChange = props.onChange,
      _props$alignmentContr = props.alignmentControls,
      alignmentControls = _props$alignmentContr === void 0 ? DEFAULT_ALIGNMENT_CONTROLS : _props$alignmentContr,
      _props$label = props.label,
      label = _props$label === void 0 ? __('Change text alignment') : _props$label,
      _props$isCollapsed = props.isCollapsed,
      isCollapsed = _props$isCollapsed === void 0 ? true : _props$isCollapsed;

  function applyOrUnset(align) {
    return function () {
      return onChange(value === align ? undefined : align);
    };
  }

  var activeAlignment = find(alignmentControls, function (control) {
    return control.align === value;
  });
  return createElement(Toolbar, {
    isCollapsed: isCollapsed,
    icon: activeAlignment ? activeAlignment.icon : 'editor-alignleft',
    label: label,
    controls: alignmentControls.map(function (control) {
      var align = control.align;
      var isActive = value === align;
      return _objectSpread({}, control, {
        isActive: isActive,
        onClick: applyOrUnset(align)
      });
    })
  });
}
export default AlignmentToolbar;
//# sourceMappingURL=index.js.map