{"version":3,"sources":["@wordpress/block-editor/src/store/reducer.js"],"names":["flow","reduce","first","last","omit","without","mapValues","keys","isEqual","isEmpty","get","identity","difference","omitBy","combineReducers","isReusableBlock","PREFERENCES_DEFAULTS","SETTINGS_DEFAULTS","insertAt","moveTo","mapBlockOrder","blocks","rootClientId","result","forEach","block","clientId","innerBlocks","push","Object","assign","mapBlockParents","flattenBlocks","transform","stack","length","shift","getFlattenedBlocksWithoutAttributes","getFlattenedBlockAttributes","attributes","getNestedBlockClientIds","blocksOrder","getMutateSafeObject","original","working","hasSameKeys","a","b","isUpdatingSameBlockAttribute","action","lastAction","type","undefined","fillKeysWithEmptyObject","objectKeys","key","withBlockCache","reducer","state","newState","cache","getBlocksWithParentsClientIds","clientIds","current","parents","updatedBlockUids","parentClientIds","replacedClientIds","removedClientIds","fromRootClientId","toRootClientId","byClientId","name","ref","updatedId","withPersistentBlockChange","nextState","isExplicitPersistentChange","nextIsPersistentChange","isPersistentChange","withIgnoredBlockChange","IGNORED_ACTION_TYPES","Set","isIgnoredChange","has","withInnerBlocksRemoveCascade","getAllChildren","i","order","withBlockReset","visibleClientIds","withReplaceInnerBlocks","stateAfterBlocksRemoval","stateAfterInsert","index","withSaveReusableBlock","id","changes","updates","nextAttributes","value","subState","mappedBlocks","fromIndex","indexOf","firstClientId","firstIndex","lastClientId","isTyping","isCaretWithinFormattedText","BLOCK_SELECTION_EMPTY_OBJECT","BLOCK_SELECTION_INITIAL_STATE","start","end","isMultiSelecting","isEnabled","initialPosition","blockSelection","updateSelection","indexToSelect","blockToSelect","isSelectionEnabled","attributeKey","offset","startOffset","endOffset","blocksMode","insertionPoint","template","isValid","settings","preferences","prevState","insert","insertUsage","time","count","blockListSettings","hasOwnProperty","isNavigationMode","lastBlockAttributesChange","didAutomaticChange"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tflow,\n\treduce,\n\tfirst,\n\tlast,\n\tomit,\n\twithout,\n\tmapValues,\n\tkeys,\n\tisEqual,\n\tisEmpty,\n\tget,\n\tidentity,\n\tdifference,\n\tomitBy,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\nimport { isReusableBlock } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport {\n\tPREFERENCES_DEFAULTS,\n\tSETTINGS_DEFAULTS,\n} from './defaults';\nimport { insertAt, moveTo } from './array';\n\n/**\n * Given an array of blocks, returns an object where each key is a nesting\n * context, the value of which is an array of block client IDs existing within\n * that nesting context.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockOrder( blocks, rootClientId = '' ) {\n\tconst result = { [ rootClientId ]: [] };\n\n\tblocks.forEach( ( block ) => {\n\t\tconst { clientId, innerBlocks } = block;\n\n\t\tresult[ rootClientId ].push( clientId );\n\n\t\tObject.assign( result, mapBlockOrder( innerBlocks, clientId ) );\n\t} );\n\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object where each key contains\n * the clientId of the block and the value is the parent of the block.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockParents( blocks, rootClientId = '' ) {\n\treturn blocks.reduce( ( result, block ) => Object.assign(\n\t\tresult,\n\t\t{ [ block.clientId ]: rootClientId },\n\t\tmapBlockParents( block.innerBlocks, block.clientId )\n\t), {} );\n}\n\n/**\n * Helper method to iterate through all blocks, recursing into inner blocks,\n * applying a transformation function to each one.\n * Returns a flattened object with the transformed blocks.\n *\n * @param {Array} blocks Blocks to flatten.\n * @param {Function} transform Transforming function to be applied to each block.\n *\n * @return {Object} Flattened object.\n */\nfunction flattenBlocks( blocks, transform = identity ) {\n\tconst result = {};\n\n\tconst stack = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\tstack.push( ...innerBlocks );\n\t\tresult[ block.clientId ] = transform( block );\n\t}\n\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object containing all blocks, without\n * attributes, recursing into inner blocks. Keys correspond to the block client\n * ID, the value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Object} Flattened block attributes object.\n */\nfunction getFlattenedBlocksWithoutAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => omit( block, 'attributes' ) );\n}\n\n/**\n * Given an array of blocks, returns an object containing all block attributes,\n * recursing into inner blocks. Keys correspond to the block client ID, the\n * value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Object} Flattened block attributes object.\n */\nfunction getFlattenedBlockAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => block.attributes );\n}\n\n/**\n * Given a block order map object, returns *all* of the block client IDs that are\n * a descendant of the given root client ID.\n *\n * Calling this with `rootClientId` set to `''` results in a list of client IDs\n * that are in the post. That is, it excludes blocks like fetched reusable\n * blocks which are stored into state but not visible.\n *\n * @param {Object}  blocksOrder  Object that maps block client IDs to a list of\n *                               nested block client IDs.\n * @param {?string} rootClientId The root client ID to search. Defaults to ''.\n *\n * @return {Array} List of descendant client IDs.\n */\nfunction getNestedBlockClientIds( blocksOrder, rootClientId = '' ) {\n\treturn reduce( blocksOrder[ rootClientId ], ( result, clientId ) => [\n\t\t...result,\n\t\tclientId,\n\t\t...getNestedBlockClientIds( blocksOrder, clientId ),\n\t], [] );\n}\n\n/**\n * Returns an object against which it is safe to perform mutating operations,\n * given the original object and its current working copy.\n *\n * @param {Object} original Original object.\n * @param {Object} working  Working object.\n *\n * @return {Object} Mutation-safe object.\n */\nfunction getMutateSafeObject( original, working ) {\n\tif ( original === working ) {\n\t\treturn { ...original };\n\t}\n\n\treturn working;\n}\n\n/**\n * Returns true if the two object arguments have the same keys, or false\n * otherwise.\n *\n * @param {Object} a First object.\n * @param {Object} b Second object.\n *\n * @return {boolean} Whether the two objects have the same keys.\n */\nexport function hasSameKeys( a, b ) {\n\treturn isEqual( keys( a ), keys( b ) );\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are updating the same block attribute, or\n * false otherwise.\n *\n * @param {Object} action     Currently dispatching action.\n * @param {Object} lastAction Previously dispatched action.\n *\n * @return {boolean} Whether actions are updating the same block attribute.\n */\nexport function isUpdatingSameBlockAttribute( action, lastAction ) {\n\treturn (\n\t\taction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\tlastAction !== undefined &&\n\t\tlastAction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\taction.clientId === lastAction.clientId &&\n\t\thasSameKeys( action.attributes, lastAction.attributes )\n\t);\n}\n\n/**\n * Utility returning an object with an empty object value for each key.\n *\n * @param {Array} objectKeys Keys to fill.\n * @return {Object} Object filled with empty object as values for each clientId.\n */\nconst fillKeysWithEmptyObject = ( objectKeys ) => {\n\treturn objectKeys.reduce( ( result, key ) => {\n\t\tresult[ key ] = {};\n\t\treturn result;\n\t}, {} );\n};\n\n/**\n * Higher-order reducer intended to compute a cache key for each block in the post.\n * A new instance of the cache key (empty object) is created each time the block object\n * needs to be refreshed (for any change in the block or its children).\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withBlockCache = ( reducer ) => ( state = {}, action ) => {\n\tconst newState = reducer( state, action );\n\n\tif ( newState === state ) {\n\t\treturn state;\n\t}\n\tnewState.cache = state.cache ? state.cache : {};\n\n\t/**\n\t * For each clientId provided, traverses up parents, adding the provided clientIds\n\t * and each parent's clientId to the returned array.\n\t *\n\t * When calling this function consider that it uses the old state, so any state\n\t * modifications made by the `reducer` will not be present.\n\t *\n\t * @param {Array} clientIds an Array of block clientIds.\n\t *\n\t * @return {Array} The provided clientIds and all of their parent clientIds.\n\t */\n\tconst getBlocksWithParentsClientIds = ( clientIds ) => {\n\t\treturn clientIds.reduce( ( result, clientId ) => {\n\t\t\tlet current = clientId;\n\t\t\tdo {\n\t\t\t\tresult.push( current );\n\t\t\t\tcurrent = state.parents[ current ];\n\t\t\t} while ( current );\n\t\t\treturn result;\n\t\t}, [] );\n\t};\n\n\tswitch ( action.type ) {\n\t\tcase 'RESET_BLOCKS':\n\t\t\tnewState.cache = mapValues( flattenBlocks( action.blocks ), () => ( {} ) );\n\t\t\tbreak;\n\t\tcase 'RECEIVE_BLOCKS':\n\t\tcase 'INSERT_BLOCKS': {\n\t\t\tconst updatedBlockUids = keys( flattenBlocks( action.blocks ) );\n\t\t\tif ( action.rootClientId ) {\n\t\t\t\tupdatedBlockUids.push( action.rootClientId );\n\t\t\t}\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( updatedBlockUids ),\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\t}\n\t\tcase 'UPDATE_BLOCK':\n\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( [ action.clientId ] ),\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\tconst parentClientIds = fillKeysWithEmptyObject( getBlocksWithParentsClientIds( action.replacedClientIds ) );\n\n\t\t\tnewState.cache = {\n\t\t\t\t...omit( newState.cache, action.replacedClientIds ),\n\t\t\t\t...omit( parentClientIds, action.replacedClientIds ),\n\t\t\t\t...fillKeysWithEmptyObject( keys( flattenBlocks( action.blocks ) ) ),\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\tnewState.cache = {\n\t\t\t\t...omit( newState.cache, action.removedClientIds ),\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tdifference( getBlocksWithParentsClientIds( action.clientIds ), action.clientIds ),\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'MOVE_BLOCK_TO_POSITION': {\n\t\t\tconst updatedBlockUids = [ action.clientId ];\n\t\t\tif ( action.fromRootClientId ) {\n\t\t\t\tupdatedBlockUids.push( action.fromRootClientId );\n\t\t\t}\n\t\t\tif ( action.toRootClientId ) {\n\t\t\t\tupdatedBlockUids.push( action.toRootClientId );\n\t\t\t}\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( updatedBlockUids )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\t}\n\t\tcase 'MOVE_BLOCKS_UP':\n\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\tconst updatedBlockUids = [];\n\t\t\tif ( action.rootClientId ) {\n\t\t\t\tupdatedBlockUids.push( action.rootClientId );\n\t\t\t}\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( updatedBlockUids )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\t}\n\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS': {\n\t\t\tconst updatedBlockUids = keys( omitBy( newState.attributes, ( attributes, clientId ) => {\n\t\t\t\treturn newState.byClientId[ clientId ].name !== 'core/block' || attributes.ref !== action.updatedId;\n\t\t\t} ) );\n\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( updatedBlockUids )\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\t}\n\n\treturn newState;\n};\n\n/**\n * Higher-order reducer intended to augment the blocks reducer, assigning an\n * `isPersistentChange` property value corresponding to whether a change in\n * state can be considered as persistent. All changes are considered persistent\n * except when updating the same block attribute as in the previous action.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nfunction withPersistentBlockChange( reducer ) {\n\tlet lastAction;\n\n\treturn ( state, action ) => {\n\t\tlet nextState = reducer( state, action );\n\n\t\tconst isExplicitPersistentChange = action.type === 'MARK_LAST_CHANGE_AS_PERSISTENT';\n\n\t\t// Defer to previous state value (or default) unless changing or\n\t\t// explicitly marking as persistent.\n\t\tif ( state === nextState && ! isExplicitPersistentChange ) {\n\t\t\tconst nextIsPersistentChange = get( state, [ 'isPersistentChange' ], true );\n\t\t\tif ( state.isPersistentChange === nextIsPersistentChange ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\tisPersistentChange: nextIsPersistentChange,\n\t\t\t};\n\t\t}\n\n\t\tnextState = {\n\t\t\t...nextState,\n\t\t\tisPersistentChange: (\n\t\t\t\tisExplicitPersistentChange ||\n\t\t\t\t! isUpdatingSameBlockAttribute( action, lastAction )\n\t\t\t),\n\t\t};\n\n\t\t// In comparing against the previous action, consider only those which\n\t\t// would have qualified as one which would have been ignored or not\n\t\t// have resulted in a changed state.\n\t\tlastAction = action;\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Higher-order reducer intended to augment the blocks reducer, assigning an\n * `isIgnoredChange` property value corresponding to whether a change in state\n * can be considered as ignored. A change is considered ignored when the result\n * of an action not incurred by direct user interaction.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nfunction withIgnoredBlockChange( reducer ) {\n\t/**\n\t * Set of action types for which a blocks state change should be ignored.\n\t *\n\t * @type {Set}\n\t */\n\tconst IGNORED_ACTION_TYPES = new Set( [\n\t\t'RECEIVE_BLOCKS',\n\t] );\n\n\treturn ( state, action ) => {\n\t\tconst nextState = reducer( state, action );\n\n\t\tif ( nextState !== state ) {\n\t\t\tnextState.isIgnoredChange = IGNORED_ACTION_TYPES.has( action.type );\n\t\t}\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Higher-order reducer targeting the combined blocks reducer, augmenting\n * block client IDs in remove action to include cascade of inner blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withInnerBlocksRemoveCascade = ( reducer ) => ( state, action ) => {\n\tconst getAllChildren = ( clientIds ) => {\n\t\tlet result = clientIds;\n\t\tfor ( let i = 0; i < result.length; i++ ) {\n\t\t\tif ( ! state.order[ result[ i ] ] ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( result === clientIds ) {\n\t\t\t\tresult = [ ...result ];\n\t\t\t}\n\n\t\t\tresult.push( ...state.order[ result[ i ] ] );\n\t\t}\n\t\treturn result;\n\t};\n\n\tif ( state ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'REMOVE_BLOCKS':\n\t\t\t\taction = {\n\t\t\t\t\t...action,\n\t\t\t\t\ttype: 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN',\n\t\t\t\t\tremovedClientIds: getAllChildren( action.clientIds ),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'REPLACE_BLOCKS':\n\t\t\t\taction = {\n\t\t\t\t\t...action,\n\t\t\t\t\ttype: 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN',\n\t\t\t\t\treplacedClientIds: getAllChildren( action.clientIds ),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `RESET_BLOCKS` action. When dispatched, this action will replace all\n * blocks that exist in the post, leaving blocks that exist only in state (e.g.\n * reusable blocks) alone.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withBlockReset = ( reducer ) => ( state, action ) => {\n\tif ( state && action.type === 'RESET_BLOCKS' ) {\n\t\tconst visibleClientIds = getNestedBlockClientIds( state.order );\n\t\treturn {\n\t\t\t...state,\n\t\t\tbyClientId: {\n\t\t\t\t...omit( state.byClientId, visibleClientIds ),\n\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t},\n\t\t\tattributes: {\n\t\t\t\t...omit( state.attributes, visibleClientIds ),\n\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t},\n\t\t\torder: {\n\t\t\t\t...omit( state.order, visibleClientIds ),\n\t\t\t\t...mapBlockOrder( action.blocks ),\n\t\t\t},\n\t\t\tparents: {\n\t\t\t\t...omit( state.parents, visibleClientIds ),\n\t\t\t\t...mapBlockParents( action.blocks ),\n\t\t\t},\n\t\t\tcache: {\n\t\t\t\t...omit( state.cache, visibleClientIds ),\n\t\t\t\t...mapValues( flattenBlocks( action.blocks ), () => ( {} ) ),\n\t\t\t},\n\t\t};\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `REPLACE_INNER_BLOCKS` action. When dispatched, this action the state should become equivalent\n * to the execution of a `REMOVE_BLOCKS` action containing all the child's of the root block followed by\n * the execution of `INSERT_BLOCKS` with the new blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withReplaceInnerBlocks = ( reducer ) => ( state, action ) => {\n\tif ( action.type !== 'REPLACE_INNER_BLOCKS' ) {\n\t\treturn reducer( state, action );\n\t}\n\tlet stateAfterBlocksRemoval = state;\n\tif ( state.order[ action.rootClientId ] ) {\n\t\tstateAfterBlocksRemoval = reducer( stateAfterBlocksRemoval, {\n\t\t\ttype: 'REMOVE_BLOCKS',\n\t\t\tclientIds: state.order[ action.rootClientId ],\n\t\t} );\n\t}\n\tlet stateAfterInsert = stateAfterBlocksRemoval;\n\tif ( action.blocks.length ) {\n\t\tstateAfterInsert = reducer( stateAfterInsert, {\n\t\t\t...action,\n\t\t\ttype: 'INSERT_BLOCKS',\n\t\t\tindex: 0,\n\t\t} );\n\t}\n\treturn stateAfterInsert;\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `SAVE_REUSABLE_BLOCK_SUCCESS` action. This action can't be handled by\n * regular reducers and needs a higher-order reducer since it needs access to\n * both `byClientId` and `attributes` simultaneously.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withSaveReusableBlock = ( reducer ) => ( state, action ) => {\n\tif ( state && action.type === 'SAVE_REUSABLE_BLOCK_SUCCESS' ) {\n\t\tconst { id, updatedId } = action;\n\n\t\t// If a temporary reusable block is saved, we swap the temporary id with the final one\n\t\tif ( id === updatedId ) {\n\t\t\treturn state;\n\t\t}\n\n\t\tstate = { ...state };\n\n\t\tstate.attributes = mapValues( state.attributes, ( attributes, clientId ) => {\n\t\t\tconst { name } = state.byClientId[ clientId ];\n\t\t\tif ( name === 'core/block' && attributes.ref === id ) {\n\t\t\t\treturn {\n\t\t\t\t\t...attributes,\n\t\t\t\t\tref: updatedId,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn attributes;\n\t\t} );\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Reducer returning the blocks state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blocks = flow(\n\tcombineReducers,\n\twithSaveReusableBlock, // needs to be before withBlockCache\n\twithBlockCache, // needs to be before withInnerBlocksRemoveCascade\n\twithInnerBlocksRemoveCascade,\n\twithReplaceInnerBlocks, // needs to be after withInnerBlocksRemoveCascade\n\twithBlockReset,\n\twithPersistentBlockChange,\n\twithIgnoredBlockChange,\n)( {\n\tbyClientId( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn getFlattenedBlocksWithoutAttributes( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\t// Ignore updates if block isn't known\n\t\t\t\tif ( ! state[ action.clientId ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\t// Do nothing if only attributes change.\n\t\t\t\tconst changes = omit( action.updates, 'attributes' );\n\t\t\t\tif ( isEmpty( changes ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.clientId ]: {\n\t\t\t\t\t\t...state[ action.clientId ],\n\t\t\t\t\t\t...changes,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, action.replacedClientIds ),\n\t\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn omit( state, action.removedClientIds );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tattributes( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn getFlattenedBlockAttributes( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\t// Ignore updates if block isn't known or there are no attribute changes.\n\t\t\t\tif ( ! state[ action.clientId ] || ! action.updates.attributes ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.clientId ]: {\n\t\t\t\t\t\t...state[ action.clientId ],\n\t\t\t\t\t\t...action.updates.attributes,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\n\t\t\t\t// Ignore updates if block isn't known\n\t\t\t\tif ( ! state[ action.clientId ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\t// Consider as updates only changed values\n\t\t\t\tconst nextAttributes = reduce( action.attributes, ( result, value, key ) => {\n\t\t\t\t\tif ( value !== result[ key ] ) {\n\t\t\t\t\t\tresult = getMutateSafeObject( state[ action.clientId ], result );\n\t\t\t\t\t\tresult[ key ] = value;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result;\n\t\t\t\t}, state[ action.clientId ] );\n\n\t\t\t\t// Skip update if nothing has been changed. The reference will\n\t\t\t\t// match the original block if `reduce` had no changed values.\n\t\t\t\tif ( nextAttributes === state[ action.clientId ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise replace attributes in state\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.clientId ]: nextAttributes,\n\t\t\t\t};\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, action.replacedClientIds ),\n\t\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn omit( state, action.removedClientIds );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\torder( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn mapBlockOrder( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...omit( mapBlockOrder( action.blocks ), '' ),\n\t\t\t\t};\n\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst { rootClientId = '' } = action;\n\t\t\t\tconst subState = state[ rootClientId ] || [];\n\t\t\t\tconst mappedBlocks = mapBlockOrder( action.blocks, rootClientId );\n\t\t\t\tconst { index = subState.length } = action;\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...mappedBlocks,\n\t\t\t\t\t[ rootClientId ]: insertAt( subState, mappedBlocks[ rootClientId ], index ),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCK_TO_POSITION': {\n\t\t\t\tconst { fromRootClientId = '', toRootClientId = '', clientId } = action;\n\t\t\t\tconst { index = state[ toRootClientId ].length } = action;\n\n\t\t\t\t// Moving inside the same parent block\n\t\t\t\tif ( fromRootClientId === toRootClientId ) {\n\t\t\t\t\tconst subState = state[ toRootClientId ];\n\t\t\t\t\tconst fromIndex = subState.indexOf( clientId );\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t[ toRootClientId ]: moveTo( state[ toRootClientId ], fromIndex, index ),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Moving from a parent block to another\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ fromRootClientId ]: without( state[ fromRootClientId ], clientId ),\n\t\t\t\t\t[ toRootClientId ]: insertAt( state[ toRootClientId ], clientId, index ),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_UP': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = first( clientIds );\n\t\t\t\tconst subState = state[ rootClientId ];\n\n\t\t\t\tif ( ! subState.length || firstClientId === first( subState ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ rootClientId ]: moveTo( subState, firstIndex, firstIndex - 1, clientIds.length ),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = first( clientIds );\n\t\t\t\tconst lastClientId = last( clientIds );\n\t\t\t\tconst subState = state[ rootClientId ];\n\n\t\t\t\tif ( ! subState.length || lastClientId === last( subState ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ rootClientId ]: moveTo( subState, firstIndex, firstIndex + 1, clientIds.length ),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst { clientIds } = action;\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst mappedBlocks = mapBlockOrder( action.blocks );\n\n\t\t\t\treturn flow( [\n\t\t\t\t\t( nextState ) => omit( nextState, action.replacedClientIds ),\n\t\t\t\t\t( nextState ) => ( {\n\t\t\t\t\t\t...nextState,\n\t\t\t\t\t\t...omit( mappedBlocks, '' ),\n\t\t\t\t\t} ),\n\t\t\t\t\t( nextState ) => mapValues( nextState, ( subState ) => (\n\t\t\t\t\t\treduce( subState, ( result, clientId ) => {\n\t\t\t\t\t\t\tif ( clientId === clientIds[ 0 ] ) {\n\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\t\t\t...mappedBlocks[ '' ],\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( clientIds.indexOf( clientId ) === -1 ) {\n\t\t\t\t\t\t\t\tresult.push( clientId );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}, [] )\n\t\t\t\t\t) ),\n\t\t\t\t] )( state );\n\t\t\t}\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn flow( [\n\t\t\t\t\t// Remove inner block ordering for removed blocks\n\t\t\t\t\t( nextState ) => omit( nextState, action.removedClientIds ),\n\n\t\t\t\t\t// Remove deleted blocks from other blocks' orderings\n\t\t\t\t\t( nextState ) => mapValues( nextState, ( subState ) => (\n\t\t\t\t\t\twithout( subState, ...action.removedClientIds )\n\t\t\t\t\t) ),\n\t\t\t\t] )( state );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\t// While technically redundant data as the inverse of `order`, it serves as\n\t// an optimization for the selectors which derive the ancestry of a block.\n\tparents( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn mapBlockParents( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...mapBlockParents( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...mapBlockParents( action.blocks, action.rootClientId || '' ),\n\t\t\t\t};\n\n\t\t\tcase 'MOVE_BLOCK_TO_POSITION': {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.clientId ]: action.toRootClientId || '',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, action.replacedClientIds ),\n\t\t\t\t\t...mapBlockParents( action.blocks, state[ action.clientIds[ 0 ] ] ),\n\t\t\t\t};\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn omit( state, action.removedClientIds );\n\t\t}\n\n\t\treturn state;\n\t},\n} );\n\n/**\n * Reducer returning typing state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isTyping( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_TYPING':\n\t\t\treturn true;\n\n\t\tcase 'STOP_TYPING':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the caret is within formatted text.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isCaretWithinFormattedText( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ENTER_FORMATTED_TEXT':\n\t\t\treturn true;\n\n\t\tcase 'EXIT_FORMATTED_TEXT':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\nconst BLOCK_SELECTION_EMPTY_OBJECT = {};\nconst BLOCK_SELECTION_INITIAL_STATE = {\n\tstart: BLOCK_SELECTION_EMPTY_OBJECT,\n\tend: BLOCK_SELECTION_EMPTY_OBJECT,\n\tisMultiSelecting: false,\n\tisEnabled: true,\n\tinitialPosition: null,\n};\n\n/**\n * Reducer returning the block selection's state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function blockSelection( state = BLOCK_SELECTION_INITIAL_STATE, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'CLEAR_SELECTED_BLOCK':\n\t\t\tif ( ! state.start || ! state.start.clientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: BLOCK_SELECTION_EMPTY_OBJECT,\n\t\t\t\tend: BLOCK_SELECTION_EMPTY_OBJECT,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'START_MULTI_SELECT':\n\t\t\tif ( state.isMultiSelecting ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisMultiSelecting: true,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'STOP_MULTI_SELECT':\n\t\t\tif ( ! state.isMultiSelecting ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'MULTI_SELECT':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisMultiSelecting: state.isMultiSelecting,\n\t\t\t\tstart: { clientId: action.start },\n\t\t\t\tend: { clientId: action.end },\n\t\t\t};\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif (\n\t\t\t\taction.clientId === state.start.clientId &&\n\t\t\t\taction.clientId === state.end.clientId\n\t\t\t) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tinitialPosition: action.initialPosition,\n\t\t\t\tstart: { clientId: action.clientId },\n\t\t\t\tend: { clientId: action.clientId },\n\t\t\t};\n\t\tcase 'REPLACE_INNER_BLOCKS': // REPLACE_INNER_BLOCKS and INSERT_BLOCKS should follow the same logic.\n\t\tcase 'INSERT_BLOCKS': {\n\t\t\tif ( action.updateSelection ) {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tstart: { clientId: action.blocks[ 0 ].clientId },\n\t\t\t\t\tend: { clientId: action.blocks[ 0 ].clientId },\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\t\tcase 'REMOVE_BLOCKS':\n\t\t\tif (\n\t\t\t\t! action.clientIds ||\n\t\t\t\t! action.clientIds.length ||\n\t\t\t\taction.clientIds.indexOf( state.start.clientId ) === -1\n\t\t\t) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: BLOCK_SELECTION_EMPTY_OBJECT,\n\t\t\t\tend: BLOCK_SELECTION_EMPTY_OBJECT,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'REPLACE_BLOCKS': {\n\t\t\tif ( action.clientIds.indexOf( state.start.clientId ) === -1 ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tconst indexToSelect = action.indexToSelect || action.blocks.length - 1;\n\t\t\tconst blockToSelect = action.blocks[ indexToSelect ];\n\n\t\t\tif ( ! blockToSelect ) {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tstart: BLOCK_SELECTION_EMPTY_OBJECT,\n\t\t\t\t\tend: BLOCK_SELECTION_EMPTY_OBJECT,\n\t\t\t\t\tisMultiSelecting: false,\n\t\t\t\t\tinitialPosition: null,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tblockToSelect.clientId === state.start.clientId &&\n\t\t\t\tblockToSelect.clientId === state.end.clientId\n\t\t\t) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: { clientId: blockToSelect.clientId },\n\t\t\t\tend: { clientId: blockToSelect.clientId },\n\t\t\t};\n\t\t}\n\t\tcase 'TOGGLE_SELECTION':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisEnabled: action.isSelectionEnabled,\n\t\t\t};\n\t\tcase 'SELECTION_CHANGE':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: {\n\t\t\t\t\tclientId: action.clientId,\n\t\t\t\t\tattributeKey: action.attributeKey,\n\t\t\t\t\toffset: action.startOffset,\n\t\t\t\t},\n\t\t\t\tend: {\n\t\t\t\t\tclientId: action.clientId,\n\t\t\t\t\tattributeKey: action.attributeKey,\n\t\t\t\t\toffset: action.endOffset,\n\t\t\t\t},\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\nexport function blocksMode( state = {}, action ) {\n\tif ( action.type === 'TOGGLE_BLOCK_MODE' ) {\n\t\tconst { clientId } = action;\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ clientId ]: state[ clientId ] && state[ clientId ] === 'html' ? 'visual' : 'html',\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block insertion point visibility, either null if there\n * is not an explicit insertion point assigned, or an object of its `index` and\n * `rootClientId`.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function insertionPoint( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SHOW_INSERTION_POINT':\n\t\t\tconst { rootClientId, index } = action;\n\t\t\treturn { rootClientId, index };\n\n\t\tcase 'HIDE_INSERTION_POINT':\n\t\t\treturn null;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the post blocks match the defined template or not.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function template( state = { isValid: true }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_TEMPLATE_VALIDITY':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisValid: action.isValid,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the editor setting.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function settings( state = SETTINGS_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_SETTINGS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.settings,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the user preferences.\n *\n * @param {Object}  state                 Current state.\n * @param {Object}  action                Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function preferences( state = PREFERENCES_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'INSERT_BLOCKS':\n\t\tcase 'REPLACE_BLOCKS':\n\t\t\treturn action.blocks.reduce( ( prevState, block ) => {\n\t\t\t\tlet id = block.name;\n\t\t\t\tconst insert = { name: block.name };\n\t\t\t\tif ( isReusableBlock( block ) ) {\n\t\t\t\t\tinsert.ref = block.attributes.ref;\n\t\t\t\t\tid += '/' + block.attributes.ref;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...prevState,\n\t\t\t\t\tinsertUsage: {\n\t\t\t\t\t\t...prevState.insertUsage,\n\t\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\t\ttime: action.time,\n\t\t\t\t\t\t\tcount: prevState.insertUsage[ id ] ? prevState.insertUsage[ id ].count + 1 : 1,\n\t\t\t\t\t\t\tinsert,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}, state );\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning an object where each key is a block client ID, its value\n * representing the settings for its nested blocks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blockListSettings = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\t// Even if the replaced blocks have the same client ID, our logic\n\t\t// should correct the state.\n\t\tcase 'REPLACE_BLOCKS' :\n\t\tcase 'REMOVE_BLOCKS': {\n\t\t\treturn omit( state, action.clientIds );\n\t\t}\n\t\tcase 'UPDATE_BLOCK_LIST_SETTINGS': {\n\t\t\tconst { clientId } = action;\n\t\t\tif ( ! action.settings ) {\n\t\t\t\tif ( state.hasOwnProperty( clientId ) ) {\n\t\t\t\t\treturn omit( state, clientId );\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tif ( isEqual( state[ clientId ], action.settings ) ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: action.settings,\n\t\t\t};\n\t\t}\n\t}\n\treturn state;\n};\n\n/**\n * Reducer returning whether the navigation mode is enabled or not.\n *\n * @param {string} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function isNavigationMode( state = true, action ) {\n\tif ( action.type === 'SET_NAVIGATION_MODE' ) {\n\t\treturn action.isNavigationMode;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer return an updated state representing the most recent block attribute\n * update. The state is structured as an object where the keys represent the\n * client IDs of blocks, the values a subset of attributes from the most recent\n * block update. The state is always reset to null if the last action is\n * anything other than an attributes update.\n *\n * @param {Object<string,Object>} state  Current state.\n * @param {Object}                action Action object.\n *\n * @return {[string,Object]} Updated state.\n */\nexport function lastBlockAttributesChange( state, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_BLOCK':\n\t\t\tif ( ! action.updates.attributes ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn { [ action.clientId ]: action.updates.attributes };\n\n\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\n\t\t\treturn { [ action.clientId ]: action.attributes };\n\t}\n\n\treturn null;\n}\n\n/**\n * Reducer returning automatic change state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function didAutomaticChange( state, action ) {\n\treturn action.type === 'MARK_AUTOMATIC_CHANGE';\n}\n\nexport default combineReducers( {\n\tblocks,\n\tisTyping,\n\tisCaretWithinFormattedText,\n\tblockSelection,\n\tblocksMode,\n\tblockListSettings,\n\tinsertionPoint,\n\ttemplate,\n\tsettings,\n\tpreferences,\n\tlastBlockAttributesChange,\n\tisNavigationMode,\n\tdidAutomaticChange,\n} );\n"]}