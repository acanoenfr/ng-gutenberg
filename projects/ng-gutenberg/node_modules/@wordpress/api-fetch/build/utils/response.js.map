{"version":3,"sources":["@wordpress/api-fetch/src/utils/response.js"],"names":["parseResponse","response","shouldParseResponse","status","json","Promise","reject","parseJsonAndNormalizeError","invalidJsonError","code","message","catch","parseResponseAndNormalizeError","resolve","res","parseAndThrowError","then","error","unknownError"],"mappings":";;;;;;;;AAGA;;AAHA;;;;AAKA;;;;;;;;AAQA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAEC,QAAF,EAA4C;AAAA,MAAhCC,mBAAgC,uEAAV,IAAU;;AACjE,MAAKA,mBAAL,EAA2B;AAC1B,QAAKD,QAAQ,CAACE,MAAT,KAAoB,GAAzB,EAA+B;AAC9B,aAAO,IAAP;AACA;;AAED,WAAOF,QAAQ,CAACG,IAAT,GAAgBH,QAAQ,CAACG,IAAT,EAAhB,GAAkCC,OAAO,CAACC,MAAR,CAAgBL,QAAhB,CAAzC;AACA;;AAED,SAAOA,QAAP;AACA,CAVD;;AAYA,IAAMM,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAEN,QAAF,EAAgB;AAClD,MAAMO,gBAAgB,GAAG;AACxBC,IAAAA,IAAI,EAAE,cADkB;AAExBC,IAAAA,OAAO,EAAE,cAAI,4CAAJ;AAFe,GAAzB;;AAKA,MAAK,CAAET,QAAF,IAAc,CAAEA,QAAQ,CAACG,IAA9B,EAAqC;AACpC,UAAMI,gBAAN;AACA;;AAED,SAAOP,QAAQ,CAACG,IAAT,GACLO,KADK,CACE,YAAM;AACb,UAAMH,gBAAN;AACA,GAHK,CAAP;AAIA,CAdD;AAgBA;;;;;;;;;;AAQO,IAAMI,8BAA8B,GAAG,SAAjCA,8BAAiC,CAAEX,QAAF,EAA4C;AAAA,MAAhCC,mBAAgC,uEAAV,IAAU;AACzF,SAAOG,OAAO,CAACQ,OAAR,CAAiBb,aAAa,CAAEC,QAAF,EAAYC,mBAAZ,CAA9B,EACLS,KADK,CACE,UAAEG,GAAF;AAAA,WAAWC,kBAAkB,CAAED,GAAF,EAAOZ,mBAAP,CAA7B;AAAA,GADF,CAAP;AAEA,CAHM;;;;AAKA,SAASa,kBAAT,CAA6Bd,QAA7B,EAAoE;AAAA,MAA7BC,mBAA6B,uEAAP,IAAO;;AAC1E,MAAK,CAAEA,mBAAP,EAA6B;AAC5B,UAAMD,QAAN;AACA;;AAED,SAAOM,0BAA0B,CAAEN,QAAF,CAA1B,CACLe,IADK,CACC,UAAEC,KAAF,EAAa;AACnB,QAAMC,YAAY,GAAG;AACpBT,MAAAA,IAAI,EAAE,eADc;AAEpBC,MAAAA,OAAO,EAAE,cAAI,4BAAJ;AAFW,KAArB;AAKA,UAAMO,KAAK,IAAIC,YAAf;AACA,GARK,CAAP;AASA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Parses the apiFetch response.\n *\n * @param {Response} response\n * @param {boolean}  shouldParseResponse\n *\n * @return {Promise} Parsed response\n */\nconst parseResponse = ( response, shouldParseResponse = true ) => {\n\tif ( shouldParseResponse ) {\n\t\tif ( response.status === 204 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn response.json ? response.json() : Promise.reject( response );\n\t}\n\n\treturn response;\n};\n\nconst parseJsonAndNormalizeError = ( response ) => {\n\tconst invalidJsonError = {\n\t\tcode: 'invalid_json',\n\t\tmessage: __( 'The response is not a valid JSON response.' ),\n\t};\n\n\tif ( ! response || ! response.json ) {\n\t\tthrow invalidJsonError;\n\t}\n\n\treturn response.json()\n\t\t.catch( () => {\n\t\t\tthrow invalidJsonError;\n\t\t} );\n};\n\n/**\n * Parses the apiFetch response properly and normalize response errors.\n *\n * @param {Response} response\n * @param {boolean}  shouldParseResponse\n *\n * @return {Promise} Parsed response.\n */\nexport const parseResponseAndNormalizeError = ( response, shouldParseResponse = true ) => {\n\treturn Promise.resolve( parseResponse( response, shouldParseResponse ) )\n\t\t.catch( ( res ) => parseAndThrowError( res, shouldParseResponse ) );\n};\n\nexport function parseAndThrowError( response, shouldParseResponse = true ) {\n\tif ( ! shouldParseResponse ) {\n\t\tthrow response;\n\t}\n\n\treturn parseJsonAndNormalizeError( response )\n\t\t.then( ( error ) => {\n\t\t\tconst unknownError = {\n\t\t\t\tcode: 'unknown_error',\n\t\t\t\tmessage: __( 'An unknown error occurred.' ),\n\t\t\t};\n\n\t\t\tthrow error || unknownError;\n\t\t} );\n}\n\n"]}