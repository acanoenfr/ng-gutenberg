{"version":3,"sources":["@wordpress/api-fetch/src/middlewares/media-upload.js"],"names":["mediaUploadMiddleware","options","next","isMediaUploadRequest","path","indexOf","url","retries","maxRetries","postProcess","attachmentId","method","data","action","parse","catch","Promise","reject","response","headers","get","status","code","message","then"],"mappings":";;;;;;;;;;;AAGA;;AAKA;;AARA;;;;AAKA;;;;AAQA;;;;;;;;AAQA,SAASA,qBAAT,CAAgCC,OAAhC,EAAyCC,IAAzC,EAAgD;AAC/C,MAAMC,oBAAoB,GACvBF,OAAO,CAACG,IAAR,IAAgBH,OAAO,CAACG,IAAR,CAAaC,OAAb,CAAsB,cAAtB,MAA2C,CAAC,CAA9D,IACEJ,OAAO,CAACK,GAAR,IAAeL,OAAO,CAACK,GAAR,CAAYD,OAAZ,CAAqB,cAArB,MAA0C,CAAC,CAF7D;;AAIA,MAAK,CAAEF,oBAAP,EAA8B;AAC7B,WAAOD,IAAI,CAAED,OAAF,EAAWC,IAAX,CAAX;AACA;;AACD,MAAIK,OAAO,GAAG,CAAd;AACA,MAAMC,UAAU,GAAG,CAAnB;;AAEA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAAEC,YAAF,EAAoB;AACvCH,IAAAA,OAAO;AACP,WAAOL,IAAI,CAAE;AACZE,MAAAA,IAAI,yBAAmBM,YAAnB,kBADQ;AAEZC,MAAAA,MAAM,EAAE,MAFI;AAGZC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAHM;AAIZC,MAAAA,KAAK,EAAE;AAJK,KAAF,CAAJ,CAMLC,KANK,CAME,YAAM;AACb,UAAKR,OAAO,GAAGC,UAAf,EAA4B;AAC3B,eAAOC,WAAW,CAAEC,YAAF,CAAlB;AACA;;AACDR,MAAAA,IAAI,CAAE;AACLE,QAAAA,IAAI,yBAAmBM,YAAnB,gBADC;AAELC,QAAAA,MAAM,EAAE;AAFH,OAAF,CAAJ;AAKA,aAAOK,OAAO,CAACC,MAAR,EAAP;AACA,KAhBK,CAAP;AAiBA,GAnBD;;AAqBA,SAAOf,IAAI,iCAAOD,OAAP;AAAgBa,IAAAA,KAAK,EAAE;AAAvB,KAAJ,CACLC,KADK,CACE,UAAEG,QAAF,EAAgB;AACvB,QAAMR,YAAY,GAAGQ,QAAQ,CAACC,OAAT,CAAiBC,GAAjB,CAAsB,2BAAtB,CAArB;;AACA,QAAK,CAAEF,QAAQ,CAACG,MAAT,KAAoB,GAApB,IAA2BH,QAAQ,CAACG,MAAT,KAAoB,GAAjD,KAA0DX,YAA/D,EAA8E;AAC7E,aAAOD,WAAW,CAAEC,YAAF,CAAX,CAA4BK,KAA5B,CAAmC,YAAM;AAC/C,YAAKd,OAAO,CAACa,KAAR,KAAkB,KAAvB,EAA+B;AAC9B,iBAAOE,OAAO,CAACC,MAAR,CAAgB;AACtBK,YAAAA,IAAI,EAAE,cADgB;AAEtBC,YAAAA,OAAO,EAAE,cAAI,+FAAJ;AAFa,WAAhB,CAAP;AAIA;;AAED,eAAOP,OAAO,CAACC,MAAR,CAAgBC,QAAhB,CAAP;AACA,OATM,CAAP;AAUA;;AACD,WAAO,kCAAoBA,QAApB,EAA8BjB,OAAO,CAACa,KAAtC,CAAP;AACA,GAhBK,EAiBLU,IAjBK,CAiBC,UAAEN,QAAF;AAAA,WAAgB,8CAAgCA,QAAhC,EAA0CjB,OAAO,CAACa,KAAlD,CAAhB;AAAA,GAjBD,CAAP;AAkBA;;eAEcd,qB","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport {\n\tparseAndThrowError,\n\tparseResponseAndNormalizeError,\n} from '../utils/response';\n\n/**\n * Middleware handling media upload failures and retries.\n *\n * @param {Object}   options Fetch options.\n * @param {Function} next    [description]\n *\n * @return {*} The evaluated result of the remaining middleware chain.\n */\nfunction mediaUploadMiddleware( options, next ) {\n\tconst isMediaUploadRequest =\n\t\t( options.path && options.path.indexOf( '/wp/v2/media' ) !== -1 ) ||\n\t\t( options.url && options.url.indexOf( '/wp/v2/media' ) !== -1 );\n\n\tif ( ! isMediaUploadRequest ) {\n\t\treturn next( options, next );\n\t}\n\tlet retries = 0;\n\tconst maxRetries = 5;\n\n\tconst postProcess = ( attachmentId ) => {\n\t\tretries++;\n\t\treturn next( {\n\t\t\tpath: `/wp/v2/media/${ attachmentId }/post-process`,\n\t\t\tmethod: 'POST',\n\t\t\tdata: { action: 'create-image-subsizes' },\n\t\t\tparse: false,\n\t\t} )\n\t\t\t.catch( () => {\n\t\t\t\tif ( retries < maxRetries ) {\n\t\t\t\t\treturn postProcess( attachmentId );\n\t\t\t\t}\n\t\t\t\tnext( {\n\t\t\t\t\tpath: `/wp/v2/media/${ attachmentId }?force=true`,\n\t\t\t\t\tmethod: 'DELETE',\n\t\t\t\t} );\n\n\t\t\t\treturn Promise.reject();\n\t\t\t} );\n\t};\n\n\treturn next( { ...options, parse: false } )\n\t\t.catch( ( response ) => {\n\t\t\tconst attachmentId = response.headers.get( 'x-wp-upload-attachment-id' );\n\t\t\tif ( ( response.status === 500 || response.status === 502 ) && attachmentId ) {\n\t\t\t\treturn postProcess( attachmentId ).catch( () => {\n\t\t\t\t\tif ( options.parse !== false ) {\n\t\t\t\t\t\treturn Promise.reject( {\n\t\t\t\t\t\t\tcode: 'post_process',\n\t\t\t\t\t\t\tmessage: __( 'Media upload failed. If this is a photo or a large image, please scale it down and try again.' ),\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Promise.reject( response );\n\t\t\t\t} );\n\t\t\t}\n\t\t\treturn parseAndThrowError( response, options.parse );\n\t\t} )\n\t\t.then( ( response ) => parseResponseAndNormalizeError( response, options.parse ) );\n}\n\nexport default mediaUploadMiddleware;\n"]}