{"version":3,"sources":["@wordpress/core-data/src/actions.js"],"names":["editEntityRecord","undo","redo","saveEntityRecord","saveEditedEntityRecord","receiveUserQuery","queryID","users","type","receiveCurrentUser","currentUser","addEntities","entities","receiveEntityRecords","kind","name","records","query","invalidateCache","map","record","status","title","action","receiveThemeSupports","themeSupports","receiveEmbedPreview","url","preview","recordId","edits","options","transientEdits","mergedEdits","editedRecord","edit","Object","keys","reduce","acc","key","recordValue","editedRecordValue","value","undefined","meta","undoIgnore","undoEdit","isUndo","redoEdit","isRedo","__unstableCreateUndoLevel","isAutosave","entity","entityIdKey","DEFAULT_ENTITY_KEY","path","baseURL","persistedRecord","currentUserId","id","autosavePost","data","includes","method","updatedRecord","newRecord","receiveAutosaves","persistedEntity","currentEdits","error","receiveUploadPermissions","hasUploadPermissions","isAllowed","receiveUserPermission","postId","autosaves"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { castArray, get, isEqual, find } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport {\n\treceiveItems,\n\treceiveQueriedItems,\n} from './queried-data';\nimport { getKindEntities, DEFAULT_ENTITY_KEY } from './entities';\nimport { select, apiFetch } from './controls';\n\n/**\n * Returns an action object used in signalling that authors have been received.\n *\n * @param {string}       queryID Query ID.\n * @param {Array|Object} users   Users received.\n *\n * @return {Object} Action object.\n */\nexport function receiveUserQuery( queryID, users ) {\n\treturn {\n\t\ttype: 'RECEIVE_USER_QUERY',\n\t\tusers: castArray( users ),\n\t\tqueryID,\n\t};\n}\n\n/**\n * Returns an action used in signalling that the current user has been received.\n *\n * @param {Object} currentUser Current user object.\n *\n * @return {Object} Action object.\n */\nexport function receiveCurrentUser( currentUser ) {\n\treturn {\n\t\ttype: 'RECEIVE_CURRENT_USER',\n\t\tcurrentUser,\n\t};\n}\n\n/**\n * Returns an action object used in adding new entities.\n *\n * @param {Array} entities  Entities received.\n *\n * @return {Object} Action object.\n */\nexport function addEntities( entities ) {\n\treturn {\n\t\ttype: 'ADD_ENTITIES',\n\t\tentities,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that entity records have been received.\n *\n * @param {string}       kind            Kind of the received entity.\n * @param {string}       name            Name of the received entity.\n * @param {Array|Object} records         Records received.\n * @param {?Object}      query           Query Object.\n * @param {?boolean}     invalidateCache Should invalidate query caches\n *\n * @return {Object} Action object.\n */\nexport function receiveEntityRecords( kind, name, records, query, invalidateCache = false ) {\n\t// Auto drafts should not have titles, but some plugins rely on them so we can't filter this\n\t// on the server.\n\tif ( kind === 'postType' ) {\n\t\trecords = castArray( records ).map( ( record ) =>\n\t\t\trecord.status === 'auto-draft' ? { ...record, title: '' } : record\n\t\t);\n\t}\n\tlet action;\n\tif ( query ) {\n\t\taction = receiveQueriedItems( records, query );\n\t} else {\n\t\taction = receiveItems( records );\n\t}\n\n\treturn {\n\t\t...action,\n\t\tkind,\n\t\tname,\n\t\tinvalidateCache,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the index has been received.\n *\n * @param {Object} themeSupports Theme support for the current theme.\n *\n * @return {Object} Action object.\n */\nexport function receiveThemeSupports( themeSupports ) {\n\treturn {\n\t\ttype: 'RECEIVE_THEME_SUPPORTS',\n\t\tthemeSupports,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the preview data for\n * a given URl has been received.\n *\n * @param {string}  url      URL to preview the embed for.\n * @param {Mixed}   preview  Preview data.\n *\n * @return {Object} Action object.\n */\nexport function receiveEmbedPreview( url, preview ) {\n\treturn {\n\t\ttype: 'RECEIVE_EMBED_PREVIEW',\n\t\turl,\n\t\tpreview,\n\t};\n}\n\n/**\n * Returns an action object that triggers an\n * edit to an entity record.\n *\n * @param {string} kind     Kind of the edited entity record.\n * @param {string} name     Name of the edited entity record.\n * @param {number} recordId Record ID of the edited entity record.\n * @param {Object} edits    The edits.\n * @param {Object} options  Options for the edit.\n * @param {boolean} options.undoIgnore Whether to ignore the edit in undo history or not.\n *\n * @return {Object} Action object.\n */\nexport function* editEntityRecord( kind, name, recordId, edits, options = {} ) {\n\tconst { transientEdits = {}, mergedEdits = {} } = yield select(\n\t\t'getEntity',\n\t\tkind,\n\t\tname\n\t);\n\tconst record = yield select( 'getRawEntityRecord', kind, name, recordId );\n\tconst editedRecord = yield select(\n\t\t'getEditedEntityRecord',\n\t\tkind,\n\t\tname,\n\t\trecordId\n\t);\n\n\tconst edit = {\n\t\tkind,\n\t\tname,\n\t\trecordId,\n\t\t// Clear edits when they are equal to their persisted counterparts\n\t\t// so that the property is not considered dirty.\n\t\tedits: Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\tconst recordValue = record[ key ];\n\t\t\tconst editedRecordValue = editedRecord[ key ];\n\t\t\tconst value = mergedEdits[ key ] ?\n\t\t\t\t{ ...editedRecordValue, ...edits[ key ] } :\n\t\t\t\tedits[ key ];\n\t\t\tacc[ key ] = isEqual( recordValue, value ) ? undefined : value;\n\t\t\treturn acc;\n\t\t}, {} ),\n\t\ttransientEdits,\n\t};\n\treturn {\n\t\ttype: 'EDIT_ENTITY_RECORD',\n\t\t...edit,\n\t\tmeta: {\n\t\t\tundo: ! options.undoIgnore && {\n\t\t\t\t...edit,\n\t\t\t\t// Send the current values for things like the first undo stack entry.\n\t\t\t\tedits: Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\t\t\tacc[ key ] = editedRecord[ key ];\n\t\t\t\t\treturn acc;\n\t\t\t\t}, {} ),\n\t\t\t},\n\t\t},\n\t};\n}\n\n/**\n * Action triggered to undo the last edit to\n * an entity record, if any.\n */\nexport function* undo() {\n\tconst undoEdit = yield select( 'getUndoEdit' );\n\tif ( ! undoEdit ) {\n\t\treturn;\n\t}\n\tyield {\n\t\ttype: 'EDIT_ENTITY_RECORD',\n\t\t...undoEdit,\n\t\tmeta: {\n\t\t\tisUndo: true,\n\t\t},\n\t};\n}\n\n/**\n * Action triggered to redo the last undoed\n * edit to an entity record, if any.\n */\nexport function* redo() {\n\tconst redoEdit = yield select( 'getRedoEdit' );\n\tif ( ! redoEdit ) {\n\t\treturn;\n\t}\n\tyield {\n\t\ttype: 'EDIT_ENTITY_RECORD',\n\t\t...redoEdit,\n\t\tmeta: {\n\t\t\tisRedo: true,\n\t\t},\n\t};\n}\n\n/**\n * Forces the creation of a new undo level.\n *\n * @return {Object} Action object.\n */\nexport function __unstableCreateUndoLevel() {\n\treturn { type: 'CREATE_UNDO_LEVEL' };\n}\n\n/**\n * Action triggered to save an entity record.\n *\n * @param {string} kind    Kind of the received entity.\n * @param {string} name    Name of the received entity.\n * @param {Object} record  Record to be saved.\n * @param {Object} options Saving options.\n */\nexport function* saveEntityRecord(\n\tkind,\n\tname,\n\trecord,\n\t{ isAutosave = false } = { isAutosave: false }\n) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\tconst entityIdKey = entity.key || DEFAULT_ENTITY_KEY;\n\tconst recordId = record[ entityIdKey ];\n\n\tyield { type: 'SAVE_ENTITY_RECORD_START', kind, name, recordId, isAutosave };\n\tlet updatedRecord;\n\tlet error;\n\tlet persistedEntity;\n\tlet currentEdits;\n\ttry {\n\t\tconst path = `${ entity.baseURL }${ recordId ? '/' + recordId : '' }`;\n\t\tconst persistedRecord = yield select(\n\t\t\t'getRawEntityRecord',\n\t\t\tkind,\n\t\t\tname,\n\t\t\trecordId\n\t\t);\n\n\t\tif ( isAutosave ) {\n\t\t\t// Most of this autosave logic is very specific to posts.\n\t\t\t// This is fine for now as it is the only supported autosave,\n\t\t\t// but ideally this should all be handled in the back end,\n\t\t\t// so the client just sends and receives objects.\n\t\t\tconst currentUser = yield select( 'getCurrentUser' );\n\t\t\tconst currentUserId = currentUser ? currentUser.id : undefined;\n\t\t\tconst autosavePost = yield select(\n\t\t\t\t'getAutosave',\n\t\t\t\tpersistedRecord.type,\n\t\t\t\tpersistedRecord.id,\n\t\t\t\tcurrentUserId\n\t\t\t);\n\t\t\t// Autosaves need all expected fields to be present.\n\t\t\t// So we fallback to the previous autosave and then\n\t\t\t// to the actual persisted entity if the edits don't\n\t\t\t// have a value.\n\t\t\tlet data = { ...persistedRecord, ...autosavePost, ...record };\n\t\t\tdata = Object.keys( data ).reduce(\n\t\t\t\t( acc, key ) => {\n\t\t\t\t\tif ( [ 'title', 'excerpt', 'content' ].includes( key ) ) {\n\t\t\t\t\t\t// Edits should be the \"raw\" attribute values.\n\t\t\t\t\t\tacc[ key ] = get( data[ key ], 'raw', data[ key ] );\n\t\t\t\t\t}\n\t\t\t\t\treturn acc;\n\t\t\t\t},\n\t\t\t\t{ status: data.status === 'auto-draft' ? 'draft' : data.status }\n\t\t\t);\n\t\t\tupdatedRecord = yield apiFetch( {\n\t\t\t\tpath: `${ path }/autosaves`,\n\t\t\t\tmethod: 'POST',\n\t\t\t\tdata,\n\t\t\t} );\n\t\t\t// An autosave may be processed by the server as a regular save\n\t\t\t// when its update is requested by the author and the post had\n\t\t\t// draft or auto-draft status.\n\t\t\tif ( persistedRecord.id === updatedRecord.id ) {\n\t\t\t\tlet newRecord = { ...persistedRecord, ...data, ...updatedRecord };\n\t\t\t\tnewRecord = Object.keys( newRecord ).reduce( ( acc, key ) => {\n\t\t\t\t\t// These properties are persisted in autosaves.\n\t\t\t\t\tif ( [ 'title', 'excerpt', 'content' ].includes( key ) ) {\n\t\t\t\t\t\t// Edits should be the \"raw\" attribute values.\n\t\t\t\t\t\tacc[ key ] = get( newRecord[ key ], 'raw', newRecord[ key ] );\n\t\t\t\t\t} else if ( key === 'status' ) {\n\t\t\t\t\t\t// Status is only persisted in autosaves when going from\n\t\t\t\t\t\t// \"auto-draft\" to \"draft\".\n\t\t\t\t\t\tacc[ key ] =\n\t\t\t\t\t\t\tpersistedRecord.status === 'auto-draft' &&\n\t\t\t\t\t\t\tnewRecord.status === 'draft' ?\n\t\t\t\t\t\t\t\tnewRecord.status :\n\t\t\t\t\t\t\t\tpersistedRecord.status;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// These properties are not persisted in autosaves.\n\t\t\t\t\t\tacc[ key ] = get( persistedRecord[ key ], 'raw', persistedRecord[ key ] );\n\t\t\t\t\t}\n\t\t\t\t\treturn acc;\n\t\t\t\t}, {} );\n\t\t\t\tyield receiveEntityRecords( kind, name, newRecord, undefined, true );\n\t\t\t} else {\n\t\t\t\tyield receiveAutosaves( persistedRecord.id, updatedRecord );\n\t\t\t}\n\t\t} else {\n\t\t\t// Auto drafts should be converted to drafts on explicit saves and we should not respect their default title,\n\t\t\t// but some plugins break with this behavior so we can't filter it on the server.\n\t\t\tlet data = record;\n\t\t\tif ( kind === 'postType' && persistedRecord && persistedRecord.status === 'auto-draft' ) {\n\t\t\t\tif ( ! data.status ) {\n\t\t\t\t\tdata = { ...data, status: 'draft' };\n\t\t\t\t}\n\t\t\t\tif ( ! data.title || data.title === 'Auto Draft' ) {\n\t\t\t\t\tdata = { ...data, title: '' };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// We perform an optimistic update here to clear all the edits that\n\t\t\t// will be persisted so that if the server filters them, the new\n\t\t\t// filtered values are always accepted.\n\t\t\tpersistedEntity = yield select(\n\t\t\t\t'getEntityRecord',\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\trecordId\n\t\t\t);\n\t\t\tcurrentEdits = yield select(\n\t\t\t\t'getEntityRecordEdits',\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\trecordId\n\t\t\t);\n\t\t\tyield receiveEntityRecords( kind, name, { ...persistedEntity, ...data }, undefined, true );\n\n\t\t\tupdatedRecord = yield apiFetch( {\n\t\t\t\tpath,\n\t\t\t\tmethod: recordId ? 'PUT' : 'POST',\n\t\t\t\tdata,\n\t\t\t} );\n\t\t\tyield receiveEntityRecords( kind, name, updatedRecord, undefined, true );\n\t\t}\n\t} catch ( _error ) {\n\t\terror = _error;\n\n\t\t// If we got to the point in the try block where we made an optimistic update,\n\t\t// we need to roll it back here.\n\t\tif ( persistedEntity && currentEdits ) {\n\t\t\tyield receiveEntityRecords( kind, name, persistedEntity, undefined, true );\n\t\t\tyield editEntityRecord(\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\trecordId,\n\t\t\t\t{\n\t\t\t\t\t...currentEdits,\n\t\t\t\t\t...( yield select( 'getEntityRecordEdits', kind, name, recordId ) ),\n\t\t\t\t},\n\t\t\t\t{ undoIgnore: true }\n\t\t\t);\n\t\t}\n\t}\n\tyield {\n\t\ttype: 'SAVE_ENTITY_RECORD_FINISH',\n\t\tkind,\n\t\tname,\n\t\trecordId,\n\t\terror,\n\t\tisAutosave,\n\t};\n\n\treturn updatedRecord;\n}\n\n/**\n * Action triggered to save an entity record's edits.\n *\n * @param {string} kind     Kind of the entity.\n * @param {string} name     Name of the entity.\n * @param {Object} recordId ID of the record.\n * @param {Object} options  Saving options.\n */\nexport function* saveEditedEntityRecord( kind, name, recordId, options ) {\n\tif ( ! ( yield select( 'hasEditsForEntityRecord', kind, name, recordId ) ) ) {\n\t\treturn;\n\t}\n\tconst edits = yield select(\n\t\t'getEntityRecordNonTransientEdits',\n\t\tkind,\n\t\tname,\n\t\trecordId\n\t);\n\tconst record = { id: recordId, ...edits };\n\tyield* saveEntityRecord( kind, name, record, options );\n}\n\n/**\n * Returns an action object used in signalling that Upload permissions have been received.\n *\n * @param {boolean} hasUploadPermissions Does the user have permission to upload files?\n *\n * @return {Object} Action object.\n */\nexport function receiveUploadPermissions( hasUploadPermissions ) {\n\treturn {\n\t\ttype: 'RECEIVE_USER_PERMISSION',\n\t\tkey: 'create/media',\n\t\tisAllowed: hasUploadPermissions,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the current user has\n * permission to perform an action on a REST resource.\n *\n * @param {string}  key       A key that represents the action and REST resource.\n * @param {boolean} isAllowed Whether or not the user can perform the action.\n *\n * @return {Object} Action object.\n */\nexport function receiveUserPermission( key, isAllowed ) {\n\treturn {\n\t\ttype: 'RECEIVE_USER_PERMISSION',\n\t\tkey,\n\t\tisAllowed,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the autosaves for a\n * post have been received.\n *\n * @param {number}       postId    The id of the post that is parent to the autosave.\n * @param {Array|Object} autosaves An array of autosaves or singular autosave object.\n *\n * @return {Object} Action object.\n */\nexport function receiveAutosaves( postId, autosaves ) {\n\treturn {\n\t\ttype: 'RECEIVE_AUTOSAVES',\n\t\tpostId,\n\t\tautosaves: castArray( autosaves ),\n\t};\n}\n"]}