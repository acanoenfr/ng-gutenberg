{"version":3,"sources":["@wordpress/components/src/autocomplete/index.js"],"names":["classnames","escapeRegExp","find","map","debounce","deburr","Component","renderToString","ENTER","ESCAPE","UP","DOWN","LEFT","RIGHT","SPACE","__","_n","sprintf","withInstanceId","compose","create","slice","insert","isCollapsed","getTextContent","getRectangleFromRange","Button","Popover","withSpokenMessages","filterOptions","search","options","maxResults","filtered","i","length","option","keywords","label","isMatch","some","keyword","test","push","getCaretRect","selection","window","getSelection","range","rangeCount","getRangeAt","Autocomplete","selectedIndex","suppress","undefined","open","query","filteredOptions","arguments","select","bind","reset","resetWhenSuppressed","handleKeyDown","debouncedLoadOptions","loadOptions","state","constructor","getInitialState","replacement","props","record","onChange","end","start","triggerPrefix","toInsert","html","onReplace","getOptionCompletion","isDisabled","completion","value","action","insertCompletion","setState","idx","debouncedSpeak","completer","promise","activePromise","Promise","resolve","then","optionsData","keyedOptions","optionData","optionIndex","key","getOptionLabel","getOptionKeywords","isOptionDisabled","announce","event","keyCode","ctrlKey","shiftKey","altKey","metaKey","preventDefault","stopPropagation","nextSelectedIndex","prevProps","completers","prevRecord","text","prevText","textAfterSelection","allCompleters","allowContext","index","lastIndexOf","safeTrigger","match","RegExp","wasOpen","wasSuppress","wasQuery","isDebounced","cancel","children","instanceId","isSelected","selectedKey","className","isExpanded","listBoxId","activeId","onKeyDown"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { escapeRegExp, find, map, debounce, deburr } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Component, renderToString } from '@wordpress/element';\nimport { ENTER, ESCAPE, UP, DOWN, LEFT, RIGHT, SPACE } from '@wordpress/keycodes';\nimport { __, _n, sprintf } from '@wordpress/i18n';\nimport { withInstanceId, compose } from '@wordpress/compose';\nimport {\n\tcreate,\n\tslice,\n\tinsert,\n\tisCollapsed,\n\tgetTextContent,\n} from '@wordpress/rich-text';\nimport { getRectangleFromRange } from '@wordpress/dom';\n\n/**\n * Internal dependencies\n */\nimport Button from '../button';\nimport Popover from '../popover';\nimport withSpokenMessages from '../higher-order/with-spoken-messages';\n\n/**\n * A raw completer option.\n *\n * @typedef {*} CompleterOption\n */\n\n/**\n * @callback FnGetOptions\n *\n * @return {(CompleterOption[]|Promise.<CompleterOption[]>)} The completer options or a promise for them.\n */\n\n/**\n * @callback FnGetOptionKeywords\n * @param {CompleterOption} option a completer option.\n *\n * @return {string[]} list of key words to search.\n */\n\n/**\n * @callback FnIsOptionDisabled\n * @param {CompleterOption} option a completer option.\n *\n * @return {string[]} whether or not the given option is disabled.\n */\n\n/**\n * @callback FnGetOptionLabel\n * @param {CompleterOption} option a completer option.\n *\n * @return {(string|Array.<(string|Component)>)} list of react components to render.\n */\n\n/**\n * @callback FnAllowContext\n * @param {string} before the string before the auto complete trigger and query.\n * @param {string} after  the string after the autocomplete trigger and query.\n *\n * @return {boolean} true if the completer can handle.\n */\n\n/**\n * @typedef {Object} OptionCompletion\n * @property {'insert-at-caret'|'replace'} action the intended placement of the completion.\n * @property {OptionCompletionValue} value the completion value.\n */\n\n/**\n * A completion value.\n *\n * @typedef {(string|WPElement|Object)} OptionCompletionValue\n */\n\n/**\n * @callback FnGetOptionCompletion\n * @param {CompleterOption} value the value of the completer option.\n * @param {string} query the text value of the autocomplete query.\n *\n * @return {(OptionCompletion|OptionCompletionValue)} the completion for the given option. If an\n * \t\t\t\t\t\t\t\t\t\t\t\t\t   OptionCompletionValue is returned, the\n * \t\t\t\t\t\t\t\t\t\t\t\t\t   completion action defaults to `insert-at-caret`.\n */\n\n/**\n * @typedef {Object} Completer\n * @property {string} name a way to identify a completer, useful for selective overriding.\n * @property {?string} className A class to apply to the popup menu.\n * @property {string} triggerPrefix the prefix that will display the menu.\n * @property {(CompleterOption[]|FnGetOptions)} options the completer options or a function to get them.\n * @property {?FnGetOptionKeywords} getOptionKeywords get the keywords for a given option.\n * @property {?FnIsOptionDisabled} isOptionDisabled get whether or not the given option is disabled.\n * @property {FnGetOptionLabel} getOptionLabel get the label for a given option.\n * @property {?FnAllowContext} allowContext filter the context under which the autocomplete activates.\n * @property {FnGetOptionCompletion} getOptionCompletion get the completion associated with a given option.\n */\n\nfunction filterOptions( search, options = [], maxResults = 10 ) {\n\tconst filtered = [];\n\tfor ( let i = 0; i < options.length; i++ ) {\n\t\tconst option = options[ i ];\n\n\t\t// Merge label into keywords\n\t\tlet { keywords = [] } = option;\n\t\tif ( 'string' === typeof option.label ) {\n\t\t\tkeywords = [ ...keywords, option.label ];\n\t\t}\n\n\t\tconst isMatch = keywords.some( ( keyword ) => search.test( deburr( keyword ) ) );\n\t\tif ( ! isMatch ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfiltered.push( option );\n\n\t\t// Abort early if max reached\n\t\tif ( filtered.length === maxResults ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn filtered;\n}\n\nfunction getCaretRect() {\n\tconst selection = window.getSelection();\n\tconst range = selection.rangeCount ? selection.getRangeAt( 0 ) : null;\n\n\tif ( range ) {\n\t\treturn getRectangleFromRange( range );\n\t}\n}\n\nexport class Autocomplete extends Component {\n\tstatic getInitialState() {\n\t\treturn {\n\t\t\tsearch: /./,\n\t\t\tselectedIndex: 0,\n\t\t\tsuppress: undefined,\n\t\t\topen: undefined,\n\t\t\tquery: undefined,\n\t\t\tfilteredOptions: [],\n\t\t};\n\t}\n\n\tconstructor() {\n\t\tsuper( ...arguments );\n\n\t\tthis.select = this.select.bind( this );\n\t\tthis.reset = this.reset.bind( this );\n\t\tthis.resetWhenSuppressed = this.resetWhenSuppressed.bind( this );\n\t\tthis.handleKeyDown = this.handleKeyDown.bind( this );\n\t\tthis.debouncedLoadOptions = debounce( this.loadOptions, 250 );\n\n\t\tthis.state = this.constructor.getInitialState();\n\t}\n\n\tinsertCompletion( replacement ) {\n\t\tconst { open, query } = this.state;\n\t\tconst { record, onChange } = this.props;\n\t\tconst end = record.start;\n\t\tconst start = end - open.triggerPrefix.length - query.length;\n\t\tconst toInsert = create( { html: renderToString( replacement ) } );\n\n\t\tonChange( insert( record, toInsert, start, end ) );\n\t}\n\n\tselect( option ) {\n\t\tconst { onReplace } = this.props;\n\t\tconst { open, query } = this.state;\n\t\tconst { getOptionCompletion } = open || {};\n\n\t\tif ( option.isDisabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( getOptionCompletion ) {\n\t\t\tconst completion = getOptionCompletion( option.value, query );\n\n\t\t\tconst { action, value } =\n\t\t\t\t( undefined === completion.action || undefined === completion.value ) ?\n\t\t\t\t\t{ action: 'insert-at-caret', value: completion } :\n\t\t\t\t\tcompletion;\n\n\t\t\tif ( 'replace' === action ) {\n\t\t\t\tonReplace( [ value ] );\n\t\t\t} else if ( 'insert-at-caret' === action ) {\n\t\t\t\tthis.insertCompletion( value );\n\t\t\t}\n\t\t}\n\n\t\t// Reset autocomplete state after insertion rather than before\n\t\t// so insertion events don't cause the completion menu to redisplay.\n\t\tthis.reset();\n\t}\n\n\treset() {\n\t\tthis.setState( this.constructor.getInitialState() );\n\t}\n\n\tresetWhenSuppressed() {\n\t\tconst { open, suppress } = this.state;\n\t\tif ( open && suppress === open.idx ) {\n\t\t\tthis.reset();\n\t\t}\n\t}\n\n\tannounce( filteredOptions ) {\n\t\tconst { debouncedSpeak } = this.props;\n\t\tif ( ! debouncedSpeak ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( !! filteredOptions.length ) {\n\t\t\tdebouncedSpeak( sprintf( _n(\n\t\t\t\t'%d result found, use up and down arrow keys to navigate.',\n\t\t\t\t'%d results found, use up and down arrow keys to navigate.',\n\t\t\t\tfilteredOptions.length\n\t\t\t), filteredOptions.length ), 'assertive' );\n\t\t} else {\n\t\t\tdebouncedSpeak( __( 'No results.' ), 'assertive' );\n\t\t}\n\t}\n\n\t/**\n\t * Load options for an autocompleter.\n\t *\n\t * @param {Completer} completer The autocompleter.\n\t * @param {string}    query     The query, if any.\n\t */\n\tloadOptions( completer, query ) {\n\t\tconst { options } = completer;\n\n\t\t/*\n\t\t * We support both synchronous and asynchronous retrieval of completer options\n\t\t * but internally treat all as async so we maintain a single, consistent code path.\n\t\t *\n\t\t * Because networks can be slow, and the internet is wonderfully unpredictable,\n\t\t * we don't want two promises updating the state at once. This ensures that only\n\t\t * the most recent promise will act on `optionsData`. This doesn't use the state\n\t\t * because `setState` is batched, and so there's no guarantee that setting\n\t\t * `activePromise` in the state would result in it actually being in `this.state`\n\t\t * before the promise resolves and we check to see if this is the active promise or not.\n\t\t */\n\t\tconst promise = this.activePromise = Promise.resolve(\n\t\t\ttypeof options === 'function' ? options( query ) : options\n\t\t).then( ( optionsData ) => {\n\t\t\tif ( promise !== this.activePromise ) {\n\t\t\t\t// Another promise has become active since this one was asked to resolve, so do nothing,\n\t\t\t\t// or else we might end triggering a race condition updating the state.\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst keyedOptions = optionsData.map( ( optionData, optionIndex ) => ( {\n\t\t\t\tkey: `${ completer.idx }-${ optionIndex }`,\n\t\t\t\tvalue: optionData,\n\t\t\t\tlabel: completer.getOptionLabel( optionData ),\n\t\t\t\tkeywords: completer.getOptionKeywords ? completer.getOptionKeywords( optionData ) : [],\n\t\t\t\tisDisabled: completer.isOptionDisabled ? completer.isOptionDisabled( optionData ) : false,\n\t\t\t} ) );\n\n\t\t\tconst filteredOptions = filterOptions( this.state.search, keyedOptions );\n\t\t\tconst selectedIndex = filteredOptions.length === this.state.filteredOptions.length ? this.state.selectedIndex : 0;\n\t\t\tthis.setState( {\n\t\t\t\t[ 'options_' + completer.idx ]: keyedOptions,\n\t\t\t\tfilteredOptions,\n\t\t\t\tselectedIndex,\n\t\t\t} );\n\t\t\tthis.announce( filteredOptions );\n\t\t} );\n\t}\n\n\thandleKeyDown( event ) {\n\t\tconst { open, suppress, selectedIndex, filteredOptions } = this.state;\n\t\tif ( ! open ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( suppress === open.idx ) {\n\t\t\tswitch ( event.keyCode ) {\n\t\t\t\t// cancel popup suppression on CTRL+SPACE\n\t\t\t\tcase SPACE:\n\t\t\t\t\tconst { ctrlKey, shiftKey, altKey, metaKey } = event;\n\t\t\t\t\tif ( ctrlKey && ! ( shiftKey || altKey || metaKey ) ) {\n\t\t\t\t\t\tthis.setState( { suppress: undefined } );\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\t// reset on cursor movement\n\t\t\t\tcase UP:\n\t\t\t\tcase DOWN:\n\t\t\t\tcase LEFT:\n\t\t\t\tcase RIGHT:\n\t\t\t\t\tthis.reset();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif ( filteredOptions.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\t\tlet nextSelectedIndex;\n\t\tswitch ( event.keyCode ) {\n\t\t\tcase UP:\n\t\t\t\tnextSelectedIndex = ( selectedIndex === 0 ? filteredOptions.length : selectedIndex ) - 1;\n\t\t\t\tthis.setState( { selectedIndex: nextSelectedIndex } );\n\t\t\t\tbreak;\n\n\t\t\tcase DOWN:\n\t\t\t\tnextSelectedIndex = ( selectedIndex + 1 ) % filteredOptions.length;\n\t\t\t\tthis.setState( { selectedIndex: nextSelectedIndex } );\n\t\t\t\tbreak;\n\n\t\t\tcase ESCAPE:\n\t\t\t\tthis.setState( { suppress: open.idx } );\n\t\t\t\tbreak;\n\n\t\t\tcase ENTER:\n\t\t\t\tthis.select( filteredOptions[ selectedIndex ] );\n\t\t\t\tbreak;\n\n\t\t\tcase LEFT:\n\t\t\tcase RIGHT:\n\t\t\t\tthis.reset();\n\t\t\t\treturn;\n\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\n\t\t// Any handled keycode should prevent original behavior. This relies on\n\t\t// the early return in the default case.\n\t\tevent.preventDefault();\n\t}\n\n\tcomponentDidUpdate( prevProps ) {\n\t\tconst { record, completers } = this.props;\n\t\tconst { record: prevRecord } = prevProps;\n\n\t\tif ( isCollapsed( record ) ) {\n\t\t\tconst text = deburr( getTextContent( slice( record, 0 ) ) );\n\t\t\tconst prevText = deburr( getTextContent( slice( prevRecord, 0 ) ) );\n\n\t\t\tif ( text !== prevText ) {\n\t\t\t\tconst textAfterSelection = getTextContent( slice( record, undefined, getTextContent( record ).length ) );\n\t\t\t\tconst allCompleters = map( completers, ( completer, idx ) => ( { ...completer, idx } ) );\n\t\t\t\tconst open = find( allCompleters, ( { triggerPrefix, allowContext } ) => {\n\t\t\t\t\tconst index = text.lastIndexOf( triggerPrefix );\n\n\t\t\t\t\tif ( index === -1 ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( allowContext && ! allowContext( text.slice( 0, index ), textAfterSelection ) ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn /^\\S*$/.test( text.slice( index + triggerPrefix.length ) );\n\t\t\t\t} );\n\n\t\t\t\tif ( ! open ) {\n\t\t\t\t\tthis.reset();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst safeTrigger = escapeRegExp( open.triggerPrefix );\n\t\t\t\tconst match = text.match( new RegExp( `${ safeTrigger }(\\\\S*)$` ) );\n\t\t\t\tconst query = match && match[ 1 ];\n\t\t\t\tconst { open: wasOpen, suppress: wasSuppress, query: wasQuery } = this.state;\n\n\t\t\t\tif ( open && ( ! wasOpen || open.idx !== wasOpen.idx || query !== wasQuery ) ) {\n\t\t\t\t\tif ( open.isDebounced ) {\n\t\t\t\t\t\tthis.debouncedLoadOptions( open, query );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.loadOptions( open, query );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// create a regular expression to filter the options\n\t\t\t\tconst search = open ? new RegExp( '(?:\\\\b|\\\\s|^)' + escapeRegExp( query ), 'i' ) : /./;\n\t\t\t\t// filter the options we already have\n\t\t\t\tconst filteredOptions = open ? filterOptions( search, this.state[ 'options_' + open.idx ] ) : [];\n\t\t\t\t// check if we should still suppress the popover\n\t\t\t\tconst suppress = ( open && wasSuppress === open.idx ) ? wasSuppress : undefined;\n\t\t\t\t// update the state\n\t\t\t\tif ( wasOpen || open ) {\n\t\t\t\t\tthis.setState( { selectedIndex: 0, filteredOptions, suppress, search, open, query } );\n\t\t\t\t}\n\t\t\t\t// announce the count of filtered options but only if they have loaded\n\t\t\t\tif ( open && this.state[ 'options_' + open.idx ] ) {\n\t\t\t\t\tthis.announce( filteredOptions );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.debouncedLoadOptions.cancel();\n\t}\n\n\trender() {\n\t\tconst { children, instanceId, isSelected } = this.props;\n\t\tconst { open, suppress, selectedIndex, filteredOptions } = this.state;\n\t\tconst { key: selectedKey = '' } = filteredOptions[ selectedIndex ] || {};\n\t\tconst { className, idx } = open || {};\n\t\tconst isExpanded = suppress !== idx && filteredOptions.length > 0;\n\t\tconst listBoxId = isExpanded ? `components-autocomplete-listbox-${ instanceId }` : null;\n\t\tconst activeId = isExpanded ? `components-autocomplete-item-${ instanceId }-${ selectedKey }` : null;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{ children( {\n\t\t\t\t\tisExpanded,\n\t\t\t\t\tlistBoxId,\n\t\t\t\t\tactiveId,\n\t\t\t\t\tonKeyDown: this.handleKeyDown,\n\t\t\t\t} ) }\n\t\t\t\t{ isExpanded && isSelected && (\n\t\t\t\t\t<Popover\n\t\t\t\t\t\tfocusOnMount={ false }\n\t\t\t\t\t\tonClose={ this.reset }\n\t\t\t\t\t\tposition=\"top right\"\n\t\t\t\t\t\tclassName=\"components-autocomplete__popover\"\n\t\t\t\t\t\tgetAnchorRect={ getCaretRect }\n\t\t\t\t\t>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tid={ listBoxId }\n\t\t\t\t\t\t\trole=\"listbox\"\n\t\t\t\t\t\t\tclassName=\"components-autocomplete__results\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ isExpanded && map( filteredOptions, ( option, index ) => (\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tkey={ option.key }\n\t\t\t\t\t\t\t\t\tid={ `components-autocomplete-item-${ instanceId }-${ option.key }` }\n\t\t\t\t\t\t\t\t\trole=\"option\"\n\t\t\t\t\t\t\t\t\taria-selected={ index === selectedIndex }\n\t\t\t\t\t\t\t\t\tdisabled={ option.isDisabled }\n\t\t\t\t\t\t\t\t\tclassName={ classnames( 'components-autocomplete__result', className, {\n\t\t\t\t\t\t\t\t\t\t'is-selected': index === selectedIndex,\n\t\t\t\t\t\t\t\t\t} ) }\n\t\t\t\t\t\t\t\t\tonClick={ () => this.select( option ) }\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{ option.label }\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t) ) }\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Popover>\n\t\t\t\t) }\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default compose( [\n\twithSpokenMessages,\n\twithInstanceId,\n] )( Autocomplete );\n"]}