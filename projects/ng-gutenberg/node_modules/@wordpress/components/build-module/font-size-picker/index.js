import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useState } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import Button from '../button';
import RangeControl from '../range-control';
import SelectControl from '../select-control';

function getSelectValueFromFontSize(fontSizes, value) {
  if (value) {
    var fontSizeValue = fontSizes.find(function (font) {
      return font.size === value;
    });
    return fontSizeValue ? fontSizeValue.slug : 'custom';
  }

  return 'normal';
}

function getSelectOptions(optionsArray) {
  return [].concat(_toConsumableArray(optionsArray.map(function (option) {
    return {
      value: option.slug,
      label: option.name
    };
  })), [{
    value: 'custom',
    label: __('Custom')
  }]);
}

function FontSizePicker(_ref) {
  var fallbackFontSize = _ref.fallbackFontSize,
      _ref$fontSizes = _ref.fontSizes,
      fontSizes = _ref$fontSizes === void 0 ? [] : _ref$fontSizes,
      _ref$disableCustomFon = _ref.disableCustomFontSizes,
      disableCustomFontSizes = _ref$disableCustomFon === void 0 ? false : _ref$disableCustomFon,
      onChange = _ref.onChange,
      value = _ref.value,
      _ref$withSlider = _ref.withSlider,
      withSlider = _ref$withSlider === void 0 ? false : _ref$withSlider;

  var _useState = useState(getSelectValueFromFontSize(fontSizes, value)),
      _useState2 = _slicedToArray(_useState, 2),
      currentSelectValue = _useState2[0],
      setCurrentSelectValue = _useState2[1];

  if (disableCustomFontSizes && !fontSizes.length) {
    return null;
  }

  var onChangeValue = function onChangeValue(event) {
    var newValue = event.target.value;
    setCurrentSelectValue(getSelectValueFromFontSize(fontSizes, Number(newValue)));

    if (newValue === '') {
      onChange(undefined);
      return;
    }

    onChange(Number(newValue));
  };

  var onSelectChangeValue = function onSelectChangeValue(eventValue) {
    setCurrentSelectValue(eventValue);
    var selectedFont = fontSizes.find(function (font) {
      return font.slug === eventValue;
    });

    if (selectedFont) {
      onChange(selectedFont.size);
    }
  };

  return createElement("fieldset", null, createElement("legend", null, __('Font Size')), createElement("div", {
    className: "components-font-size-picker__controls"
  }, fontSizes.length > 0 && createElement(SelectControl, {
    className: 'components-font-size-picker__select',
    label: 'Choose preset',
    hideLabelFromVision: true,
    value: currentSelectValue,
    onChange: onSelectChangeValue,
    options: getSelectOptions(fontSizes)
  }), !withSlider && !disableCustomFontSizes && createElement("input", {
    className: "components-range-control__number",
    type: "number",
    onChange: onChangeValue,
    "aria-label": __('Custom'),
    value: value || ''
  }), createElement(Button, {
    className: "components-color-palette__clear",
    type: "button",
    disabled: value === undefined,
    onClick: function onClick() {
      onChange(undefined);
      setCurrentSelectValue(getSelectValueFromFontSize(fontSizes, undefined));
    },
    isSmall: true,
    isDefault: true
  }, __('Reset'))), withSlider && createElement(RangeControl, {
    className: "components-font-size-picker__custom-input",
    label: __('Custom Size'),
    value: value || '',
    initialPosition: fallbackFontSize,
    onChange: onChange,
    min: 12,
    max: 100,
    beforeIcon: "editor-textcolor",
    afterIcon: "editor-textcolor"
  }));
}

export default FontSizePicker;
//# sourceMappingURL=index.js.map