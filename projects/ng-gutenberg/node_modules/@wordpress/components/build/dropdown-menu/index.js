"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _keycodes = require("@wordpress/keycodes");

var _deprecated = _interopRequireDefault(require("@wordpress/deprecated"));

var _iconButton = _interopRequireDefault(require("../icon-button"));

var _dropdown = _interopRequireDefault(require("../dropdown"));

var _navigableContainer = require("../navigable-container");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function mergeProps() {
  var defaultProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var mergedProps = (0, _objectSpread2.default)({}, defaultProps, props);

  if (props.className && defaultProps.className) {
    mergedProps.className = (0, _classnames.default)(props.className, defaultProps.className);
  }

  return mergedProps;
}

function DropdownMenu(_ref) {
  var children = _ref.children,
      className = _ref.className,
      controls = _ref.controls,
      _ref$hasArrowIndicato = _ref.hasArrowIndicator,
      hasArrowIndicator = _ref$hasArrowIndicato === void 0 ? false : _ref$hasArrowIndicato,
      _ref$icon = _ref.icon,
      icon = _ref$icon === void 0 ? 'menu' : _ref$icon,
      label = _ref.label,
      popoverProps = _ref.popoverProps,
      toggleProps = _ref.toggleProps,
      menuProps = _ref.menuProps,
      menuLabel = _ref.menuLabel,
      position = _ref.position;

  if (menuLabel) {
    (0, _deprecated.default)('`menuLabel` prop in `DropdownComponent`', {
      alternative: '`menuProps` object and its `aria-label` property',
      plugin: 'Gutenberg'
    });
  }

  if (position) {
    (0, _deprecated.default)('`position` prop in `DropdownComponent`', {
      alternative: '`popoverProps` object and its `position` property',
      plugin: 'Gutenberg'
    });
  }

  if ((0, _lodash.isEmpty)(controls) && !(0, _lodash.isFunction)(children)) {
    return null;
  } // Normalize controls to nested array of objects (sets of controls)


  var controlSets;

  if (!(0, _lodash.isEmpty)(controls)) {
    controlSets = controls;

    if (!Array.isArray(controlSets[0])) {
      controlSets = [controlSets];
    }
  }

  var mergedPopoverProps = mergeProps({
    className: 'components-dropdown-menu__popover',
    position: position
  }, popoverProps);
  return (0, _element.createElement)(_dropdown.default, {
    className: (0, _classnames.default)('components-dropdown-menu', className),
    popoverProps: mergedPopoverProps,
    renderToggle: function renderToggle(_ref2) {
      var isOpen = _ref2.isOpen,
          onToggle = _ref2.onToggle;

      var openOnArrowDown = function openOnArrowDown(event) {
        if (!isOpen && event.keyCode === _keycodes.DOWN) {
          event.preventDefault();
          event.stopPropagation();
          onToggle();
        }
      };

      var mergedToggleProps = mergeProps({
        className: (0, _classnames.default)('components-dropdown-menu__toggle', {
          'is-opened': isOpen
        }),
        tooltip: label
      }, toggleProps);
      return (0, _element.createElement)(_iconButton.default, (0, _extends2.default)({}, mergedToggleProps, {
        icon: icon,
        onClick: onToggle,
        onKeyDown: openOnArrowDown,
        "aria-haspopup": "true",
        "aria-expanded": isOpen,
        label: label
      }), (!icon || hasArrowIndicator) && (0, _element.createElement)("span", {
        className: "components-dropdown-menu__indicator"
      }));
    },
    renderContent: function renderContent(props) {
      var mergedMenuProps = mergeProps({
        'aria-label': menuLabel || label,
        className: 'components-dropdown-menu__menu'
      }, menuProps);
      return (0, _element.createElement)(_navigableContainer.NavigableMenu, (0, _extends2.default)({}, mergedMenuProps, {
        role: "menu"
      }), (0, _lodash.isFunction)(children) ? children(props) : null, (0, _lodash.flatMap)(controlSets, function (controlSet, indexOfSet) {
        return controlSet.map(function (control, indexOfControl) {
          return (0, _element.createElement)(_iconButton.default, {
            key: [indexOfSet, indexOfControl].join(),
            onClick: function onClick(event) {
              event.stopPropagation();
              props.onClose();

              if (control.onClick) {
                control.onClick();
              }
            },
            className: (0, _classnames.default)('components-dropdown-menu__menu-item', {
              'has-separator': indexOfSet > 0 && indexOfControl === 0,
              'is-active': control.isActive
            }),
            icon: control.icon,
            role: "menuitem",
            disabled: control.isDisabled
          }, control.title);
        });
      }));
    }
  });
}

var _default = DropdownMenu;
exports.default = _default;
//# sourceMappingURL=index.js.map