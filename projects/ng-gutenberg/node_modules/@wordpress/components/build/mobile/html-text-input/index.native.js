"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HTMLTextInput = void 0;

var _element = require("@wordpress/element");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _reactNative = require("react-native");

var _i18n = require("@wordpress/i18n");

var _blocks = require("@wordpress/blocks");

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _container = _interopRequireDefault(require("./container"));

var _style = _interopRequireDefault(require("./style.scss"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var HTMLTextInput =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(HTMLTextInput, _Component);

  function HTMLTextInput() {
    var _this;

    (0, _classCallCheck2.default)(this, HTMLTextInput);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(HTMLTextInput).apply(this, arguments));
    _this.edit = _this.edit.bind((0, _assertThisInitialized2.default)(_this));
    _this.stopEditing = _this.stopEditing.bind((0, _assertThisInitialized2.default)(_this));
    _this.state = {
      isDirty: false,
      value: ''
    };
    return _this;
  }

  (0, _createClass2.default)(HTMLTextInput, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      //TODO: Blocking main thread
      this.stopEditing();
    }
  }, {
    key: "edit",
    value: function edit(html) {
      this.props.onChange(html);
      this.setState({
        value: html,
        isDirty: true
      });
    }
  }, {
    key: "stopEditing",
    value: function stopEditing() {
      if (this.state.isDirty) {
        this.props.onPersist(this.state.value);
        this.setState({
          isDirty: false
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      return (0, _element.createElement)(_container.default, {
        parentHeight: this.props.parentHeight
      }, (0, _element.createElement)(_reactNative.TextInput, {
        autoCorrect: false,
        accessibilityLabel: "html-view-title",
        textAlignVertical: "center",
        numberOfLines: 1,
        style: _style.default.htmlViewTitle,
        value: this.props.title,
        placeholder: (0, _i18n.__)('Add title'),
        onChangeText: this.props.editTitle
      }), (0, _element.createElement)(_reactNative.TextInput, {
        autoCorrect: false,
        accessibilityLabel: "html-view-content",
        textAlignVertical: "top",
        multiline: true,
        style: _style.default.htmlView,
        value: this.state.value,
        onChangeText: this.edit,
        onBlur: this.stopEditing,
        placeholder: (0, _i18n.__)('Start writingâ€¦'),
        scrollEnabled: _container.default.scrollEnabled
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (state.isDirty) {
        return null;
      }

      return {
        value: props.value,
        isDirty: false
      };
    }
  }]);
  return HTMLTextInput;
}(_element.Component);

exports.HTMLTextInput = HTMLTextInput;

var _default = (0, _compose.compose)([(0, _data.withSelect)(function (select) {
  var _select = select('core/editor'),
      getEditedPostAttribute = _select.getEditedPostAttribute,
      getEditedPostContent = _select.getEditedPostContent;

  return {
    title: getEditedPostAttribute('title'),
    value: getEditedPostContent()
  };
}), (0, _data.withDispatch)(function (dispatch) {
  var _dispatch = dispatch('core/block-editor'),
      resetBlocks = _dispatch.resetBlocks;

  var _dispatch2 = dispatch('core/editor'),
      editPost = _dispatch2.editPost;

  return {
    editTitle: function editTitle(title) {
      editPost({
        title: title
      });
    },
    onChange: function onChange(content) {
      editPost({
        content: content
      });
    },
    onPersist: function onPersist(content) {
      resetBlocks((0, _blocks.parse)(content));
    }
  };
}), _compose.withInstanceId])(HTMLTextInput);

exports.default = _default;
//# sourceMappingURL=index.native.js.map