{"version":3,"sources":["@wordpress/notices/src/store/actions.js"],"names":["createNotice","uniqueId","DEFAULT_CONTEXT","DEFAULT_STATUS","status","content","options","speak","isDismissible","context","id","actions","type","__unstableHTML","String","message","ariaLive","notice","createSuccessNotice","createInfoNotice","createErrorNotice","createWarningNotice","removeNotice"],"mappings":";;;;yBAgCiBA,Y;;AAhCjB;;;AAGA,SAASC,QAAT,QAAyB,QAAzB;AAEA;;;;AAGA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,aAAhD;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,SAAUH,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAwBI,UAAAA,MAAxB,2DAAiCD,cAAjC;AAAiDE,UAAAA,OAAjD;AAA0DC,UAAAA,OAA1D,2DAAoE,EAApE;AAAA,2BASFA,OATE,CAELC,KAFK,EAELA,KAFK,+BAEG,IAFH,2CASFD,OATE,CAGLE,aAHK,EAGLA,aAHK,sCAGW,IAHX,6CASFF,OATE,CAILG,OAJK,EAILA,OAJK,iCAIKP,eAJL,mCASFI,OATE,CAKLI,EALK,EAKLA,EALK,4BAKAT,QAAQ,CAAEQ,OAAF,CALR,mCASFH,OATE,CAMLK,OANK,EAMLA,OANK,iCAMK,EANL,qCASFL,OATE,CAOLM,IAPK,EAOLA,IAPK,8BAOE,SAPF,kBAQLC,cARK,GASFP,OATE,CAQLO,cARK,EAWN;AACA;AACA;;AACAR,UAAAA,OAAO,GAAGS,MAAM,CAAET,OAAF,CAAhB;;AAdM,eAgBDE,KAhBC;AAAA;AAAA;AAAA;;AAAA;AAiBL,iBAAM;AACLK,YAAAA,IAAI,EAAE,OADD;AAELG,YAAAA,OAAO,EAAEV,OAFJ;AAGLW,YAAAA,QAAQ,EAAEJ,IAAI,KAAK,UAAT,GAAsB,QAAtB,GAAiC;AAHtC,WAAN;;AAjBK;AAAA;AAwBN,iBAAM;AACLA,YAAAA,IAAI,EAAE,eADD;AAELH,YAAAA,OAAO,EAAPA,OAFK;AAGLQ,YAAAA,MAAM,EAAE;AACPP,cAAAA,EAAE,EAAFA,EADO;AAEPN,cAAAA,MAAM,EAANA,MAFO;AAGPC,cAAAA,OAAO,EAAPA,OAHO;AAIPQ,cAAAA,cAAc,EAAdA,cAJO;AAKPL,cAAAA,aAAa,EAAbA,aALO;AAMPG,cAAAA,OAAO,EAAPA,OANO;AAOPC,cAAAA,IAAI,EAAJA;AAPO;AAHH,WAAN;;AAxBM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuCP;;;;;;;;;;;;AAWA,OAAO,SAASM,mBAAT,CAA8Bb,OAA9B,EAAuCC,OAAvC,EAAiD;AACvD,SAAON,YAAY,CAAE,SAAF,EAAaK,OAAb,EAAsBC,OAAtB,CAAnB;AACA;AAED;;;;;;;;;;;;AAWA,OAAO,SAASa,gBAAT,CAA2Bd,OAA3B,EAAoCC,OAApC,EAA8C;AACpD,SAAON,YAAY,CAAE,MAAF,EAAUK,OAAV,EAAmBC,OAAnB,CAAnB;AACA;AAED;;;;;;;;;;;;AAWA,OAAO,SAASc,iBAAT,CAA4Bf,OAA5B,EAAqCC,OAArC,EAA+C;AACrD,SAAON,YAAY,CAAE,OAAF,EAAWK,OAAX,EAAoBC,OAApB,CAAnB;AACA;AAED;;;;;;;;;;;;AAWA,OAAO,SAASe,mBAAT,CAA8BhB,OAA9B,EAAuCC,OAAvC,EAAiD;AACvD,SAAON,YAAY,CAAE,SAAF,EAAaK,OAAb,EAAsBC,OAAtB,CAAnB;AACA;AAED;;;;;;;;;;AASA,OAAO,SAASgB,YAAT,CAAuBZ,EAAvB,EAAuD;AAAA,MAA5BD,OAA4B,uEAAlBP,eAAkB;AAC7D,SAAO;AACNU,IAAAA,IAAI,EAAE,eADA;AAENF,IAAAA,EAAE,EAAFA,EAFM;AAGND,IAAAA,OAAO,EAAPA;AAHM,GAAP;AAKA","sourcesContent":["/**\n * External dependencies\n */\nimport { uniqueId } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport { DEFAULT_CONTEXT, DEFAULT_STATUS } from './constants';\n\n/**\n * Yields action objects used in signalling that a notice is to be created.\n *\n * @param {string}                [status='info']              Notice status.\n * @param {string}                content                      Notice message.\n * @param {Object}                [options]                    Notice options.\n * @param {string}                [options.context='global']   Context under which to\n *                                                             group notice.\n * @param {string}                [options.id]                 Identifier for notice.\n *                                                             Automatically assigned\n *                                                             if not specified.\n * @param {boolean}               [options.isDismissible=true] Whether the notice can\n *                                                             be dismissed by user.\n * @param {string}                [options.type='default']     Type of notice, one of\n *                                                             `default`, or `snackbar`.\n * @param {boolean}               [options.speak=true]         Whether the notice\n *                                                             content should be\n *                                                             announced to screen\n *                                                             readers.\n * @param {Array<WPNoticeAction>} [options.actions]            User actions to be\n *                                                             presented with notice.\n */\nexport function* createNotice( status = DEFAULT_STATUS, content, options = {} ) {\n\tconst {\n\t\tspeak = true,\n\t\tisDismissible = true,\n\t\tcontext = DEFAULT_CONTEXT,\n\t\tid = uniqueId( context ),\n\t\tactions = [],\n\t\ttype = 'default',\n\t\t__unstableHTML,\n\t} = options;\n\n\t// The supported value shape of content is currently limited to plain text\n\t// strings. To avoid setting expectation that e.g. a WPElement could be\n\t// supported, cast to a string.\n\tcontent = String( content );\n\n\tif ( speak ) {\n\t\tyield {\n\t\t\ttype: 'SPEAK',\n\t\t\tmessage: content,\n\t\t\tariaLive: type === 'snackbar' ? 'polite' : 'assertive',\n\t\t};\n\t}\n\n\tyield {\n\t\ttype: 'CREATE_NOTICE',\n\t\tcontext,\n\t\tnotice: {\n\t\t\tid,\n\t\t\tstatus,\n\t\t\tcontent,\n\t\t\t__unstableHTML,\n\t\t\tisDismissible,\n\t\t\tactions,\n\t\t\ttype,\n\t\t},\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a success notice is to be\n * created. Refer to `createNotice` for options documentation.\n *\n * @see createNotice\n *\n * @param {string} content   Notice message.\n * @param {Object} [options] Optional notice options.\n *\n * @return {Object} Action object.\n */\nexport function createSuccessNotice( content, options ) {\n\treturn createNotice( 'success', content, options );\n}\n\n/**\n * Returns an action object used in signalling that an info notice is to be\n * created. Refer to `createNotice` for options documentation.\n *\n * @see createNotice\n *\n * @param {string} content   Notice message.\n * @param {Object} [options] Optional notice options.\n *\n * @return {Object} Action object.\n */\nexport function createInfoNotice( content, options ) {\n\treturn createNotice( 'info', content, options );\n}\n\n/**\n * Returns an action object used in signalling that an error notice is to be\n * created. Refer to `createNotice` for options documentation.\n *\n * @see createNotice\n *\n * @param {string} content   Notice message.\n * @param {Object} [options] Optional notice options.\n *\n * @return {Object} Action object.\n */\nexport function createErrorNotice( content, options ) {\n\treturn createNotice( 'error', content, options );\n}\n\n/**\n * Returns an action object used in signalling that a warning notice is to be\n * created. Refer to `createNotice` for options documentation.\n *\n * @see createNotice\n *\n * @param {string} content   Notice message.\n * @param {Object} [options] Optional notice options.\n *\n * @return {Object} Action object.\n */\nexport function createWarningNotice( content, options ) {\n\treturn createNotice( 'warning', content, options );\n}\n\n/**\n * Returns an action object used in signalling that a notice is to be removed.\n *\n * @param {string} id                 Notice unique identifier.\n * @param {string} [context='global'] Optional context (grouping) in which the notice is\n *                                    intended to appear. Defaults to default context.\n *\n * @return {Object} Action object.\n */\nexport function removeNotice( id, context = DEFAULT_CONTEXT ) {\n\treturn {\n\t\ttype: 'REMOVE_NOTICE',\n\t\tid,\n\t\tcontext,\n\t};\n}\n"]}