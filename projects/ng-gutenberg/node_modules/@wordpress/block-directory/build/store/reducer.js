"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.downloadableBlocks = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _data = require("@wordpress/data");

/**
 * WordPress dependencies
 */

/**
 * Reducer returning an array of downloadable blocks.
 *
 * @param {Object} state  Current state.
 * @param {Object} action Dispatched action.
 *
 * @return {Object} Updated state.
 */
var downloadableBlocks = function downloadableBlocks() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    results: {},
    hasPermission: true,
    filterValue: undefined,
    isRequestingDownloadableBlocks: true,
    installedBlockTypes: []
  };
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case 'FETCH_DOWNLOADABLE_BLOCKS':
      return (0, _objectSpread2.default)({}, state, {
        isRequestingDownloadableBlocks: true
      });

    case 'RECEIVE_DOWNLOADABLE_BLOCKS':
      return (0, _objectSpread2.default)({}, state, {
        results: Object.assign({}, state.results, (0, _defineProperty2.default)({}, action.filterValue, action.downloadableBlocks)),
        hasPermission: true,
        isRequestingDownloadableBlocks: false
      });

    case 'SET_INSTALL_BLOCKS_PERMISSION':
      return (0, _objectSpread2.default)({}, state, {
        items: action.hasPermission ? state.items : [],
        hasPermission: action.hasPermission
      });

    case 'ADD_INSTALLED_BLOCK_TYPE':
      return (0, _objectSpread2.default)({}, state, {
        installedBlockTypes: [].concat((0, _toConsumableArray2.default)(state.installedBlockTypes), [action.item])
      });

    case 'REMOVE_INSTALLED_BLOCK_TYPE':
      return (0, _objectSpread2.default)({}, state, {
        installedBlockTypes: state.installedBlockTypes.filter(function (blockType) {
          return blockType.name !== action.item.name;
        })
      });
  }

  return state;
};

exports.downloadableBlocks = downloadableBlocks;

var _default = (0, _data.combineReducers)({
  downloadableBlocks: downloadableBlocks
});

exports.default = _default;
//# sourceMappingURL=reducer.js.map