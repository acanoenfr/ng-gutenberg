import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { invoke } from 'lodash';
/**
 * WordPress dependencies
 */

import { Dropdown, ExternalLink, IconButton, PanelBody, TextareaControl, TextControl, ToggleControl } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { InnerBlocks, InspectorControls, PlainText } from '@wordpress/block-editor';
import { Fragment, useCallback, useRef } from '@wordpress/element';
/**
 * Internal dependencies
 */

import MenuItemActions from './menu-item-actions';
var POPOVER_PROPS = {
  noArrow: true
};

function NavigationMenuItemEdit(_ref) {
  var attributes = _ref.attributes,
      clientId = _ref.clientId,
      isSelected = _ref.isSelected,
      setAttributes = _ref.setAttributes;
  var plainTextRef = useRef(null);
  var onEditLableClicked = useCallback(function (onClose) {
    return function () {
      onClose();
      invoke(plainTextRef, ['current', 'textarea', 'focus']);
    };
  }, [plainTextRef]);
  var content;

  if (isSelected) {
    content = createElement("div", {
      className: "wp-block-navigation-menu-item__edit-container"
    }, createElement(PlainText, {
      ref: plainTextRef,
      className: "wp-block-navigation-menu-item__field",
      value: attributes.label,
      onChange: function onChange(label) {
        return setAttributes({
          label: label
        });
      },
      "aria-label": __('Navigation Label'),
      maxRows: 1
    }), createElement(Dropdown, {
      contentClassName: "wp-block-navigation-menu-item__dropdown-content",
      position: "bottom left",
      popoverProps: POPOVER_PROPS,
      renderToggle: function renderToggle(_ref2) {
        var isOpen = _ref2.isOpen,
            onToggle = _ref2.onToggle;
        return createElement(IconButton, {
          icon: isOpen ? 'arrow-up-alt2' : 'arrow-down-alt2',
          label: __('More options'),
          onClick: onToggle,
          "aria-expanded": isOpen
        });
      },
      renderContent: function renderContent(_ref3) {
        var onClose = _ref3.onClose;
        return createElement(MenuItemActions, {
          clientId: clientId,
          destination: attributes.destination,
          onEditLableClicked: onEditLableClicked(onClose)
        });
      }
    }));
  } else {
    content = attributes.label;
  }

  return createElement(Fragment, null, createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Menu Settings')
  }, createElement(ToggleControl, {
    checked: attributes.opensInNewTab,
    onChange: function onChange(opensInNewTab) {
      setAttributes({
        opensInNewTab: opensInNewTab
      });
    },
    label: __('Open in new tab')
  }), createElement(TextareaControl, {
    value: attributes.description || '',
    onChange: function onChange(description) {
      setAttributes({
        description: description
      });
    },
    label: __('Description')
  })), createElement(PanelBody, {
    title: __('SEO Settings')
  }, createElement(TextControl, {
    value: attributes.title || '',
    onChange: function onChange(title) {
      setAttributes({
        title: title
      });
    },
    label: __('Title Attribute'),
    help: __('Provide more context about where the link goes.')
  }), createElement(ToggleControl, {
    checked: attributes.nofollow,
    onChange: function onChange(nofollow) {
      setAttributes({
        nofollow: nofollow
      });
    },
    label: __('Add nofollow to menu item'),
    help: createElement(Fragment, null, __('Don\'t let search engines follow this link.'), createElement(ExternalLink, {
      className: "wp-block-navigation-menu-item__nofollow-external-link",
      href: __('https://codex.wordpress.org/Nofollow')
    }, __('What\'s this?')))
  }))), createElement("div", {
    className: "wp-block-navigation-menu-item"
  }, content, createElement(InnerBlocks, {
    allowedBlocks: ['core/navigation-menu-item'],
    renderAppender: InnerBlocks.ButtonBlockAppender
  })));
}

export default NavigationMenuItemEdit;
//# sourceMappingURL=edit.js.map