{"version":3,"sources":["@wordpress/block-library/src/code/utils.js"],"names":["flow","escape","content","escapeAmpersands","escapeOpeningSquareBrackets","escapeProtocolInIsolatedUrls","unescape","unescapeProtocolInIsolatedUrls","unescapeOpeningSquareBrackets","unescapeAmpersands","replace"],"mappings":"AAAA;;;AAGA,SAASA,IAAT,QAAqB,QAArB;AAEA;;;;;;;AAMA,OAAO,SAASC,MAAT,CAAiBC,OAAjB,EAA2B;AACjC,SAAOF,IAAI,CACVG,gBADU,EAEVC,2BAFU,EAGVC,4BAHU,CAAJ,CAIJH,OAAO,IAAI,EAJP,CAAP;AAKA;AAED;;;;;;;AAMA,OAAO,SAASI,QAAT,CAAmBJ,OAAnB,EAA6B;AACnC,SAAOF,IAAI,CACVO,8BADU,EAEVC,6BAFU,EAGVC,kBAHU,CAAJ,CAIJP,OAAO,IAAI,EAJP,CAAP;AAKA;AAED;;;;;;;;;AAQA,SAASC,gBAAT,CAA2BD,OAA3B,EAAqC;AACpC,SAAOA,OAAO,CAACQ,OAAR,CAAiB,IAAjB,EAAuB,OAAvB,CAAP;AACA;AAED;;;;;;;;;AAOA,SAASD,kBAAT,CAA6BP,OAA7B,EAAuC;AACtC,SAAOA,OAAO,CAACQ,OAAR,CAAiB,QAAjB,EAA2B,GAA3B,CAAP;AACA;AAED;;;;;;;;;;;;;;;AAaA,SAASN,2BAAT,CAAsCF,OAAtC,EAAgD;AAC/C,SAAOA,OAAO,CAACQ,OAAR,CAAiB,KAAjB,EAAwB,OAAxB,CAAP;AACA;AAED;;;;;;;;AAMA,SAASF,6BAAT,CAAwCN,OAAxC,EAAkD;AACjD,SAAOA,OAAO,CAACQ,OAAR,CAAiB,QAAjB,EAA2B,GAA3B,CAAP;AACA;AAED;;;;;;;;;;;;;;;;AAcA,SAASL,4BAAT,CAAuCH,OAAvC,EAAiD;AAChD,SAAOA,OAAO,CAACQ,OAAR,CAAiB,mCAAjB,EAAsD,gBAAtD,CAAP;AACA;AAED;;;;;;;;;;;;;;;AAaA,SAASH,8BAAT,CAAyCL,OAAzC,EAAmD;AAClD,SAAOA,OAAO,CAACQ,OAAR,CAAiB,yCAAjB,EAA4D,QAA5D,CAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { flow } from 'lodash';\n\n/**\n * Escapes ampersands, shortcodes, and links.\n *\n * @param {string} content The content of a code block.\n * @return {string} The given content with some characters escaped.\n */\nexport function escape( content ) {\n\treturn flow(\n\t\tescapeAmpersands,\n\t\tescapeOpeningSquareBrackets,\n\t\tescapeProtocolInIsolatedUrls\n\t)( content || '' );\n}\n\n/**\n * Unescapes escaped ampersands, shortcodes, and links.\n *\n * @param {string} content Content with (maybe) escaped ampersands, shortcodes, and links.\n * @return {string} The given content with escaped characters unescaped.\n */\nexport function unescape( content ) {\n\treturn flow(\n\t\tunescapeProtocolInIsolatedUrls,\n\t\tunescapeOpeningSquareBrackets,\n\t\tunescapeAmpersands\n\t)( content || '' );\n}\n\n/**\n * Returns the given content with all its ampersand characters converted\n * into their HTML entity counterpart (i.e. & => &amp;)\n *\n * @param {string}  content The content of a code block.\n * @return {string} The given content with its ampersands converted into\n *                  their HTML entity counterpart (i.e. & => &amp;)\n */\nfunction escapeAmpersands( content ) {\n\treturn content.replace( /&/g, '&amp;' );\n}\n\n/**\n * Returns the given content with all &amp; HTML entities converted into &.\n *\n * @param {string}  content The content of a code block.\n * @return {string} The given content with all &amp; HTML entities\n *                  converted into &.\n */\nfunction unescapeAmpersands( content ) {\n\treturn content.replace( /&amp;/g, '&' );\n}\n\n/**\n * Returns the given content with all opening shortcode characters converted\n * into their HTML entity counterpart (i.e. [ => &#91;). For instance, a\n * shortcode like [embed] becomes &#91;embed]\n *\n * This function replicates the escaping of HTML tags, where a tag like\n * <strong> becomes &lt;strong>.\n *\n * @param {string}  content The content of a code block.\n * @return {string} The given content with its opening shortcode characters\n *                  converted into their HTML entity counterpart\n *                  (i.e. [ => &#91;)\n */\nfunction escapeOpeningSquareBrackets( content ) {\n\treturn content.replace( /\\[/g, '&#91;' );\n}\n\n/**\n * Returns the given content translating all &#91; into [.\n *\n * @param {string}  content The content of a code block.\n * @return {string} The given content with all &#91; into [.\n */\nfunction unescapeOpeningSquareBrackets( content ) {\n\treturn content.replace( /&#91;/g, '[' );\n}\n\n/**\n * Converts the first two forward slashes of any isolated URL into their HTML\n * counterparts (i.e. // => &#47;&#47;). For instance, https://youtube.com/watch?x\n * becomes https:&#47;&#47;youtube.com/watch?x.\n *\n * An isolated URL is a URL that sits in its own line, surrounded only by spacing\n * characters.\n *\n * See https://github.com/WordPress/wordpress-develop/blob/5.1.1/src/wp-includes/class-wp-embed.php#L403\n *\n * @param {string}  content The content of a code block.\n * @return {string} The given content with its ampersands converted into\n *                  their HTML entity counterpart (i.e. & => &amp;)\n */\nfunction escapeProtocolInIsolatedUrls( content ) {\n\treturn content.replace( /^(\\s*https?:)\\/\\/([^\\s<>\"]+\\s*)$/m, '$1&#47;&#47;$2' );\n}\n\n/**\n * Converts the first two forward slashes of any isolated URL from the HTML entity\n * &#73; into /.\n *\n * An isolated URL is a URL that sits in its own line, surrounded only by spacing\n * characters.\n *\n * See https://github.com/WordPress/wordpress-develop/blob/5.1.1/src/wp-includes/class-wp-embed.php#L403\n *\n * @param {string}  content The content of a code block.\n * @return {string} The given content with the first two forward slashes of any\n *                  isolated URL from the HTML entity &#73; into /.\n */\nfunction unescapeProtocolInIsolatedUrls( content ) {\n\treturn content.replace( /^(\\s*https?:)&#47;&#47;([^\\s<>\"]+\\s*)$/m, '$1//$2' );\n}\n"]}