import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
import { noop } from 'lodash';
/**
 * WordPress dependencies
 */

import { InnerBlocks, getColorClassName } from '@wordpress/block-editor';
/**
 * Internal dependencies
 */

import { imageFillStyles } from './media-container';
var DEFAULT_MEDIA_WIDTH = 50;
export default function save(_ref) {
  var _classnames;

  var attributes = _ref.attributes;
  var backgroundColor = attributes.backgroundColor,
      customBackgroundColor = attributes.customBackgroundColor,
      isStackedOnMobile = attributes.isStackedOnMobile,
      mediaAlt = attributes.mediaAlt,
      mediaPosition = attributes.mediaPosition,
      mediaType = attributes.mediaType,
      mediaUrl = attributes.mediaUrl,
      mediaWidth = attributes.mediaWidth,
      mediaId = attributes.mediaId,
      verticalAlignment = attributes.verticalAlignment,
      imageFill = attributes.imageFill,
      focalPoint = attributes.focalPoint;
  var mediaTypeRenders = {
    image: function image() {
      return createElement("img", {
        src: mediaUrl,
        alt: mediaAlt,
        className: mediaId && mediaType === 'image' ? "wp-image-".concat(mediaId) : null
      });
    },
    video: function video() {
      return createElement("video", {
        controls: true,
        src: mediaUrl
      });
    }
  };
  var backgroundClass = getColorClassName('background-color', backgroundColor);
  var className = classnames((_classnames = {
    'has-media-on-the-right': 'right' === mediaPosition,
    'has-background': backgroundClass || customBackgroundColor
  }, _defineProperty(_classnames, backgroundClass, backgroundClass), _defineProperty(_classnames, 'is-stacked-on-mobile', isStackedOnMobile), _defineProperty(_classnames, "is-vertically-aligned-".concat(verticalAlignment), verticalAlignment), _defineProperty(_classnames, 'is-image-fill', imageFill), _classnames));
  var backgroundStyles = imageFill ? imageFillStyles(mediaUrl, focalPoint) : {};
  var gridTemplateColumns;

  if (mediaWidth !== DEFAULT_MEDIA_WIDTH) {
    gridTemplateColumns = 'right' === mediaPosition ? "auto ".concat(mediaWidth, "%") : "".concat(mediaWidth, "% auto");
  }

  var style = {
    backgroundColor: backgroundClass ? undefined : customBackgroundColor,
    gridTemplateColumns: gridTemplateColumns
  };
  return createElement("div", {
    className: className,
    style: style
  }, createElement("figure", {
    className: "wp-block-media-text__media",
    style: backgroundStyles
  }, (mediaTypeRenders[mediaType] || noop)()), createElement("div", {
    className: "wp-block-media-text__content"
  }, createElement(InnerBlocks.Content, null)));
}
//# sourceMappingURL=save.js.map