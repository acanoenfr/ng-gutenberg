{"version":3,"sources":["@wordpress/block-library/src/columns/utils.js"],"names":["memoize","times","findIndex","sumBy","merge","mapValues","getColumnsTemplate","columns","undefined","toWidthPrecision","value","Number","isFinite","parseFloat","toFixed","getAdjacentBlocks","blocks","clientId","index","isLastBlock","length","slice","getEffectiveColumnWidth","block","totalBlockCount","attributes","width","getTotalColumnsWidth","getColumnWidths","reduce","result","Object","assign","getRedistributedColumnWidths","availableWidth","totalWidth","difference","adjustment","hasExplicitColumnWidths","some","getMappedColumnWidths","widths","map"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport memoize from 'memize';\nimport { times, findIndex, sumBy, merge, mapValues } from 'lodash';\n\n/**\n * Returns the layouts configuration for a given number of columns.\n *\n * @param {number} columns Number of columns.\n *\n * @return {Object[]} Columns layout configuration.\n */\nexport const getColumnsTemplate = memoize( ( columns ) => {\n\tif ( columns === undefined ) {\n\t\treturn null;\n\t}\n\n\treturn times( columns, () => [ 'core/column' ] );\n} );\n\n/**\n * Returns a column width attribute value rounded to standard precision.\n * Returns `undefined` if the value is not a valid finite number.\n *\n * @param {?number} value Raw value.\n *\n * @return {number} Value rounded to standard precision.\n */\nexport const toWidthPrecision = ( value ) =>\n\tNumber.isFinite( value ) ?\n\t\tparseFloat( value.toFixed( 2 ) ) :\n\t\tundefined;\n\n/**\n * Returns the considered adjacent to that of the specified `clientId` for\n * resizing consideration. Adjacent blocks are those occurring after, except\n * when the given block is the last block in the set. For the last block, the\n * behavior is reversed.\n *\n * @param {WPBlock[]} blocks   Block objects.\n * @param {string}    clientId Client ID to consider for adjacent blocks.\n *\n * @return {WPBlock[]} Adjacent block objects.\n */\nexport function getAdjacentBlocks( blocks, clientId ) {\n\tconst index = findIndex( blocks, { clientId } );\n\tconst isLastBlock = index === blocks.length - 1;\n\n\treturn isLastBlock ? blocks.slice( 0, index ) : blocks.slice( index + 1 );\n}\n\n/**\n * Returns an effective width for a given block. An effective width is equal to\n * its attribute value if set, or a computed value assuming equal distribution.\n *\n * @param {WPBlock} block           Block object.\n * @param {number}  totalBlockCount Total number of blocks in Columns.\n *\n * @return {number} Effective column width.\n */\nexport function getEffectiveColumnWidth( block, totalBlockCount ) {\n\tconst { width = 100 / totalBlockCount } = block.attributes;\n\treturn toWidthPrecision( width );\n}\n\n/**\n * Returns the total width occupied by the given set of column blocks.\n *\n * @param {WPBlock[]} blocks          Block objects.\n * @param {?number}   totalBlockCount Total number of blocks in Columns.\n *                                    Defaults to number of blocks passed.\n *\n * @return {number} Total width occupied by blocks.\n */\nexport function getTotalColumnsWidth( blocks, totalBlockCount = blocks.length ) {\n\treturn sumBy( blocks, ( block ) => getEffectiveColumnWidth( block, totalBlockCount ) );\n}\n\n/**\n * Returns an object of `clientId` → `width` of effective column widths.\n *\n * @param {WPBlock[]} blocks          Block objects.\n * @param {?number}   totalBlockCount Total number of blocks in Columns.\n *                                    Defaults to number of blocks passed.\n *\n * @return {Object<string,number>} Column widths.\n */\nexport function getColumnWidths( blocks, totalBlockCount = blocks.length ) {\n\treturn blocks.reduce( ( result, block ) => {\n\t\tconst width = getEffectiveColumnWidth( block, totalBlockCount );\n\t\treturn Object.assign( result, { [ block.clientId ]: width } );\n\t}, {} );\n}\n\n/**\n * Returns an object of `clientId` → `width` of column widths as redistributed\n * proportional to their current widths, constrained or expanded to fit within\n * the given available width.\n *\n * @param {WPBlock[]} blocks          Block objects.\n * @param {number}    availableWidth  Maximum width to fit within.\n * @param {?number}   totalBlockCount Total number of blocks in Columns.\n *                                    Defaults to number of blocks passed.\n *\n * @return {Object<string,number>} Redistributed column widths.\n */\nexport function getRedistributedColumnWidths( blocks, availableWidth, totalBlockCount = blocks.length ) {\n\tconst totalWidth = getTotalColumnsWidth( blocks, totalBlockCount );\n\tconst difference = availableWidth - totalWidth;\n\tconst adjustment = difference / blocks.length;\n\n\treturn mapValues(\n\t\tgetColumnWidths( blocks, totalBlockCount ),\n\t\t( width ) => toWidthPrecision( width + adjustment ),\n\t);\n}\n\n/**\n * Returns true if column blocks within the provided set are assigned with\n * explicit widths, or false otherwise.\n *\n * @param {WPBlock[]} blocks Block objects.\n *\n * @return {boolean} Whether columns have explicit widths.\n */\nexport function hasExplicitColumnWidths( blocks ) {\n\treturn blocks.some( ( block ) => Number.isFinite( block.attributes.width ) );\n}\n\n/**\n * Returns a copy of the given set of blocks with new widths assigned from the\n * provided object of redistributed column widths.\n *\n * @param {WPBlock[]}             blocks Block objects.\n * @param {Object<string,number>} widths Redistributed column widths.\n *\n * @return {WPBlock[]} blocks Mapped block objects.\n */\nexport function getMappedColumnWidths( blocks, widths ) {\n\treturn blocks.map( ( block ) => merge( {}, block, {\n\t\tattributes: {\n\t\t\twidth: widths[ block.clientId ],\n\t\t},\n\t} ) );\n}\n"]}