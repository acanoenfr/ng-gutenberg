import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { Component, useCallback } from '@wordpress/element';
import { compose, withInstanceId } from '@wordpress/compose';
import { BaseControl, PanelBody, RangeControl, TextControl, ToggleControl, withFallbackStyles } from '@wordpress/components';
import { URLInput, RichText, ContrastChecker, InspectorControls, withColors, PanelColorSettings } from '@wordpress/block-editor';
var _window = window,
    getComputedStyle = _window.getComputedStyle;
var applyFallbackStyles = withFallbackStyles(function (node, ownProps) {
  var textColor = ownProps.textColor,
      backgroundColor = ownProps.backgroundColor;
  var backgroundColorValue = backgroundColor && backgroundColor.color;
  var textColorValue = textColor && textColor.color; //avoid the use of querySelector if textColor color is known and verify if node is available.

  var textNode = !textColorValue && node ? node.querySelector('[contenteditable="true"]') : null;
  return {
    fallbackBackgroundColor: backgroundColorValue || !node ? undefined : getComputedStyle(node).backgroundColor,
    fallbackTextColor: textColorValue || !textNode ? undefined : getComputedStyle(textNode).color
  };
});
var NEW_TAB_REL = 'noreferrer noopener';
var MIN_BORDER_RADIUS_VALUE = 0;
var MAX_BORDER_RADIUS_VALUE = 50;
var INITIAL_BORDER_RADIUS_POSITION = 5;

function BorderPanel(_ref) {
  var _ref$borderRadius = _ref.borderRadius,
      borderRadius = _ref$borderRadius === void 0 ? '' : _ref$borderRadius,
      setAttributes = _ref.setAttributes;
  var setBorderRadius = useCallback(function (newBorderRadius) {
    setAttributes({
      borderRadius: newBorderRadius
    });
  }, [setAttributes]);
  return createElement(PanelBody, {
    title: __('Border Settings')
  }, createElement(RangeControl, {
    value: borderRadius,
    label: __('Border Radius'),
    min: MIN_BORDER_RADIUS_VALUE,
    max: MAX_BORDER_RADIUS_VALUE,
    initialPosition: INITIAL_BORDER_RADIUS_POSITION,
    allowReset: true,
    onChange: setBorderRadius
  }));
}

var ButtonEdit =
/*#__PURE__*/
function (_Component) {
  _inherits(ButtonEdit, _Component);

  function ButtonEdit() {
    var _this;

    _classCallCheck(this, ButtonEdit);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ButtonEdit).apply(this, arguments));
    _this.nodeRef = null;
    _this.bindRef = _this.bindRef.bind(_assertThisInitialized(_this));
    _this.onSetLinkRel = _this.onSetLinkRel.bind(_assertThisInitialized(_this));
    _this.onToggleOpenInNewTab = _this.onToggleOpenInNewTab.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ButtonEdit, [{
    key: "bindRef",
    value: function bindRef(node) {
      if (!node) {
        return;
      }

      this.nodeRef = node;
    }
  }, {
    key: "onSetLinkRel",
    value: function onSetLinkRel(value) {
      this.props.setAttributes({
        rel: value
      });
    }
  }, {
    key: "onToggleOpenInNewTab",
    value: function onToggleOpenInNewTab(value) {
      var rel = this.props.attributes.rel;
      var linkTarget = value ? '_blank' : undefined;
      var updatedRel = rel;

      if (linkTarget && !rel) {
        updatedRel = NEW_TAB_REL;
      } else if (!linkTarget && rel === NEW_TAB_REL) {
        updatedRel = undefined;
      }

      this.props.setAttributes({
        linkTarget: linkTarget,
        rel: updatedRel
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          attributes = _this$props.attributes,
          backgroundColor = _this$props.backgroundColor,
          textColor = _this$props.textColor,
          setBackgroundColor = _this$props.setBackgroundColor,
          setTextColor = _this$props.setTextColor,
          fallbackBackgroundColor = _this$props.fallbackBackgroundColor,
          fallbackTextColor = _this$props.fallbackTextColor,
          setAttributes = _this$props.setAttributes,
          className = _this$props.className,
          instanceId = _this$props.instanceId,
          isSelected = _this$props.isSelected;
      var borderRadius = attributes.borderRadius,
          linkTarget = attributes.linkTarget,
          placeholder = attributes.placeholder,
          rel = attributes.rel,
          text = attributes.text,
          title = attributes.title,
          url = attributes.url;
      var linkId = "wp-block-button__inline-link-".concat(instanceId);
      return createElement("div", {
        className: className,
        title: title,
        ref: this.bindRef
      }, createElement(RichText, {
        placeholder: placeholder || __('Add textâ€¦'),
        value: text,
        onChange: function onChange(value) {
          return setAttributes({
            text: value
          });
        },
        withoutInteractiveFormatting: true,
        className: classnames('wp-block-button__link', (_classnames = {
          'has-background': backgroundColor.color
        }, _defineProperty(_classnames, backgroundColor.class, backgroundColor.class), _defineProperty(_classnames, 'has-text-color', textColor.color), _defineProperty(_classnames, textColor.class, textColor.class), _defineProperty(_classnames, 'no-border-radius', borderRadius === 0), _classnames)),
        style: {
          backgroundColor: backgroundColor.color,
          color: textColor.color,
          borderRadius: borderRadius ? borderRadius + 'px' : undefined
        }
      }), createElement(BaseControl, {
        label: __('Link'),
        className: "wp-block-button__inline-link",
        id: linkId
      }, createElement(URLInput, {
        className: "wp-block-button__inline-link-input",
        value: url
        /* eslint-disable jsx-a11y/no-autofocus */
        // Disable Reason: The rule is meant to prevent enabling auto-focus, not disabling it.
        ,
        autoFocus: false
        /* eslint-enable jsx-a11y/no-autofocus */
        ,
        onChange: function onChange(value) {
          return setAttributes({
            url: value
          });
        },
        disableSuggestions: !isSelected,
        id: linkId,
        isFullWidth: true,
        hasBorder: true
      })), createElement(InspectorControls, null, createElement(PanelColorSettings, {
        title: __('Color Settings'),
        colorSettings: [{
          value: backgroundColor.color,
          onChange: setBackgroundColor,
          label: __('Background Color')
        }, {
          value: textColor.color,
          onChange: setTextColor,
          label: __('Text Color')
        }]
      }, createElement(ContrastChecker, {
        // Text is considered large if font size is greater or equal to 18pt or 24px,
        // currently that's not the case for button.
        isLargeText: false,
        textColor: textColor.color,
        backgroundColor: backgroundColor.color,
        fallbackBackgroundColor: fallbackBackgroundColor,
        fallbackTextColor: fallbackTextColor
      })), createElement(BorderPanel, {
        borderRadius: borderRadius,
        setAttributes: setAttributes
      }), createElement(PanelBody, {
        title: __('Link settings')
      }, createElement(ToggleControl, {
        label: __('Open in new tab'),
        onChange: this.onToggleOpenInNewTab,
        checked: linkTarget === '_blank'
      }), createElement(TextControl, {
        label: __('Link rel'),
        value: rel || '',
        onChange: this.onSetLinkRel
      }))));
    }
  }]);

  return ButtonEdit;
}(Component);

export default compose([withInstanceId, withColors('backgroundColor', {
  textColor: 'color'
}), applyFallbackStyles])(ButtonEdit);
//# sourceMappingURL=edit.js.map