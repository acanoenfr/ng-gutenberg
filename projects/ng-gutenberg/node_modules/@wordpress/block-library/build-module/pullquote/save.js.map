{"version":3,"sources":["@wordpress/block-library/src/pullquote/save.js"],"names":["classnames","get","includes","getColorClassName","RichText","getColorObjectByAttributeValues","select","SOLID_COLOR_CLASS","save","attributes","mainColor","customMainColor","textColor","customTextColor","value","citation","className","isSolidColorStyle","figureClasses","figureStyles","backgroundClass","backgroundColor","undefined","borderColor","colors","getSettings","colorObject","color","blockquoteTextColorClass","blockquoteClasses","blockquoteStyles","isEmpty"],"mappings":";;;AAAA;;;AAGA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,QAA9B;AAEA;;;;AAGA,SACCC,iBADD,EAECC,QAFD,EAGCC,+BAHD,QAIO,yBAJP;AAKA,SACCC,MADD,QAEO,iBAFP;AAIA;;;;AAGA,SAASC,iBAAT,QAAkC,UAAlC;AAEA,eAAe,SAASC,IAAT,OAAgC;AAAA,MAAfC,UAAe,QAAfA,UAAe;AAAA,MAE7CC,SAF6C,GAS1CD,UAT0C,CAE7CC,SAF6C;AAAA,MAG7CC,eAH6C,GAS1CF,UAT0C,CAG7CE,eAH6C;AAAA,MAI7CC,SAJ6C,GAS1CH,UAT0C,CAI7CG,SAJ6C;AAAA,MAK7CC,eAL6C,GAS1CJ,UAT0C,CAK7CI,eAL6C;AAAA,MAM7CC,KAN6C,GAS1CL,UAT0C,CAM7CK,KAN6C;AAAA,MAO7CC,QAP6C,GAS1CN,UAT0C,CAO7CM,QAP6C;AAAA,MAQ7CC,SAR6C,GAS1CP,UAT0C,CAQ7CO,SAR6C;AAW9C,MAAMC,iBAAiB,GAAGf,QAAQ,CAAEc,SAAF,EAAaT,iBAAb,CAAlC;AAEA,MAAIW,aAAJ,EAAmBC,YAAnB,CAb8C,CAe9C;;AACA,MAAKF,iBAAL,EAAyB;AACxB,QAAMG,eAAe,GAAGjB,iBAAiB,CAAE,kBAAF,EAAsBO,SAAtB,CAAzC;AAEAQ,IAAAA,aAAa,GAAGlB,UAAU;AACzB,wBAAoBoB,eAAe,IAAIT;AADd,OAEvBS,eAFuB,EAEJA,eAFI,EAA1B;AAKAD,IAAAA,YAAY,GAAG;AACdE,MAAAA,eAAe,EAAED,eAAe,GAAGE,SAAH,GAAeX;AADjC,KAAf,CARwB,CAWzB;AACC,GAZD,MAYO,IAAKA,eAAL,EAAuB;AAC7BQ,IAAAA,YAAY,GAAG;AACdI,MAAAA,WAAW,EAAEZ;AADC,KAAf,CAD6B,CAI9B;AACA;AACC,GANM,MAMA,IAAKD,SAAL,EAAiB;AACvB,QAAMc,MAAM,GAAGvB,GAAG,CAAEK,MAAM,CAAE,mBAAF,CAAN,CAA8BmB,WAA9B,EAAF,EAA+C,CAAE,QAAF,CAA/C,EAA6D,EAA7D,CAAlB;AACA,QAAMC,WAAW,GAAGrB,+BAA+B,CAAEmB,MAAF,EAAUd,SAAV,CAAnD;AACAS,IAAAA,YAAY,GAAG;AACdI,MAAAA,WAAW,EAAEG,WAAW,CAACC;AADX,KAAf;AAGA;;AAED,MAAMC,wBAAwB,GAAGzB,iBAAiB,CAAE,OAAF,EAAWS,SAAX,CAAlD;AACA,MAAMiB,iBAAiB,GAAG,CAAEjB,SAAS,IAAIC,eAAf,KAAoCb,UAAU,CAAE,gBAAF,sBACrE4B,wBADqE,EACzCA,wBADyC,EAAxE;AAIA,MAAME,gBAAgB,GAAGF,wBAAwB,GAAGN,SAAH,GAAe;AAAEK,IAAAA,KAAK,EAAEd;AAAT,GAAhE;AAEA,SACC;AAAQ,IAAA,SAAS,EAAGK,aAApB;AAAoC,IAAA,KAAK,EAAGC;AAA5C,KACC;AAAY,IAAA,SAAS,EAAGU,iBAAxB;AAA4C,IAAA,KAAK,EAAGC;AAApD,KACC,cAAC,QAAD,CAAU,OAAV;AAAkB,IAAA,KAAK,EAAGhB,KAA1B;AAAkC,IAAA,SAAS;AAA3C,IADD,EAEG,CAAEV,QAAQ,CAAC2B,OAAT,CAAkBhB,QAAlB,CAAF,IAAkC,cAAC,QAAD,CAAU,OAAV;AAAkB,IAAA,OAAO,EAAC,MAA1B;AAAiC,IAAA,KAAK,EAAGA;AAAzC,IAFrC,CADD,CADD;AAQA","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { get, includes } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetColorClassName,\n\tRichText,\n\tgetColorObjectByAttributeValues,\n} from '@wordpress/block-editor';\nimport {\n\tselect,\n} from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { SOLID_COLOR_CLASS } from './shared';\n\nexport default function save( { attributes } ) {\n\tconst {\n\t\tmainColor,\n\t\tcustomMainColor,\n\t\ttextColor,\n\t\tcustomTextColor,\n\t\tvalue,\n\t\tcitation,\n\t\tclassName,\n\t} = attributes;\n\n\tconst isSolidColorStyle = includes( className, SOLID_COLOR_CLASS );\n\n\tlet figureClasses, figureStyles;\n\n\t// Is solid color style\n\tif ( isSolidColorStyle ) {\n\t\tconst backgroundClass = getColorClassName( 'background-color', mainColor );\n\n\t\tfigureClasses = classnames( {\n\t\t\t'has-background': ( backgroundClass || customMainColor ),\n\t\t\t[ backgroundClass ]: backgroundClass,\n\t\t} );\n\n\t\tfigureStyles = {\n\t\t\tbackgroundColor: backgroundClass ? undefined : customMainColor,\n\t\t};\n\t// Is normal style and a custom color is being used ( we can set a style directly with its value)\n\t} else if ( customMainColor ) {\n\t\tfigureStyles = {\n\t\t\tborderColor: customMainColor,\n\t\t};\n\t// If normal style and a named color are being used, we need to retrieve the color value to set the style,\n\t// as there is no expectation that themes create classes that set border colors.\n\t} else if ( mainColor ) {\n\t\tconst colors = get( select( 'core/block-editor' ).getSettings(), [ 'colors' ], [] );\n\t\tconst colorObject = getColorObjectByAttributeValues( colors, mainColor );\n\t\tfigureStyles = {\n\t\t\tborderColor: colorObject.color,\n\t\t};\n\t}\n\n\tconst blockquoteTextColorClass = getColorClassName( 'color', textColor );\n\tconst blockquoteClasses = ( textColor || customTextColor ) && classnames( 'has-text-color', {\n\t\t[ blockquoteTextColorClass ]: blockquoteTextColorClass,\n\t} );\n\n\tconst blockquoteStyles = blockquoteTextColorClass ? undefined : { color: customTextColor };\n\n\treturn (\n\t\t<figure className={ figureClasses } style={ figureStyles }>\n\t\t\t<blockquote className={ blockquoteClasses } style={ blockquoteStyles } >\n\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t{ ! RichText.isEmpty( citation ) && <RichText.Content tagName=\"cite\" value={ citation } /> }\n\t\t\t</blockquote>\n\t\t</figure>\n\t);\n}\n"]}