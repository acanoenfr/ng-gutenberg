{"version":3,"sources":["@wordpress/block-library/src/quote/transforms.js"],"names":["createBlock","getPhrasingContentSchema","create","join","split","toHTMLString","transforms","from","type","isMultiBlock","blocks","transform","attributes","value","map","content","html","multilineTag","citation","prefix","isMatch","node","isParagraphOrSingleCite","hasCitation","child","nodeName","Array","childNodes","every","schema","blockquote","children","p","cite","to","paragraphs","push","piece","length","attrs","pieces","headingBlock","quotePieces","slice","quoteBlock"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createBlock, getPhrasingContentSchema } from '@wordpress/blocks';\nimport { create, join, split, toHTMLString } from '@wordpress/rich-text';\n\nconst transforms = {\n\tfrom: [\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tisMultiBlock: true,\n\t\t\tblocks: [ 'core/paragraph' ],\n\t\t\ttransform: ( attributes ) => {\n\t\t\t\treturn createBlock( 'core/quote', {\n\t\t\t\t\tvalue: toHTMLString( {\n\t\t\t\t\t\tvalue: join( attributes.map( ( { content } ) =>\n\t\t\t\t\t\t\tcreate( { html: content } )\n\t\t\t\t\t\t), '\\u2028' ),\n\t\t\t\t\t\tmultilineTag: 'p',\n\t\t\t\t\t} ),\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/heading' ],\n\t\t\ttransform: ( { content } ) => {\n\t\t\t\treturn createBlock( 'core/quote', {\n\t\t\t\t\tvalue: `<p>${ content }</p>`,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/pullquote' ],\n\t\t\ttransform: ( { value, citation } ) => createBlock( 'core/quote', {\n\t\t\t\tvalue,\n\t\t\t\tcitation,\n\t\t\t} ),\n\t\t},\n\t\t{\n\t\t\ttype: 'prefix',\n\t\t\tprefix: '>',\n\t\t\ttransform: ( content ) => {\n\t\t\t\treturn createBlock( 'core/quote', {\n\t\t\t\t\tvalue: `<p>${ content }</p>`,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'raw',\n\t\t\tisMatch: ( node ) => {\n\t\t\t\tconst isParagraphOrSingleCite = ( () => {\n\t\t\t\t\tlet hasCitation = false;\n\t\t\t\t\treturn ( child ) => {\n\t\t\t\t\t\t// Child is a paragraph.\n\t\t\t\t\t\tif ( child.nodeName === 'P' ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Child is a cite and no other cite child exists before it.\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t! hasCitation &&\n\t\t\t\t\t\t\tchild.nodeName === 'CITE'\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\thasCitation = true;\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t} )();\n\t\t\t\treturn node.nodeName === 'BLOCKQUOTE' &&\n\t\t\t\t\t// The quote block can only handle multiline paragraph\n\t\t\t\t\t// content with an optional cite child.\n\t\t\t\t\tArray.from( node.childNodes ).every(\n\t\t\t\t\t\tisParagraphOrSingleCite\n\t\t\t\t\t);\n\t\t\t},\n\t\t\tschema: {\n\t\t\t\tblockquote: {\n\t\t\t\t\tchildren: {\n\t\t\t\t\t\tp: {\n\t\t\t\t\t\t\tchildren: getPhrasingContentSchema(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcite: {\n\t\t\t\t\t\t\tchildren: getPhrasingContentSchema(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n\tto: [\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/paragraph' ],\n\t\t\ttransform: ( { value, citation } ) => {\n\t\t\t\tconst paragraphs = [];\n\t\t\t\tif ( value && value !== '<p></p>' ) {\n\t\t\t\t\tparagraphs.push(\n\t\t\t\t\t\t...split( create( { html: value, multilineTag: 'p' } ), '\\u2028' )\n\t\t\t\t\t\t\t.map( ( piece ) =>\n\t\t\t\t\t\t\t\tcreateBlock( 'core/paragraph', {\n\t\t\t\t\t\t\t\t\tcontent: toHTMLString( { value: piece } ),\n\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif ( citation && citation !== '<p></p>' ) {\n\t\t\t\t\tparagraphs.push(\n\t\t\t\t\t\tcreateBlock( 'core/paragraph', {\n\t\t\t\t\t\t\tcontent: citation,\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif ( paragraphs.length === 0 ) {\n\t\t\t\t\treturn createBlock( 'core/paragraph', {\n\t\t\t\t\t\tcontent: '',\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\treturn paragraphs;\n\t\t\t},\n\t\t},\n\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/heading' ],\n\t\t\ttransform: ( { value, citation, ...attrs } ) => {\n\t\t\t\t// If there is no quote content, use the citation as the\n\t\t\t\t// content of the resulting heading. A nonexistent citation\n\t\t\t\t// will result in an empty heading.\n\t\t\t\tif ( value === '<p></p>' ) {\n\t\t\t\t\treturn createBlock( 'core/heading', {\n\t\t\t\t\t\tcontent: citation,\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tconst pieces = split( create( { html: value, multilineTag: 'p' } ), '\\u2028' );\n\n\t\t\t\tconst headingBlock = createBlock( 'core/heading', {\n\t\t\t\t\tcontent: toHTMLString( { value: pieces[ 0 ] } ),\n\t\t\t\t} );\n\n\t\t\t\tif ( ! citation && pieces.length === 1 ) {\n\t\t\t\t\treturn headingBlock;\n\t\t\t\t}\n\n\t\t\t\tconst quotePieces = pieces.slice( 1 );\n\n\t\t\t\tconst quoteBlock = createBlock( 'core/quote', {\n\t\t\t\t\t...attrs,\n\t\t\t\t\tcitation,\n\t\t\t\t\tvalue: toHTMLString( {\n\t\t\t\t\t\tvalue: quotePieces.length ? join( pieces.slice( 1 ), '\\u2028' ) : create(),\n\t\t\t\t\t\tmultilineTag: 'p',\n\t\t\t\t\t} ),\n\t\t\t\t} );\n\n\t\t\t\treturn [ headingBlock, quoteBlock ];\n\t\t\t},\n\t\t},\n\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/pullquote' ],\n\t\t\ttransform: ( { value, citation } ) => {\n\t\t\t\treturn createBlock( 'core/pullquote', {\n\t\t\t\t\tvalue,\n\t\t\t\t\tcitation,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t],\n};\n\nexport default transforms;\n"]}