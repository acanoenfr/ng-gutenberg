{"version":3,"sources":["@wordpress/block-library/src/gallery/transforms.js"],"names":["filter","every","createBlock","createBlobURL","pickRelevantMediaFiles","parseShortcodeIds","ids","split","map","id","parseInt","transforms","from","type","isMultiBlock","blocks","transform","attributes","align","undefined","validImages","url","images","alt","caption","tag","shortcode","named","columns","linkTo","link","isMatch","files","length","file","indexOf","block","to"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { filter, every } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createBlock } from '@wordpress/blocks';\nimport { createBlobURL } from '@wordpress/blob';\n\n/**\n * Internal dependencies\n */\nimport { pickRelevantMediaFiles } from './shared';\n\nconst parseShortcodeIds = ( ids ) => {\n\tif ( ! ids ) {\n\t\treturn [];\n\t}\n\n\treturn ids.split( ',' ).map( ( id ) => (\n\t\tparseInt( id, 10 )\n\t) );\n};\n\nconst transforms = {\n\tfrom: [\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tisMultiBlock: true,\n\t\t\tblocks: [ 'core/image' ],\n\t\t\ttransform: ( attributes ) => {\n\t\t\t\t// Init the align attribute from the first item which may be either the placeholder or an image.\n\t\t\t\tlet { align } = attributes[ 0 ];\n\t\t\t\t// Loop through all the images and check if they have the same align.\n\t\t\t\talign = every( attributes, [ 'align', align ] ) ? align : undefined;\n\n\t\t\t\tconst validImages = filter( attributes, ( { url } ) => url );\n\n\t\t\t\treturn createBlock( 'core/gallery', {\n\t\t\t\t\timages: validImages.map( ( { id, url, alt, caption } ) => ( {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\turl,\n\t\t\t\t\t\talt,\n\t\t\t\t\t\tcaption,\n\t\t\t\t\t} ) ),\n\t\t\t\t\tids: validImages.map( ( { id } ) => id ),\n\t\t\t\t\talign,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'shortcode',\n\t\t\ttag: 'gallery',\n\t\t\tattributes: {\n\t\t\t\timages: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\tshortcode: ( { named: { ids } } ) => {\n\t\t\t\t\t\treturn parseShortcodeIds( ids ).map( ( id ) => ( {\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t} ) );\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tids: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\tshortcode: ( { named: { ids } } ) => {\n\t\t\t\t\t\treturn parseShortcodeIds( ids );\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tcolumns: {\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\tshortcode: ( { named: { columns = '3' } } ) => {\n\t\t\t\t\t\treturn parseInt( columns, 10 );\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlinkTo: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tshortcode: ( { named: { link = 'attachment' } } ) => {\n\t\t\t\t\t\treturn link === 'file' ? 'media' : link;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t// When created by drag and dropping multiple files on an insertion point\n\t\t\ttype: 'files',\n\t\t\tisMatch( files ) {\n\t\t\t\treturn files.length !== 1 && every( files, ( file ) => file.type.indexOf( 'image/' ) === 0 );\n\t\t\t},\n\t\t\ttransform( files ) {\n\t\t\t\tconst block = createBlock( 'core/gallery', {\n\t\t\t\t\timages: files.map( ( file ) => pickRelevantMediaFiles( {\n\t\t\t\t\t\turl: createBlobURL( file ),\n\t\t\t\t\t} ) ),\n\t\t\t\t} );\n\t\t\t\treturn block;\n\t\t\t},\n\t\t},\n\t],\n\tto: [\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/image' ],\n\t\t\ttransform: ( { images, align } ) => {\n\t\t\t\tif ( images.length > 0 ) {\n\t\t\t\t\treturn images.map( ( { id, url, alt, caption } ) => createBlock( 'core/image', {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\turl,\n\t\t\t\t\t\talt,\n\t\t\t\t\t\tcaption,\n\t\t\t\t\t\talign,\n\t\t\t\t\t} ) );\n\t\t\t\t}\n\t\t\t\treturn createBlock( 'core/image', { align } );\n\t\t\t},\n\t\t},\n\t],\n};\n\nexport default transforms;\n"]}