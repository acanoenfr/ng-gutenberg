import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
import { every, filter, find, forEach, map, some } from 'lodash';
/**
 * WordPress dependencies
 */

import { compose } from '@wordpress/compose';
import { PanelBody, RangeControl, SelectControl, ToggleControl, withNotices } from '@wordpress/components';
import { BlockIcon, MediaPlaceholder, InspectorControls, RichText } from '@wordpress/block-editor';
import { Component } from '@wordpress/element';
import { __, sprintf } from '@wordpress/i18n';
import { getBlobByURL, isBlobURL, revokeBlobURL } from '@wordpress/blob';
import { withSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import GalleryImage from './gallery-image';
import { icon } from './icons';
import { defaultColumnsNumber, pickRelevantMediaFiles } from './shared';
var MAX_COLUMNS = 8;
var linkOptions = [{
  value: 'attachment',
  label: __('Attachment Page')
}, {
  value: 'media',
  label: __('Media File')
}, {
  value: 'none',
  label: __('None')
}];
var ALLOWED_MEDIA_TYPES = ['image'];

var GalleryEdit =
/*#__PURE__*/
function (_Component) {
  _inherits(GalleryEdit, _Component);

  function GalleryEdit() {
    var _this;

    _classCallCheck(this, GalleryEdit);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(GalleryEdit).apply(this, arguments));
    _this.onSelectImage = _this.onSelectImage.bind(_assertThisInitialized(_this));
    _this.onSelectImages = _this.onSelectImages.bind(_assertThisInitialized(_this));
    _this.setLinkTo = _this.setLinkTo.bind(_assertThisInitialized(_this));
    _this.setColumnsNumber = _this.setColumnsNumber.bind(_assertThisInitialized(_this));
    _this.toggleImageCrop = _this.toggleImageCrop.bind(_assertThisInitialized(_this));
    _this.onMove = _this.onMove.bind(_assertThisInitialized(_this));
    _this.onMoveForward = _this.onMoveForward.bind(_assertThisInitialized(_this));
    _this.onMoveBackward = _this.onMoveBackward.bind(_assertThisInitialized(_this));
    _this.onRemoveImage = _this.onRemoveImage.bind(_assertThisInitialized(_this));
    _this.onUploadError = _this.onUploadError.bind(_assertThisInitialized(_this));
    _this.setImageAttributes = _this.setImageAttributes.bind(_assertThisInitialized(_this));
    _this.setAttributes = _this.setAttributes.bind(_assertThisInitialized(_this));
    _this.onFocusGalleryCaption = _this.onFocusGalleryCaption.bind(_assertThisInitialized(_this));
    _this.state = {
      selectedImage: null,
      attachmentCaptions: null
    };
    return _this;
  }

  _createClass(GalleryEdit, [{
    key: "setAttributes",
    value: function setAttributes(attributes) {
      if (attributes.ids) {
        throw new Error('The "ids" attribute should not be changed directly. It is managed automatically when "images" attribute changes');
      }

      if (attributes.images) {
        attributes = _objectSpread({}, attributes, {
          ids: map(attributes.images, 'id')
        });
      }

      this.props.setAttributes(attributes);
    }
  }, {
    key: "onSelectImage",
    value: function onSelectImage(index) {
      var _this2 = this;

      return function () {
        if (_this2.state.selectedImage !== index) {
          _this2.setState({
            selectedImage: index
          });
        }
      };
    }
  }, {
    key: "onMove",
    value: function onMove(oldIndex, newIndex) {
      var images = _toConsumableArray(this.props.attributes.images);

      images.splice(newIndex, 1, this.props.attributes.images[oldIndex]);
      images.splice(oldIndex, 1, this.props.attributes.images[newIndex]);
      this.setState({
        selectedImage: newIndex
      });
      this.setAttributes({
        images: images
      });
    }
  }, {
    key: "onMoveForward",
    value: function onMoveForward(oldIndex) {
      var _this3 = this;

      return function () {
        if (oldIndex === _this3.props.attributes.images.length - 1) {
          return;
        }

        _this3.onMove(oldIndex, oldIndex + 1);
      };
    }
  }, {
    key: "onMoveBackward",
    value: function onMoveBackward(oldIndex) {
      var _this4 = this;

      return function () {
        if (oldIndex === 0) {
          return;
        }

        _this4.onMove(oldIndex, oldIndex - 1);
      };
    }
  }, {
    key: "onRemoveImage",
    value: function onRemoveImage(index) {
      var _this5 = this;

      return function () {
        var images = filter(_this5.props.attributes.images, function (img, i) {
          return index !== i;
        });
        var columns = _this5.props.attributes.columns;

        _this5.setState({
          selectedImage: null
        });

        _this5.setAttributes({
          images: images,
          columns: columns ? Math.min(images.length, columns) : columns
        });
      };
    }
  }, {
    key: "selectCaption",
    value: function selectCaption(newImage, images, attachmentCaptions) {
      var currentImage = find(images, {
        id: newImage.id
      });
      var currentImageCaption = currentImage ? currentImage.caption : newImage.caption;

      if (!attachmentCaptions) {
        return currentImageCaption;
      }

      var attachment = find(attachmentCaptions, {
        id: newImage.id
      }); // if the attachment caption is updated

      if (attachment && attachment.caption !== newImage.caption) {
        return newImage.caption;
      }

      return currentImageCaption;
    }
  }, {
    key: "onSelectImages",
    value: function onSelectImages(newImages) {
      var _this6 = this;

      var _this$props$attribute = this.props.attributes,
          columns = _this$props$attribute.columns,
          images = _this$props$attribute.images;
      var attachmentCaptions = this.state.attachmentCaptions;
      this.setState({
        attachmentCaptions: newImages.map(function (newImage) {
          return {
            id: newImage.id,
            caption: newImage.caption
          };
        })
      });
      this.setAttributes({
        images: newImages.map(function (newImage) {
          return _objectSpread({}, pickRelevantMediaFiles(newImage), {
            caption: _this6.selectCaption(newImage, images, attachmentCaptions)
          });
        }),
        columns: columns ? Math.min(newImages.length, columns) : columns
      });
    }
  }, {
    key: "onUploadError",
    value: function onUploadError(message) {
      var noticeOperations = this.props.noticeOperations;
      noticeOperations.removeAllNotices();
      noticeOperations.createErrorNotice(message);
    }
  }, {
    key: "setLinkTo",
    value: function setLinkTo(value) {
      this.setAttributes({
        linkTo: value
      });
    }
  }, {
    key: "setColumnsNumber",
    value: function setColumnsNumber(value) {
      this.setAttributes({
        columns: value
      });
    }
  }, {
    key: "toggleImageCrop",
    value: function toggleImageCrop() {
      this.setAttributes({
        imageCrop: !this.props.attributes.imageCrop
      });
    }
  }, {
    key: "getImageCropHelp",
    value: function getImageCropHelp(checked) {
      return checked ? __('Thumbnails are cropped to align.') : __('Thumbnails are not cropped.');
    }
  }, {
    key: "onFocusGalleryCaption",
    value: function onFocusGalleryCaption() {
      this.setState({
        selectedImage: null
      });
    }
  }, {
    key: "setImageAttributes",
    value: function setImageAttributes(index, attributes) {
      var images = this.props.attributes.images;
      var setAttributes = this.setAttributes;

      if (!images[index]) {
        return;
      }

      setAttributes({
        images: [].concat(_toConsumableArray(images.slice(0, index)), [_objectSpread({}, images[index], attributes)], _toConsumableArray(images.slice(index + 1)))
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          attributes = _this$props.attributes,
          mediaUpload = _this$props.mediaUpload;
      var images = attributes.images;

      if (every(images, function (_ref) {
        var url = _ref.url;
        return isBlobURL(url);
      })) {
        var filesList = map(images, function (_ref2) {
          var url = _ref2.url;
          return getBlobByURL(url);
        });
        forEach(images, function (_ref3) {
          var url = _ref3.url;
          return revokeBlobURL(url);
        });
        mediaUpload({
          filesList: filesList,
          onFileChange: this.onSelectImages,
          allowedTypes: ['image']
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      // Deselect images when deselecting the block
      if (!this.props.isSelected && prevProps.isSelected) {
        this.setState({
          selectedImage: null,
          captionSelected: false
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames,
          _this7 = this;

      var _this$props2 = this.props,
          attributes = _this$props2.attributes,
          className = _this$props2.className,
          isSelected = _this$props2.isSelected,
          noticeUI = _this$props2.noticeUI,
          setAttributes = _this$props2.setAttributes;
      var align = attributes.align,
          _attributes$columns = attributes.columns,
          columns = _attributes$columns === void 0 ? defaultColumnsNumber(attributes) : _attributes$columns,
          caption = attributes.caption,
          imageCrop = attributes.imageCrop,
          images = attributes.images,
          linkTo = attributes.linkTo;
      var hasImages = !!images.length;
      var hasImagesWithId = hasImages && some(images, function (_ref4) {
        var id = _ref4.id;
        return id;
      });
      var mediaPlaceholder = createElement(MediaPlaceholder, {
        addToGallery: hasImagesWithId,
        isAppender: hasImages,
        className: className,
        dropZoneUIOnly: hasImages && !isSelected,
        icon: !hasImages && createElement(BlockIcon, {
          icon: icon
        }),
        labels: {
          title: !hasImages && __('Gallery'),
          instructions: !hasImages && __('Drag images, upload new ones or select files from your library.')
        },
        onSelect: this.onSelectImages,
        accept: "image/*",
        allowedTypes: ALLOWED_MEDIA_TYPES,
        multiple: true,
        value: hasImagesWithId ? images : undefined,
        onError: this.onUploadError,
        notices: hasImages ? undefined : noticeUI
      });

      if (!hasImages) {
        return mediaPlaceholder;
      }

      var captionClassNames = classnames('blocks-gallery-caption', {
        'screen-reader-text': !isSelected && RichText.isEmpty(caption)
      });
      return createElement(Fragment, null, createElement(InspectorControls, null, createElement(PanelBody, {
        title: __('Gallery Settings')
      }, images.length > 1 && createElement(RangeControl, {
        label: __('Columns'),
        value: columns,
        onChange: this.setColumnsNumber,
        min: 1,
        max: Math.min(MAX_COLUMNS, images.length),
        required: true
      }), createElement(ToggleControl, {
        label: __('Crop Images'),
        checked: !!imageCrop,
        onChange: this.toggleImageCrop,
        help: this.getImageCropHelp
      }), createElement(SelectControl, {
        label: __('Link To'),
        value: linkTo,
        onChange: this.setLinkTo,
        options: linkOptions
      }))), noticeUI, createElement("figure", {
        className: classnames(className, (_classnames = {}, _defineProperty(_classnames, "align".concat(align), align), _defineProperty(_classnames, "columns-".concat(columns), columns), _defineProperty(_classnames, 'is-cropped', imageCrop), _classnames))
      }, createElement("ul", {
        className: "blocks-gallery-grid"
      }, images.map(function (img, index) {
        /* translators: %1$d is the order number of the image, %2$d is the total number of images. */
        var ariaLabel = sprintf(__('image %1$d of %2$d in gallery'), index + 1, images.length);
        return createElement("li", {
          className: "blocks-gallery-item",
          key: img.id || img.url
        }, createElement(GalleryImage, {
          url: img.url,
          alt: img.alt,
          id: img.id,
          isFirstItem: index === 0,
          isLastItem: index + 1 === images.length,
          isSelected: isSelected && _this7.state.selectedImage === index,
          onMoveBackward: _this7.onMoveBackward(index),
          onMoveForward: _this7.onMoveForward(index),
          onRemove: _this7.onRemoveImage(index),
          onSelect: _this7.onSelectImage(index),
          setAttributes: function setAttributes(attrs) {
            return _this7.setImageAttributes(index, attrs);
          },
          caption: img.caption,
          "aria-label": ariaLabel
        }));
      })), mediaPlaceholder, createElement(RichText, {
        tagName: "figcaption",
        className: captionClassNames,
        placeholder: __('Write gallery caption…'),
        value: caption,
        unstableOnFocus: this.onFocusGalleryCaption,
        onChange: function onChange(value) {
          return setAttributes({
            caption: value
          });
        },
        inlineToolbar: true
      })));
    }
  }]);

  return GalleryEdit;
}(Component);

export default compose([withSelect(function (select) {
  var _select = select('core/block-editor'),
      getSettings = _select.getSettings;

  var _getSettings = getSettings(),
      __experimentalMediaUpload = _getSettings.__experimentalMediaUpload;

  return {
    mediaUpload: __experimentalMediaUpload
  };
}), withNotices])(GalleryEdit);
//# sourceMappingURL=edit.js.map