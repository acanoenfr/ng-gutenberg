import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import { createElement } from "@wordpress/element";

/**
 * Internal dependencies
 */
import HeadingToolbar from './heading-toolbar';
import styles from './editor.scss';
/**
 * External dependencies
 */

import { View } from 'react-native';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { RichText, BlockControls } from '@wordpress/block-editor';
import { createBlock } from '@wordpress/blocks';

var HeadingEdit = function HeadingEdit(_ref) {
  var attributes = _ref.attributes,
      mergeBlocks = _ref.mergeBlocks,
      onFocus = _ref.onFocus,
      onReplace = _ref.onReplace,
      setAttributes = _ref.setAttributes,
      style = _ref.style;
  return createElement(View, {
    onAccessibilityTap: onFocus
  }, createElement(BlockControls, null, createElement(HeadingToolbar, {
    minLevel: 2,
    maxLevel: 5,
    selectedLevel: attributes.level,
    onChange: function onChange(newLevel) {
      return setAttributes({
        level: newLevel
      });
    }
  })), createElement(RichText, {
    identifier: "content",
    tagName: 'h' + attributes.level,
    value: attributes.content,
    style: _objectSpread({}, style, {
      minHeight: styles['wp-block-heading'].minHeight
    }),
    onChange: function onChange(value) {
      return setAttributes({
        content: value
      });
    },
    onMerge: mergeBlocks,
    onSplit: function onSplit(value) {
      if (!value) {
        return createBlock('core/paragraph');
      }

      return createBlock('core/heading', _objectSpread({}, attributes, {
        content: value
      }));
    },
    onReplace: onReplace,
    onRemove: function onRemove() {
      return onReplace([]);
    },
    placeholder: attributes.placeholder || __('Write headingâ€¦')
  }));
};

export default HeadingEdit;
//# sourceMappingURL=edit.native.js.map