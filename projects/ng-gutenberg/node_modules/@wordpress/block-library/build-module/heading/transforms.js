import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";

/**
 * WordPress dependencies
 */
import { createBlock, getPhrasingContentSchema, getBlockAttributes } from '@wordpress/blocks';
/**
 * Internal dependencies
 */

import { getLevelFromHeadingNodeName } from './shared';
var transforms = {
  from: [{
    type: 'block',
    blocks: ['core/paragraph'],
    transform: function transform(_ref) {
      var content = _ref.content;
      return createBlock('core/heading', {
        content: content
      });
    }
  }, {
    type: 'raw',
    selector: 'h1,h2,h3,h4,h5,h6',
    schema: {
      h1: {
        children: getPhrasingContentSchema()
      },
      h2: {
        children: getPhrasingContentSchema()
      },
      h3: {
        children: getPhrasingContentSchema()
      },
      h4: {
        children: getPhrasingContentSchema()
      },
      h5: {
        children: getPhrasingContentSchema()
      },
      h6: {
        children: getPhrasingContentSchema()
      }
    },
    transform: function transform(node) {
      return createBlock('core/heading', _objectSpread({}, getBlockAttributes('core/heading', node.outerHTML), {
        level: getLevelFromHeadingNodeName(node.nodeName)
      }));
    }
  }].concat(_toConsumableArray([2, 3, 4, 5, 6].map(function (level) {
    return {
      type: 'prefix',
      prefix: Array(level + 1).join('#'),
      transform: function transform(content) {
        return createBlock('core/heading', {
          level: level,
          content: content
        });
      }
    };
  }))),
  to: [{
    type: 'block',
    blocks: ['core/paragraph'],
    transform: function transform(_ref2) {
      var content = _ref2.content;
      return createBlock('core/paragraph', {
        content: content
      });
    }
  }]
};
export default transforms;
//# sourceMappingURL=transforms.js.map