import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * Internal dependencies
 */

import HeadingToolbar from './heading-toolbar';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { PanelBody } from '@wordpress/components';
import { compose } from '@wordpress/compose';
import { createBlock } from '@wordpress/blocks';
import { AlignmentToolbar, BlockControls, InspectorControls, RichText, withColors, PanelColorSettings } from '@wordpress/block-editor';
import { memo } from '@wordpress/element';
var HeadingColorUI = memo(function (_ref) {
  var textColorValue = _ref.textColorValue,
      setTextColor = _ref.setTextColor;
  return createElement(PanelColorSettings, {
    title: __('Color Settings'),
    initialOpen: false,
    colorSettings: [{
      value: textColorValue,
      onChange: setTextColor,
      label: __('Text Color')
    }]
  });
});

function HeadingEdit(_ref2) {
  var _classnames;

  var attributes = _ref2.attributes,
      setAttributes = _ref2.setAttributes,
      mergeBlocks = _ref2.mergeBlocks,
      onReplace = _ref2.onReplace,
      className = _ref2.className,
      textColor = _ref2.textColor,
      setTextColor = _ref2.setTextColor;
  var align = attributes.align,
      content = attributes.content,
      level = attributes.level,
      placeholder = attributes.placeholder;
  var tagName = 'h' + level;
  return createElement(Fragment, null, createElement(BlockControls, null, createElement(HeadingToolbar, {
    minLevel: 2,
    maxLevel: 5,
    selectedLevel: level,
    onChange: function onChange(newLevel) {
      return setAttributes({
        level: newLevel
      });
    }
  }), createElement(AlignmentToolbar, {
    value: align,
    onChange: function onChange(nextAlign) {
      setAttributes({
        align: nextAlign
      });
    }
  })), createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Heading Settings')
  }, createElement("p", null, __('Level')), createElement(HeadingToolbar, {
    isCollapsed: false,
    minLevel: 1,
    maxLevel: 7,
    selectedLevel: level,
    onChange: function onChange(newLevel) {
      return setAttributes({
        level: newLevel
      });
    }
  })), createElement(HeadingColorUI, {
    setTextColor: setTextColor,
    textColorValue: textColor.color
  })), createElement(RichText, {
    identifier: "content",
    wrapperClassName: "wp-block-heading",
    tagName: tagName,
    value: content,
    onChange: function onChange(value) {
      return setAttributes({
        content: value
      });
    },
    onMerge: mergeBlocks,
    onSplit: function onSplit(value) {
      if (!value) {
        return createBlock('core/paragraph');
      }

      return createBlock('core/heading', _objectSpread({}, attributes, {
        content: value
      }));
    },
    onReplace: onReplace,
    onRemove: function onRemove() {
      return onReplace([]);
    },
    className: classnames(className, (_classnames = {}, _defineProperty(_classnames, "has-text-align-".concat(align), align), _defineProperty(_classnames, 'has-text-color', textColor.color), _defineProperty(_classnames, textColor.class, textColor.class), _classnames)),
    placeholder: placeholder || __('Write headingâ€¦'),
    style: {
      color: textColor.color
    }
  }));
}

export default compose([withColors('backgroundColor', {
  textColor: 'color'
})])(HeadingEdit);
//# sourceMappingURL=edit.js.map