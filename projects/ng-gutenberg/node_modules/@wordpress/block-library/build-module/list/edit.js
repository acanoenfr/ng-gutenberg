import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __, _x } from '@wordpress/i18n';
import { createBlock } from '@wordpress/blocks';
import { RichText, BlockControls, RichTextShortcut } from '@wordpress/block-editor';
import { Toolbar } from '@wordpress/components';
import { __unstableIndentListItems as indentListItems, __unstableOutdentListItems as outdentListItems, __unstableChangeListType as changeListType, __unstableIsListRootSelected as isListRootSelected, __unstableIsActiveListType as isActiveListType } from '@wordpress/rich-text';
/**
 * Internal dependencies
 */

import { name } from './';
import OrderedListSettings from './ordered-list-settings';
export default function ListEdit(_ref) {
  var attributes = _ref.attributes,
      setAttributes = _ref.setAttributes,
      mergeBlocks = _ref.mergeBlocks,
      onReplace = _ref.onReplace,
      className = _ref.className;
  var ordered = attributes.ordered,
      values = attributes.values,
      reversed = attributes.reversed,
      start = attributes.start;
  var tagName = ordered ? 'ol' : 'ul';

  var controls = function controls(_ref2) {
    var value = _ref2.value,
        onChange = _ref2.onChange;
    return createElement(Fragment, null, createElement(RichTextShortcut, {
      type: "primary",
      character: "[",
      onUse: function onUse() {
        onChange(outdentListItems(value));
      }
    }), createElement(RichTextShortcut, {
      type: "primary",
      character: "]",
      onUse: function onUse() {
        onChange(indentListItems(value, {
          type: tagName
        }));
      }
    }), createElement(RichTextShortcut, {
      type: "primary",
      character: "m",
      onUse: function onUse() {
        onChange(indentListItems(value, {
          type: tagName
        }));
      }
    }), createElement(RichTextShortcut, {
      type: "primaryShift",
      character: "m",
      onUse: function onUse() {
        onChange(outdentListItems(value));
      }
    }), createElement(BlockControls, null, createElement(Toolbar, {
      controls: [{
        icon: 'editor-ul',
        title: __('Convert to unordered list'),
        isActive: isActiveListType(value, 'ul', tagName),
        onClick: function onClick() {
          onChange(changeListType(value, {
            type: 'ul'
          }));

          if (isListRootSelected(value)) {
            setAttributes({
              ordered: false
            });
          }
        }
      }, {
        icon: 'editor-ol',
        title: __('Convert to ordered list'),
        isActive: isActiveListType(value, 'ol', tagName),
        onClick: function onClick() {
          onChange(changeListType(value, {
            type: 'ol'
          }));

          if (isListRootSelected(value)) {
            setAttributes({
              ordered: true
            });
          }
        }
      }, {
        icon: 'editor-outdent',
        title: __('Outdent list item'),
        shortcut: _x('Backspace', 'keyboard key'),
        onClick: function onClick() {
          onChange(outdentListItems(value));
        }
      }, {
        icon: 'editor-indent',
        title: __('Indent list item'),
        shortcut: _x('Space', 'keyboard key'),
        onClick: function onClick() {
          onChange(indentListItems(value, {
            type: tagName
          }));
        }
      }]
    })));
  };

  return createElement(Fragment, null, createElement(RichText, {
    identifier: "values",
    multiline: "li",
    tagName: tagName,
    onChange: function onChange(nextValues) {
      return setAttributes({
        values: nextValues
      });
    },
    value: values,
    wrapperClassName: "block-library-list",
    className: className,
    placeholder: __('Write listâ€¦'),
    onMerge: mergeBlocks,
    onSplit: function onSplit(value) {
      return createBlock(name, {
        ordered: ordered,
        values: value
      });
    },
    __unstableOnSplitMiddle: function __unstableOnSplitMiddle() {
      return createBlock('core/paragraph');
    },
    onReplace: onReplace,
    onRemove: function onRemove() {
      return onReplace([]);
    },
    start: start,
    reversed: reversed
  }, controls), ordered && createElement(OrderedListSettings, {
    setAttributes: setAttributes,
    ordered: ordered,
    reversed: reversed,
    start: start
  }));
}
//# sourceMappingURL=edit.js.map