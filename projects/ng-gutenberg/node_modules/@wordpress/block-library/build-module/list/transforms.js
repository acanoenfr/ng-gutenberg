import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";

/**
 * WordPress dependencies
 */
import { createBlock, getBlockAttributes, getPhrasingContentSchema } from '@wordpress/blocks';
import { __UNSTABLE_LINE_SEPARATOR, create, join, replace, split, toHTMLString } from '@wordpress/rich-text';

var listContentSchema = _objectSpread({}, getPhrasingContentSchema(), {
  ul: {},
  ol: {
    attributes: ['type']
  }
}); // Recursion is needed.
// Possible: ul > li > ul.
// Impossible: ul > ul.


['ul', 'ol'].forEach(function (tag) {
  listContentSchema[tag].children = {
    li: {
      children: listContentSchema
    }
  };
});
var transforms = {
  from: [{
    type: 'block',
    isMultiBlock: true,
    blocks: ['core/paragraph'],
    transform: function transform(blockAttributes) {
      return createBlock('core/list', {
        values: toHTMLString({
          value: join(blockAttributes.map(function (_ref) {
            var content = _ref.content;
            var value = create({
              html: content
            });

            if (blockAttributes.length > 1) {
              return value;
            } // When converting only one block, transform
            // every line to a list item.


            return replace(value, /\n/g, __UNSTABLE_LINE_SEPARATOR);
          }), __UNSTABLE_LINE_SEPARATOR),
          multilineTag: 'li'
        })
      });
    }
  }, {
    type: 'block',
    blocks: ['core/quote'],
    transform: function transform(_ref2) {
      var value = _ref2.value;
      return createBlock('core/list', {
        values: toHTMLString({
          value: create({
            html: value,
            multilineTag: 'p'
          }),
          multilineTag: 'li'
        })
      });
    }
  }, {
    type: 'raw',
    selector: 'ol,ul',
    schema: {
      ol: listContentSchema.ol,
      ul: listContentSchema.ul
    },
    transform: function transform(node) {
      return createBlock('core/list', _objectSpread({}, getBlockAttributes('core/list', node.outerHTML), {
        ordered: node.nodeName === 'OL'
      }));
    }
  }].concat(_toConsumableArray(['*', '-'].map(function (prefix) {
    return {
      type: 'prefix',
      prefix: prefix,
      transform: function transform(content) {
        return createBlock('core/list', {
          values: "<li>".concat(content, "</li>")
        });
      }
    };
  })), _toConsumableArray(['1.', '1)'].map(function (prefix) {
    return {
      type: 'prefix',
      prefix: prefix,
      transform: function transform(content) {
        return createBlock('core/list', {
          ordered: true,
          values: "<li>".concat(content, "</li>")
        });
      }
    };
  }))),
  to: [{
    type: 'block',
    blocks: ['core/paragraph'],
    transform: function transform(_ref3) {
      var values = _ref3.values;
      return split(create({
        html: values,
        multilineTag: 'li',
        multilineWrapperTags: ['ul', 'ol']
      }), __UNSTABLE_LINE_SEPARATOR).map(function (piece) {
        return createBlock('core/paragraph', {
          content: toHTMLString({
            value: piece
          })
        });
      });
    }
  }, {
    type: 'block',
    blocks: ['core/quote'],
    transform: function transform(_ref4) {
      var values = _ref4.values;
      return createBlock('core/quote', {
        value: toHTMLString({
          value: create({
            html: values,
            multilineTag: 'li',
            multilineWrapperTags: ['ul', 'ol']
          }),
          multilineTag: 'p'
        })
      });
    }
  }]
};
export default transforms;
//# sourceMappingURL=transforms.js.map