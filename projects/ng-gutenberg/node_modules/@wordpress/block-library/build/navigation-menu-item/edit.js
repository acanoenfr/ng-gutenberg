"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _lodash = require("lodash");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _menuItemActions = _interopRequireDefault(require("./menu-item-actions"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var POPOVER_PROPS = {
  noArrow: true
};

function NavigationMenuItemEdit(_ref) {
  var attributes = _ref.attributes,
      clientId = _ref.clientId,
      isSelected = _ref.isSelected,
      setAttributes = _ref.setAttributes;
  var plainTextRef = (0, _element.useRef)(null);
  var onEditLableClicked = (0, _element.useCallback)(function (onClose) {
    return function () {
      onClose();
      (0, _lodash.invoke)(plainTextRef, ['current', 'textarea', 'focus']);
    };
  }, [plainTextRef]);
  var content;

  if (isSelected) {
    content = (0, _element.createElement)("div", {
      className: "wp-block-navigation-menu-item__edit-container"
    }, (0, _element.createElement)(_blockEditor.PlainText, {
      ref: plainTextRef,
      className: "wp-block-navigation-menu-item__field",
      value: attributes.label,
      onChange: function onChange(label) {
        return setAttributes({
          label: label
        });
      },
      "aria-label": (0, _i18n.__)('Navigation Label'),
      maxRows: 1
    }), (0, _element.createElement)(_components.Dropdown, {
      contentClassName: "wp-block-navigation-menu-item__dropdown-content",
      position: "bottom left",
      popoverProps: POPOVER_PROPS,
      renderToggle: function renderToggle(_ref2) {
        var isOpen = _ref2.isOpen,
            onToggle = _ref2.onToggle;
        return (0, _element.createElement)(_components.IconButton, {
          icon: isOpen ? 'arrow-up-alt2' : 'arrow-down-alt2',
          label: (0, _i18n.__)('More options'),
          onClick: onToggle,
          "aria-expanded": isOpen
        });
      },
      renderContent: function renderContent(_ref3) {
        var onClose = _ref3.onClose;
        return (0, _element.createElement)(_menuItemActions.default, {
          clientId: clientId,
          destination: attributes.destination,
          onEditLableClicked: onEditLableClicked(onClose)
        });
      }
    }));
  } else {
    content = attributes.label;
  }

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Menu Settings')
  }, (0, _element.createElement)(_components.ToggleControl, {
    checked: attributes.opensInNewTab,
    onChange: function onChange(opensInNewTab) {
      setAttributes({
        opensInNewTab: opensInNewTab
      });
    },
    label: (0, _i18n.__)('Open in new tab')
  }), (0, _element.createElement)(_components.TextareaControl, {
    value: attributes.description || '',
    onChange: function onChange(description) {
      setAttributes({
        description: description
      });
    },
    label: (0, _i18n.__)('Description')
  })), (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('SEO Settings')
  }, (0, _element.createElement)(_components.TextControl, {
    value: attributes.title || '',
    onChange: function onChange(title) {
      setAttributes({
        title: title
      });
    },
    label: (0, _i18n.__)('Title Attribute'),
    help: (0, _i18n.__)('Provide more context about where the link goes.')
  }), (0, _element.createElement)(_components.ToggleControl, {
    checked: attributes.nofollow,
    onChange: function onChange(nofollow) {
      setAttributes({
        nofollow: nofollow
      });
    },
    label: (0, _i18n.__)('Add nofollow to menu item'),
    help: (0, _element.createElement)(_element.Fragment, null, (0, _i18n.__)('Don\'t let search engines follow this link.'), (0, _element.createElement)(_components.ExternalLink, {
      className: "wp-block-navigation-menu-item__nofollow-external-link",
      href: (0, _i18n.__)('https://codex.wordpress.org/Nofollow')
    }, (0, _i18n.__)('What\'s this?')))
  }))), (0, _element.createElement)("div", {
    className: "wp-block-navigation-menu-item"
  }, content, (0, _element.createElement)(_blockEditor.InnerBlocks, {
    allowedBlocks: ['core/navigation-menu-item'],
    renderAppender: _blockEditor.InnerBlocks.ButtonBlockAppender
  })));
}

var _default = NavigationMenuItemEdit;
exports.default = _default;
//# sourceMappingURL=edit.js.map