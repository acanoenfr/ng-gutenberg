{"version":3,"sources":["@wordpress/block-library/src/column/edit.js"],"names":["ColumnEdit","attributes","className","updateAlignment","updateWidth","hasChildBlocks","verticalAlignment","width","classes","undefined","select","ownProps","clientId","getBlockOrder","length","dispatch","registry","setAttributes","updateBlockAttributes","getBlockRootClientId","rootClientId","getBlocks","columns","adjacentColumns","occupiedWidth","nextColumnWidths","nextColumnWidth","columnClientId"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { forEach, find, difference } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tInnerBlocks,\n\tBlockControls,\n\tBlockVerticalAlignmentToolbar,\n\tInspectorControls,\n} from '@wordpress/block-editor';\nimport { PanelBody, RangeControl } from '@wordpress/components';\nimport { withDispatch, withSelect } from '@wordpress/data';\nimport { compose } from '@wordpress/compose';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport {\n\ttoWidthPrecision,\n\tgetTotalColumnsWidth,\n\tgetColumnWidths,\n\tgetAdjacentBlocks,\n\tgetRedistributedColumnWidths,\n} from '../columns/utils';\n\nfunction ColumnEdit( {\n\tattributes,\n\tclassName,\n\tupdateAlignment,\n\tupdateWidth,\n\thasChildBlocks,\n} ) {\n\tconst { verticalAlignment, width } = attributes;\n\n\tconst classes = classnames(\n\t\tclassName,\n\t\t'block-core-columns',\n\t\t{\n\t\t\t[ `is-vertically-aligned-${ verticalAlignment }` ]: verticalAlignment,\n\t\t}\n\t);\n\n\treturn (\n\t\t<div className={ classes }>\n\t\t\t<BlockControls>\n\t\t\t\t<BlockVerticalAlignmentToolbar\n\t\t\t\t\tonChange={ updateAlignment }\n\t\t\t\t\tvalue={ verticalAlignment }\n\t\t\t\t/>\n\t\t\t</BlockControls>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Column Settings' ) }>\n\t\t\t\t\t<RangeControl\n\t\t\t\t\t\tlabel={ __( 'Percentage width' ) }\n\t\t\t\t\t\tvalue={ width || '' }\n\t\t\t\t\t\tonChange={ updateWidth }\n\t\t\t\t\t\tmin={ 0 }\n\t\t\t\t\t\tmax={ 100 }\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tallowReset\n\t\t\t\t\t/>\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t<InnerBlocks\n\t\t\t\ttemplateLock={ false }\n\t\t\t\trenderAppender={ (\n\t\t\t\t\thasChildBlocks ?\n\t\t\t\t\t\tundefined :\n\t\t\t\t\t\t() => <InnerBlocks.ButtonBlockAppender />\n\t\t\t\t) }\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default compose(\n\twithSelect( ( select, ownProps ) => {\n\t\tconst { clientId } = ownProps;\n\t\tconst { getBlockOrder } = select( 'core/block-editor' );\n\n\t\treturn {\n\t\t\thasChildBlocks: getBlockOrder( clientId ).length > 0,\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch, ownProps, registry ) => {\n\t\treturn {\n\t\t\tupdateAlignment( verticalAlignment ) {\n\t\t\t\tconst { clientId, setAttributes } = ownProps;\n\t\t\t\tconst { updateBlockAttributes } = dispatch( 'core/block-editor' );\n\t\t\t\tconst { getBlockRootClientId } = registry.select( 'core/block-editor' );\n\n\t\t\t\t// Update own alignment.\n\t\t\t\tsetAttributes( { verticalAlignment } );\n\n\t\t\t\t// Reset Parent Columns Block\n\t\t\t\tconst rootClientId = getBlockRootClientId( clientId );\n\t\t\t\tupdateBlockAttributes( rootClientId, { verticalAlignment: null } );\n\t\t\t},\n\t\t\tupdateWidth( width ) {\n\t\t\t\tconst { clientId } = ownProps;\n\t\t\t\tconst { updateBlockAttributes } = dispatch( 'core/block-editor' );\n\t\t\t\tconst { getBlockRootClientId, getBlocks } = registry.select( 'core/block-editor' );\n\n\t\t\t\t// Constrain or expand siblings to account for gain or loss of\n\t\t\t\t// total columns area.\n\t\t\t\tconst columns = getBlocks( getBlockRootClientId( clientId ) );\n\t\t\t\tconst adjacentColumns = getAdjacentBlocks( columns, clientId );\n\n\t\t\t\t// The occupied width is calculated as the sum of the new width\n\t\t\t\t// and the total width of blocks _not_ in the adjacent set.\n\t\t\t\tconst occupiedWidth = width + getTotalColumnsWidth(\n\t\t\t\t\tdifference( columns, [\n\t\t\t\t\t\tfind( columns, { clientId } ),\n\t\t\t\t\t\t...adjacentColumns,\n\t\t\t\t\t] )\n\t\t\t\t);\n\n\t\t\t\t// Compute _all_ next column widths, in case the updated column\n\t\t\t\t// is in the middle of a set of columns which don't yet have\n\t\t\t\t// any explicit widths assigned (include updates to those not\n\t\t\t\t// part of the adjacent blocks).\n\t\t\t\tconst nextColumnWidths = {\n\t\t\t\t\t...getColumnWidths( columns, columns.length ),\n\t\t\t\t\t[ clientId ]: toWidthPrecision( width ),\n\t\t\t\t\t...getRedistributedColumnWidths( adjacentColumns, 100 - occupiedWidth, columns.length ),\n\t\t\t\t};\n\n\t\t\t\tforEach( nextColumnWidths, ( nextColumnWidth, columnClientId ) => {\n\t\t\t\t\tupdateBlockAttributes( columnClientId, { width: nextColumnWidth } );\n\t\t\t\t} );\n\t\t\t},\n\t\t};\n\t} )\n)( ColumnEdit );\n"]}