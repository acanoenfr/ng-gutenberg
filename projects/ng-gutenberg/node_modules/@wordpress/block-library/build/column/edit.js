"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _i18n = require("@wordpress/i18n");

var _utils = require("../columns/utils");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ColumnEdit(_ref) {
  var attributes = _ref.attributes,
      className = _ref.className,
      updateAlignment = _ref.updateAlignment,
      updateWidth = _ref.updateWidth,
      hasChildBlocks = _ref.hasChildBlocks;
  var verticalAlignment = attributes.verticalAlignment,
      width = attributes.width;
  var classes = (0, _classnames2.default)(className, 'block-core-columns', (0, _defineProperty2.default)({}, "is-vertically-aligned-".concat(verticalAlignment), verticalAlignment));
  return (0, _element.createElement)("div", {
    className: classes
  }, (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_blockEditor.BlockVerticalAlignmentToolbar, {
    onChange: updateAlignment,
    value: verticalAlignment
  })), (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Column Settings')
  }, (0, _element.createElement)(_components.RangeControl, {
    label: (0, _i18n.__)('Percentage width'),
    value: width || '',
    onChange: updateWidth,
    min: 0,
    max: 100,
    required: true,
    allowReset: true
  }))), (0, _element.createElement)(_blockEditor.InnerBlocks, {
    templateLock: false,
    renderAppender: hasChildBlocks ? undefined : function () {
      return (0, _element.createElement)(_blockEditor.InnerBlocks.ButtonBlockAppender, null);
    }
  }));
}

var _default = (0, _compose.compose)((0, _data.withSelect)(function (select, ownProps) {
  var clientId = ownProps.clientId;

  var _select = select('core/block-editor'),
      getBlockOrder = _select.getBlockOrder;

  return {
    hasChildBlocks: getBlockOrder(clientId).length > 0
  };
}), (0, _data.withDispatch)(function (dispatch, ownProps, registry) {
  return {
    updateAlignment: function updateAlignment(verticalAlignment) {
      var clientId = ownProps.clientId,
          setAttributes = ownProps.setAttributes;

      var _dispatch = dispatch('core/block-editor'),
          updateBlockAttributes = _dispatch.updateBlockAttributes;

      var _registry$select = registry.select('core/block-editor'),
          getBlockRootClientId = _registry$select.getBlockRootClientId; // Update own alignment.


      setAttributes({
        verticalAlignment: verticalAlignment
      }); // Reset Parent Columns Block

      var rootClientId = getBlockRootClientId(clientId);
      updateBlockAttributes(rootClientId, {
        verticalAlignment: null
      });
    },
    updateWidth: function updateWidth(width) {
      var clientId = ownProps.clientId;

      var _dispatch2 = dispatch('core/block-editor'),
          updateBlockAttributes = _dispatch2.updateBlockAttributes;

      var _registry$select2 = registry.select('core/block-editor'),
          getBlockRootClientId = _registry$select2.getBlockRootClientId,
          getBlocks = _registry$select2.getBlocks; // Constrain or expand siblings to account for gain or loss of
      // total columns area.


      var columns = getBlocks(getBlockRootClientId(clientId));
      var adjacentColumns = (0, _utils.getAdjacentBlocks)(columns, clientId); // The occupied width is calculated as the sum of the new width
      // and the total width of blocks _not_ in the adjacent set.

      var occupiedWidth = width + (0, _utils.getTotalColumnsWidth)((0, _lodash.difference)(columns, [(0, _lodash.find)(columns, {
        clientId: clientId
      })].concat((0, _toConsumableArray2.default)(adjacentColumns)))); // Compute _all_ next column widths, in case the updated column
      // is in the middle of a set of columns which don't yet have
      // any explicit widths assigned (include updates to those not
      // part of the adjacent blocks).

      var nextColumnWidths = (0, _objectSpread3.default)({}, (0, _utils.getColumnWidths)(columns, columns.length), (0, _defineProperty2.default)({}, clientId, (0, _utils.toWidthPrecision)(width)), (0, _utils.getRedistributedColumnWidths)(adjacentColumns, 100 - occupiedWidth, columns.length));
      (0, _lodash.forEach)(nextColumnWidths, function (nextColumnWidth, columnClientId) {
        updateBlockAttributes(columnClientId, {
          width: nextColumnWidth
        });
      });
    }
  };
}))(ColumnEdit);

exports.default = _default;
//# sourceMappingURL=edit.js.map