"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _videoPlayer = _interopRequireDefault(require("./video-player"));

var _reactNativeGutenbergBridge = require("react-native-gutenberg-bridge");

var _components = require("@wordpress/components");

var _blockEditor = require("@wordpress/block-editor");

var _i18n = require("@wordpress/i18n");

var _url = require("@wordpress/url");

var _hooks = require("@wordpress/hooks");

var _mediaUploadProgress = _interopRequireDefault(require("../image/media-upload-progress"));

var _style = _interopRequireDefault(require("./style.scss"));

var _icon = _interopRequireDefault(require("./icon"));

var _iconRetry = _interopRequireDefault(require("./icon-retry"));

/**
 * External dependencies
 */

/**
 * Internal dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var VIDEO_ASPECT_RATIO = 1.7;

var VideoEdit =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(VideoEdit, _React$Component);

  function VideoEdit(props) {
    var _this;

    (0, _classCallCheck2.default)(this, VideoEdit);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(VideoEdit).call(this, props));
    _this.state = {
      isCaptionSelected: false,
      showSettings: false,
      videoContainerHeight: 0
    };
    _this.mediaUploadStateReset = _this.mediaUploadStateReset.bind((0, _assertThisInitialized2.default)(_this));
    _this.onSelectMediaUploadOption = _this.onSelectMediaUploadOption.bind((0, _assertThisInitialized2.default)(_this));
    _this.finishMediaUploadWithSuccess = _this.finishMediaUploadWithSuccess.bind((0, _assertThisInitialized2.default)(_this));
    _this.finishMediaUploadWithFailure = _this.finishMediaUploadWithFailure.bind((0, _assertThisInitialized2.default)(_this));
    _this.updateMediaProgress = _this.updateMediaProgress.bind((0, _assertThisInitialized2.default)(_this));
    _this.onVideoPressed = _this.onVideoPressed.bind((0, _assertThisInitialized2.default)(_this));
    _this.onVideoContanerLayout = _this.onVideoContanerLayout.bind((0, _assertThisInitialized2.default)(_this));
    _this.onFocusCaption = _this.onFocusCaption.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(VideoEdit, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var attributes = this.props.attributes;

      if (attributes.id && !(0, _url.isURL)(attributes.src)) {
        (0, _reactNativeGutenbergBridge.mediaUploadSync)();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // this action will only exist if the user pressed the trash button on the block holder
      if ((0, _hooks.hasAction)('blocks.onRemoveBlockCheckUpload') && this.state.isUploadInProgress) {
        (0, _hooks.doAction)('blocks.onRemoveBlockCheckUpload', this.props.attributes.id);
      }
    }
  }, {
    key: "onVideoPressed",
    value: function onVideoPressed() {
      var attributes = this.props.attributes;

      if (this.state.isUploadInProgress) {
        (0, _reactNativeGutenbergBridge.requestImageUploadCancelDialog)(attributes.id);
      } else if (attributes.id && !(0, _url.isURL)(attributes.src)) {
        (0, _reactNativeGutenbergBridge.requestImageFailedRetryDialog)(attributes.id);
      }

      this.setState({
        isCaptionSelected: false
      });
    }
  }, {
    key: "onFocusCaption",
    value: function onFocusCaption() {
      if (!this.state.isCaptionSelected) {
        this.setState({
          isCaptionSelected: true
        });
      }
    }
  }, {
    key: "updateMediaProgress",
    value: function updateMediaProgress(payload) {
      var setAttributes = this.props.setAttributes;

      if (payload.mediaUrl) {
        setAttributes({
          url: payload.mediaUrl
        });
      }

      if (!this.state.isUploadInProgress) {
        this.setState({
          isUploadInProgress: true
        });
      }
    }
  }, {
    key: "finishMediaUploadWithSuccess",
    value: function finishMediaUploadWithSuccess(payload) {
      var setAttributes = this.props.setAttributes;
      setAttributes({
        src: payload.mediaUrl,
        id: payload.mediaServerId
      });
      this.setState({
        isUploadInProgress: false
      });
    }
  }, {
    key: "finishMediaUploadWithFailure",
    value: function finishMediaUploadWithFailure(payload) {
      var setAttributes = this.props.setAttributes;
      setAttributes({
        id: payload.mediaId
      });
      this.setState({
        isUploadInProgress: false
      });
    }
  }, {
    key: "mediaUploadStateReset",
    value: function mediaUploadStateReset() {
      var setAttributes = this.props.setAttributes;
      setAttributes({
        id: null,
        src: null
      });
      this.setState({
        isUploadInProgress: false
      });
    }
  }, {
    key: "onSelectMediaUploadOption",
    value: function onSelectMediaUploadOption(mediaId, mediaUrl) {
      var setAttributes = this.props.setAttributes;
      setAttributes({
        id: mediaId,
        src: mediaUrl
      });
    }
  }, {
    key: "onVideoContanerLayout",
    value: function onVideoContanerLayout(event) {
      var width = event.nativeEvent.layout.width;
      var height = width / VIDEO_ASPECT_RATIO;

      if (height !== this.state.videoContainerHeight) {
        this.setState({
          videoContainerHeight: height
        });
      }
    }
  }, {
    key: "getIcon",
    value: function getIcon(isRetryIcon, isMediaPlaceholder) {
      if (isRetryIcon) {
        return (0, _element.createElement)(_components.Icon, (0, _extends2.default)({
          icon: _iconRetry.default
        }, _style.default.icon));
      }

      return (0, _element.createElement)(_components.Icon, (0, _extends2.default)({
        icon: _icon.default
      }, !isMediaPlaceholder ? _style.default.iconUploading : _style.default.icon));
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          attributes = _this$props.attributes,
          isSelected = _this$props.isSelected;
      var id = attributes.id,
          src = attributes.src;
      var videoContainerHeight = this.state.videoContainerHeight;
      var toolbarEditButton = (0, _element.createElement)(_blockEditor.MediaUpload, {
        mediaType: _blockEditor.MEDIA_TYPE_VIDEO,
        onSelectURL: this.onSelectMediaUploadOption,
        render: function render(_ref) {
          var open = _ref.open,
              getMediaOptions = _ref.getMediaOptions;
          return (0, _element.createElement)(_components.Toolbar, null, getMediaOptions(), (0, _element.createElement)(_components.ToolbarButton, {
            label: (0, _i18n.__)('Edit video'),
            icon: "edit",
            onClick: open
          }));
        }
      });

      if (!id) {
        return (0, _element.createElement)(_reactNative.View, {
          style: {
            flex: 1
          }
        }, (0, _element.createElement)(_blockEditor.MediaPlaceholder, {
          mediaType: _blockEditor.MEDIA_TYPE_VIDEO,
          onSelectURL: this.onSelectMediaUploadOption,
          icon: this.getIcon(false, true),
          onFocus: this.props.onFocus
        }));
      }

      return (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
        onPress: this.onVideoPressed,
        disabled: !isSelected
      }, (0, _element.createElement)(_reactNative.View, {
        style: {
          flex: 1
        }
      }, !this.state.isCaptionSelected && (0, _element.createElement)(_blockEditor.BlockControls, null, toolbarEditButton), (0, _element.createElement)(_blockEditor.InspectorControls, null, false && (0, _element.createElement)(_components.ToolbarButton //Not rendering settings button until it has an action
      , {
        label: (0, _i18n.__)('Video Settings'),
        icon: "admin-generic",
        onClick: function onClick() {
          return null;
        }
      })), (0, _element.createElement)(_mediaUploadProgress.default, {
        mediaId: id,
        onFinishMediaUploadWithSuccess: this.finishMediaUploadWithSuccess,
        onFinishMediaUploadWithFailure: this.finishMediaUploadWithFailure,
        onUpdateMediaProgress: this.updateMediaProgress,
        onMediaUploadStateReset: this.mediaUploadStateReset,
        renderContent: function renderContent(_ref2) {
          var isUploadInProgress = _ref2.isUploadInProgress,
              isUploadFailed = _ref2.isUploadFailed,
              retryMessage = _ref2.retryMessage;
          var showVideo = (0, _url.isURL)(src) && !isUploadInProgress && !isUploadFailed;

          var icon = _this2.getIcon(isUploadFailed, false);

          var styleIconContainer = isUploadFailed ? _style.default.modalIconRetry : _style.default.modalIcon;
          var iconContainer = (0, _element.createElement)(_reactNative.View, {
            style: styleIconContainer
          }, icon);
          var videoStyle = (0, _objectSpread2.default)({
            height: videoContainerHeight
          }, _style.default.video);
          var containerStyle = showVideo && isSelected ? _style.default.containerFocused : _style.default.container;
          return (0, _element.createElement)(_reactNative.View, {
            onLayout: _this2.onVideoContanerLayout,
            style: containerStyle
          }, showVideo && (0, _element.createElement)(_reactNative.View, {
            style: _style.default.videoContainer
          }, (0, _element.createElement)(_videoPlayer.default, {
            isSelected: isSelected && !_this2.state.isCaptionSelected,
            style: videoStyle,
            source: {
              uri: src
            },
            paused: true
          })), !showVideo && (0, _element.createElement)(_reactNative.View, {
            style: (0, _objectSpread2.default)({
              height: videoContainerHeight,
              width: '100%'
            }, _style.default.placeholder)
          }, videoContainerHeight > 0 && iconContainer, isUploadFailed && (0, _element.createElement)(_reactNative.Text, {
            style: _style.default.uploadFailedText
          }, retryMessage)));
        }
      }), (0, _element.createElement)(_blockEditor.Caption, {
        clientId: this.props.clientId,
        isSelected: this.state.isCaptionSelected,
        onFocus: this.onFocusCaption,
        onBlur: this.props.onBlur // always assign onBlur as props

      })));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      // Avoid a UI flicker in the toolbar by insuring that isCaptionSelected
      // is updated immediately any time the isSelected prop becomes false
      return {
        isCaptionSelected: props.isSelected && state.isCaptionSelected
      };
    }
  }]);
  return VideoEdit;
}(_react.default.Component);

var _default = VideoEdit;
exports.default = _default;
//# sourceMappingURL=edit.native.js.map