{"version":3,"sources":["@wordpress/block-library/src/pullquote/deprecated.js"],"names":["blockAttributes","value","type","source","selector","multiline","citation","default","mainColor","customMainColor","textColor","customTextColor","deprecated","attributes","save","className","isSolidColorStyle","SOLID_COLOR_CLASS","figureClass","figureStyles","backgroundColor","borderColor","colors","getSettings","colorObject","color","blockquoteTextColorClass","blockquoteClasses","undefined","blockquoteStyle","RichText","isEmpty","align"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { get, includes } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetColorClassName,\n\tgetColorObjectByAttributeValues,\n\tRichText,\n} from '@wordpress/block-editor';\nimport {\n\tselect,\n} from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { SOLID_COLOR_CLASS } from './shared';\n\nconst blockAttributes = {\n\tvalue: {\n\t\ttype: 'string',\n\t\tsource: 'html',\n\t\tselector: 'blockquote',\n\t\tmultiline: 'p',\n\t},\n\tcitation: {\n\t\ttype: 'string',\n\t\tsource: 'html',\n\t\tselector: 'cite',\n\t\tdefault: '',\n\t},\n\tmainColor: {\n\t\ttype: 'string',\n\t},\n\tcustomMainColor: {\n\t\ttype: 'string',\n\t},\n\ttextColor: {\n\t\ttype: 'string',\n\t},\n\tcustomTextColor: {\n\t\ttype: 'string',\n\t},\n};\n\nconst deprecated = [\n\t{\n\t\tattributes: blockAttributes,\n\t\tsave( { attributes } ) {\n\t\t\tconst { mainColor, customMainColor, textColor, customTextColor, value, citation, className } = attributes;\n\t\t\tconst isSolidColorStyle = includes( className, SOLID_COLOR_CLASS );\n\n\t\t\tlet figureClass, figureStyles;\n\t\t\t// Is solid color style\n\t\t\tif ( isSolidColorStyle ) {\n\t\t\t\tfigureClass = getColorClassName( 'background-color', mainColor );\n\t\t\t\tif ( ! figureClass ) {\n\t\t\t\t\tfigureStyles = {\n\t\t\t\t\t\tbackgroundColor: customMainColor,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t// Is normal style and a custom color is being used ( we can set a style directly with its value)\n\t\t\t} else if ( customMainColor ) {\n\t\t\t\tfigureStyles = {\n\t\t\t\t\tborderColor: customMainColor,\n\t\t\t\t};\n\t\t\t\t// Is normal style and a named color is being used, we need to retrieve the color value to set the style,\n\t\t\t\t// as there is no expectation that themes create classes that set border colors.\n\t\t\t} else if ( mainColor ) {\n\t\t\t\tconst colors = get( select( 'core/block-editor' ).getSettings(), [ 'colors' ], [] );\n\t\t\t\tconst colorObject = getColorObjectByAttributeValues( colors, mainColor );\n\t\t\t\tfigureStyles = {\n\t\t\t\t\tborderColor: colorObject.color,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst blockquoteTextColorClass = getColorClassName( 'color', textColor );\n\t\t\tconst blockquoteClasses = textColor || customTextColor ? classnames( 'has-text-color', {\n\t\t\t\t[ blockquoteTextColorClass ]: blockquoteTextColorClass,\n\t\t\t} ) : undefined;\n\t\t\tconst blockquoteStyle = blockquoteTextColorClass ? undefined : { color: customTextColor };\n\t\t\treturn (\n\t\t\t\t<figure className={ figureClass } style={ figureStyles }>\n\t\t\t\t\t<blockquote className={ blockquoteClasses } style={ blockquoteStyle } >\n\t\t\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t\t\t{ ! RichText.isEmpty( citation ) && <RichText.Content tagName=\"cite\" value={ citation } /> }\n\t\t\t\t\t</blockquote>\n\t\t\t\t</figure>\n\t\t\t);\n\t\t},\n\t},\n\t{\n\t\tattributes: {\n\t\t\t...blockAttributes,\n\t\t},\n\t\tsave( { attributes } ) {\n\t\t\tconst { value, citation } = attributes;\n\t\t\treturn (\n\t\t\t\t<blockquote>\n\t\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t\t{ ! RichText.isEmpty( citation ) && <RichText.Content tagName=\"cite\" value={ citation } /> }\n\t\t\t\t</blockquote>\n\t\t\t);\n\t\t},\n\t}, {\n\t\tattributes: {\n\t\t\t...blockAttributes,\n\t\t\tcitation: {\n\t\t\t\ttype: 'string',\n\t\t\t\tsource: 'html',\n\t\t\t\tselector: 'footer',\n\t\t\t},\n\t\t\talign: {\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'none',\n\t\t\t},\n\t\t},\n\n\t\tsave( { attributes } ) {\n\t\t\tconst { value, citation, align } = attributes;\n\n\t\t\treturn (\n\t\t\t\t<blockquote className={ `align${ align }` }>\n\t\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t\t{ ! RichText.isEmpty( citation ) && <RichText.Content tagName=\"footer\" value={ citation } /> }\n\t\t\t\t</blockquote>\n\t\t\t);\n\t\t},\n\t},\n];\n\nexport default deprecated;\n"]}