"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ListEdit;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _blocks = require("@wordpress/blocks");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _richText = require("@wordpress/rich-text");

var _ = require("./");

var _orderedListSettings = _interopRequireDefault(require("./ordered-list-settings"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ListEdit(_ref) {
  var attributes = _ref.attributes,
      setAttributes = _ref.setAttributes,
      mergeBlocks = _ref.mergeBlocks,
      onReplace = _ref.onReplace,
      className = _ref.className;
  var ordered = attributes.ordered,
      values = attributes.values,
      reversed = attributes.reversed,
      start = attributes.start;
  var tagName = ordered ? 'ol' : 'ul';

  var controls = function controls(_ref2) {
    var value = _ref2.value,
        onChange = _ref2.onChange;
    return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.RichTextShortcut, {
      type: "primary",
      character: "[",
      onUse: function onUse() {
        onChange((0, _richText.__unstableOutdentListItems)(value));
      }
    }), (0, _element.createElement)(_blockEditor.RichTextShortcut, {
      type: "primary",
      character: "]",
      onUse: function onUse() {
        onChange((0, _richText.__unstableIndentListItems)(value, {
          type: tagName
        }));
      }
    }), (0, _element.createElement)(_blockEditor.RichTextShortcut, {
      type: "primary",
      character: "m",
      onUse: function onUse() {
        onChange((0, _richText.__unstableIndentListItems)(value, {
          type: tagName
        }));
      }
    }), (0, _element.createElement)(_blockEditor.RichTextShortcut, {
      type: "primaryShift",
      character: "m",
      onUse: function onUse() {
        onChange((0, _richText.__unstableOutdentListItems)(value));
      }
    }), (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_components.Toolbar, {
      controls: [{
        icon: 'editor-ul',
        title: (0, _i18n.__)('Convert to unordered list'),
        isActive: (0, _richText.__unstableIsActiveListType)(value, 'ul', tagName),
        onClick: function onClick() {
          onChange((0, _richText.__unstableChangeListType)(value, {
            type: 'ul'
          }));

          if ((0, _richText.__unstableIsListRootSelected)(value)) {
            setAttributes({
              ordered: false
            });
          }
        }
      }, {
        icon: 'editor-ol',
        title: (0, _i18n.__)('Convert to ordered list'),
        isActive: (0, _richText.__unstableIsActiveListType)(value, 'ol', tagName),
        onClick: function onClick() {
          onChange((0, _richText.__unstableChangeListType)(value, {
            type: 'ol'
          }));

          if ((0, _richText.__unstableIsListRootSelected)(value)) {
            setAttributes({
              ordered: true
            });
          }
        }
      }, {
        icon: 'editor-outdent',
        title: (0, _i18n.__)('Outdent list item'),
        shortcut: (0, _i18n._x)('Backspace', 'keyboard key'),
        onClick: function onClick() {
          onChange((0, _richText.__unstableOutdentListItems)(value));
        }
      }, {
        icon: 'editor-indent',
        title: (0, _i18n.__)('Indent list item'),
        shortcut: (0, _i18n._x)('Space', 'keyboard key'),
        onClick: function onClick() {
          onChange((0, _richText.__unstableIndentListItems)(value, {
            type: tagName
          }));
        }
      }]
    })));
  };

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.RichText, {
    identifier: "values",
    multiline: "li",
    tagName: tagName,
    onChange: function onChange(nextValues) {
      return setAttributes({
        values: nextValues
      });
    },
    value: values,
    wrapperClassName: "block-library-list",
    className: className,
    placeholder: (0, _i18n.__)('Write listâ€¦'),
    onMerge: mergeBlocks,
    onSplit: function onSplit(value) {
      return (0, _blocks.createBlock)(_.name, {
        ordered: ordered,
        values: value
      });
    },
    __unstableOnSplitMiddle: function __unstableOnSplitMiddle() {
      return (0, _blocks.createBlock)('core/paragraph');
    },
    onReplace: onReplace,
    onRemove: function onRemove() {
      return onReplace([]);
    },
    start: start,
    reversed: reversed
  }, controls), ordered && (0, _element.createElement)(_orderedListSettings.default, {
    setAttributes: setAttributes,
    ordered: ordered,
    reversed: reversed,
    start: start
  }));
}
//# sourceMappingURL=edit.js.map