"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _blocks = require("@wordpress/blocks");

var _richText = require("@wordpress/rich-text");

/**
 * WordPress dependencies
 */
var listContentSchema = (0, _objectSpread2.default)({}, (0, _blocks.getPhrasingContentSchema)(), {
  ul: {},
  ol: {
    attributes: ['type']
  }
}); // Recursion is needed.
// Possible: ul > li > ul.
// Impossible: ul > ul.

['ul', 'ol'].forEach(function (tag) {
  listContentSchema[tag].children = {
    li: {
      children: listContentSchema
    }
  };
});
var transforms = {
  from: [{
    type: 'block',
    isMultiBlock: true,
    blocks: ['core/paragraph'],
    transform: function transform(blockAttributes) {
      return (0, _blocks.createBlock)('core/list', {
        values: (0, _richText.toHTMLString)({
          value: (0, _richText.join)(blockAttributes.map(function (_ref) {
            var content = _ref.content;
            var value = (0, _richText.create)({
              html: content
            });

            if (blockAttributes.length > 1) {
              return value;
            } // When converting only one block, transform
            // every line to a list item.


            return (0, _richText.replace)(value, /\n/g, _richText.__UNSTABLE_LINE_SEPARATOR);
          }), _richText.__UNSTABLE_LINE_SEPARATOR),
          multilineTag: 'li'
        })
      });
    }
  }, {
    type: 'block',
    blocks: ['core/quote'],
    transform: function transform(_ref2) {
      var value = _ref2.value;
      return (0, _blocks.createBlock)('core/list', {
        values: (0, _richText.toHTMLString)({
          value: (0, _richText.create)({
            html: value,
            multilineTag: 'p'
          }),
          multilineTag: 'li'
        })
      });
    }
  }, {
    type: 'raw',
    selector: 'ol,ul',
    schema: {
      ol: listContentSchema.ol,
      ul: listContentSchema.ul
    },
    transform: function transform(node) {
      return (0, _blocks.createBlock)('core/list', (0, _objectSpread2.default)({}, (0, _blocks.getBlockAttributes)('core/list', node.outerHTML), {
        ordered: node.nodeName === 'OL'
      }));
    }
  }].concat((0, _toConsumableArray2.default)(['*', '-'].map(function (prefix) {
    return {
      type: 'prefix',
      prefix: prefix,
      transform: function transform(content) {
        return (0, _blocks.createBlock)('core/list', {
          values: "<li>".concat(content, "</li>")
        });
      }
    };
  })), (0, _toConsumableArray2.default)(['1.', '1)'].map(function (prefix) {
    return {
      type: 'prefix',
      prefix: prefix,
      transform: function transform(content) {
        return (0, _blocks.createBlock)('core/list', {
          ordered: true,
          values: "<li>".concat(content, "</li>")
        });
      }
    };
  }))),
  to: [{
    type: 'block',
    blocks: ['core/paragraph'],
    transform: function transform(_ref3) {
      var values = _ref3.values;
      return (0, _richText.split)((0, _richText.create)({
        html: values,
        multilineTag: 'li',
        multilineWrapperTags: ['ul', 'ol']
      }), _richText.__UNSTABLE_LINE_SEPARATOR).map(function (piece) {
        return (0, _blocks.createBlock)('core/paragraph', {
          content: (0, _richText.toHTMLString)({
            value: piece
          })
        });
      });
    }
  }, {
    type: 'block',
    blocks: ['core/quote'],
    transform: function transform(_ref4) {
      var values = _ref4.values;
      return (0, _blocks.createBlock)('core/quote', {
        value: (0, _richText.toHTMLString)({
          value: (0, _richText.create)({
            html: values,
            multilineTag: 'li',
            multilineWrapperTags: ['ul', 'ol']
          }),
          multilineTag: 'p'
        })
      });
    }
  }]
};
var _default = transforms;
exports.default = _default;
//# sourceMappingURL=transforms.js.map