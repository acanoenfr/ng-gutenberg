{"version":3,"sources":["@wordpress/block-library/src/list/transforms.js"],"names":["listContentSchema","ul","ol","attributes","forEach","tag","children","li","transforms","from","type","isMultiBlock","blocks","transform","blockAttributes","values","value","map","content","html","length","__UNSTABLE_LINE_SEPARATOR","multilineTag","selector","schema","node","outerHTML","ordered","nodeName","prefix","to","multilineWrapperTags","piece"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\tcreateBlock,\n\tgetBlockAttributes,\n\tgetPhrasingContentSchema,\n} from '@wordpress/blocks';\nimport {\n\t__UNSTABLE_LINE_SEPARATOR,\n\tcreate,\n\tjoin,\n\treplace,\n\tsplit,\n\ttoHTMLString,\n} from '@wordpress/rich-text';\n\nconst listContentSchema = {\n\t...getPhrasingContentSchema(),\n\tul: {},\n\tol: { attributes: [ 'type' ] },\n};\n\n// Recursion is needed.\n// Possible: ul > li > ul.\n// Impossible: ul > ul.\n[ 'ul', 'ol' ].forEach( ( tag ) => {\n\tlistContentSchema[ tag ].children = {\n\t\tli: {\n\t\t\tchildren: listContentSchema,\n\t\t},\n\t};\n} );\n\nconst transforms = {\n\tfrom: [\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tisMultiBlock: true,\n\t\t\tblocks: [ 'core/paragraph' ],\n\t\t\ttransform: ( blockAttributes ) => {\n\t\t\t\treturn createBlock( 'core/list', {\n\t\t\t\t\tvalues: toHTMLString( {\n\t\t\t\t\t\tvalue: join( blockAttributes.map( ( { content } ) => {\n\t\t\t\t\t\t\tconst value = create( { html: content } );\n\n\t\t\t\t\t\t\tif ( blockAttributes.length > 1 ) {\n\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// When converting only one block, transform\n\t\t\t\t\t\t\t// every line to a list item.\n\t\t\t\t\t\t\treturn replace( value, /\\n/g, __UNSTABLE_LINE_SEPARATOR );\n\t\t\t\t\t\t} ), __UNSTABLE_LINE_SEPARATOR ),\n\t\t\t\t\t\tmultilineTag: 'li',\n\t\t\t\t\t} ),\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/quote' ],\n\t\t\ttransform: ( { value } ) => {\n\t\t\t\treturn createBlock( 'core/list', {\n\t\t\t\t\tvalues: toHTMLString( {\n\t\t\t\t\t\tvalue: create( { html: value, multilineTag: 'p' } ),\n\t\t\t\t\t\tmultilineTag: 'li',\n\t\t\t\t\t} ),\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'raw',\n\t\t\tselector: 'ol,ul',\n\t\t\tschema: {\n\t\t\t\tol: listContentSchema.ol,\n\t\t\t\tul: listContentSchema.ul,\n\t\t\t},\n\t\t\ttransform( node ) {\n\t\t\t\treturn createBlock( 'core/list', {\n\t\t\t\t\t...getBlockAttributes(\n\t\t\t\t\t\t'core/list',\n\t\t\t\t\t\tnode.outerHTML\n\t\t\t\t\t),\n\t\t\t\t\tordered: node.nodeName === 'OL',\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t\t...[ '*', '-' ].map( ( prefix ) => ( {\n\t\t\ttype: 'prefix',\n\t\t\tprefix,\n\t\t\ttransform( content ) {\n\t\t\t\treturn createBlock( 'core/list', {\n\t\t\t\t\tvalues: `<li>${ content }</li>`,\n\t\t\t\t} );\n\t\t\t},\n\t\t} ) ),\n\t\t...[ '1.', '1)' ].map( ( prefix ) => ( {\n\t\t\ttype: 'prefix',\n\t\t\tprefix,\n\t\t\ttransform( content ) {\n\t\t\t\treturn createBlock( 'core/list', {\n\t\t\t\t\tordered: true,\n\t\t\t\t\tvalues: `<li>${ content }</li>`,\n\t\t\t\t} );\n\t\t\t},\n\t\t} ) ),\n\t],\n\tto: [\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/paragraph' ],\n\t\t\ttransform: ( { values } ) =>\n\t\t\t\tsplit( create( {\n\t\t\t\t\thtml: values,\n\t\t\t\t\tmultilineTag: 'li',\n\t\t\t\t\tmultilineWrapperTags: [ 'ul', 'ol' ],\n\t\t\t\t} ), __UNSTABLE_LINE_SEPARATOR )\n\t\t\t\t\t.map( ( piece ) =>\n\t\t\t\t\t\tcreateBlock( 'core/paragraph', {\n\t\t\t\t\t\t\tcontent: toHTMLString( { value: piece } ),\n\t\t\t\t\t\t} )\n\t\t\t\t\t),\n\t\t},\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/quote' ],\n\t\t\ttransform: ( { values } ) => {\n\t\t\t\treturn createBlock( 'core/quote', {\n\t\t\t\t\tvalue: toHTMLString( {\n\t\t\t\t\t\tvalue: create( {\n\t\t\t\t\t\t\thtml: values,\n\t\t\t\t\t\t\tmultilineTag: 'li',\n\t\t\t\t\t\t\tmultilineWrapperTags: [ 'ul', 'ol' ],\n\t\t\t\t\t\t} ),\n\t\t\t\t\t\tmultilineTag: 'p',\n\t\t\t\t\t} ),\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t],\n};\n\nexport default transforms;\n"]}