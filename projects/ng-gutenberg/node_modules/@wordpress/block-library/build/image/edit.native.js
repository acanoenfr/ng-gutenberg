"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactNativeGutenbergBridge = require("react-native-gutenberg-bridge");

var _lodash = require("lodash");

var _components = require("@wordpress/components");

var _blockEditor = require("@wordpress/block-editor");

var _i18n = require("@wordpress/i18n");

var _url = require("@wordpress/url");

var _hooks = require("@wordpress/hooks");

var _styles = _interopRequireDefault(require("./styles.scss"));

var _mediaUploadProgress = _interopRequireDefault(require("./media-upload-progress"));

var _icon = _interopRequireDefault(require("./icon"));

var _iconRetry = _interopRequireDefault(require("./icon-retry"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var LINK_DESTINATION_CUSTOM = 'custom';
var LINK_DESTINATION_NONE = 'none'; // Default Image ratio 4:3

var IMAGE_ASPECT_RATIO = 4 / 3;

var ImageEdit =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(ImageEdit, _React$Component);

  function ImageEdit(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ImageEdit);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ImageEdit).call(this, props));
    _this.state = {
      showSettings: false,
      isCaptionSelected: false
    };
    _this.finishMediaUploadWithSuccess = _this.finishMediaUploadWithSuccess.bind((0, _assertThisInitialized2.default)(_this));
    _this.finishMediaUploadWithFailure = _this.finishMediaUploadWithFailure.bind((0, _assertThisInitialized2.default)(_this));
    _this.mediaUploadStateReset = _this.mediaUploadStateReset.bind((0, _assertThisInitialized2.default)(_this));
    _this.onSelectMediaUploadOption = _this.onSelectMediaUploadOption.bind((0, _assertThisInitialized2.default)(_this));
    _this.updateMediaProgress = _this.updateMediaProgress.bind((0, _assertThisInitialized2.default)(_this));
    _this.updateAlt = _this.updateAlt.bind((0, _assertThisInitialized2.default)(_this));
    _this.updateImageURL = _this.updateImageURL.bind((0, _assertThisInitialized2.default)(_this));
    _this.onSetLinkDestination = _this.onSetLinkDestination.bind((0, _assertThisInitialized2.default)(_this));
    _this.onImagePressed = _this.onImagePressed.bind((0, _assertThisInitialized2.default)(_this));
    _this.onClearSettings = _this.onClearSettings.bind((0, _assertThisInitialized2.default)(_this));
    _this.onFocusCaption = _this.onFocusCaption.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(ImageEdit, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          attributes = _this$props.attributes,
          setAttributes = _this$props.setAttributes; // This will warn when we have `id` defined, while `url` is undefined.
      // This may help track this issue: https://github.com/wordpress-mobile/WordPress-Android/issues/9768
      // where a cancelled image upload was resulting in a subsequent crash.

      if (attributes.id && !attributes.url) {
        // eslint-disable-next-line no-console
        console.warn('Attributes has id with no url.');
      }

      if (attributes.id && attributes.url && !(0, _url.isURL)(attributes.url)) {
        if (attributes.url.indexOf('file:') === 0) {
          (0, _reactNativeGutenbergBridge.requestMediaImport)(attributes.url, function (mediaId, mediaUri) {
            if (mediaUri) {
              setAttributes({
                url: mediaUri,
                id: mediaId
              });
            }
          });
        }

        (0, _reactNativeGutenbergBridge.mediaUploadSync)();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // this action will only exist if the user pressed the trash button on the block holder
      if ((0, _hooks.hasAction)('blocks.onRemoveBlockCheckUpload') && this.state.isUploadInProgress) {
        (0, _hooks.doAction)('blocks.onRemoveBlockCheckUpload', this.props.attributes.id);
      }
    }
  }, {
    key: "onImagePressed",
    value: function onImagePressed() {
      var attributes = this.props.attributes;

      if (this.state.isUploadInProgress) {
        (0, _reactNativeGutenbergBridge.requestImageUploadCancelDialog)(attributes.id);
      } else if (attributes.id && !(0, _url.isURL)(attributes.url)) {
        (0, _reactNativeGutenbergBridge.requestImageFailedRetryDialog)(attributes.id);
      }

      this.setState({
        isCaptionSelected: false
      });
    }
  }, {
    key: "updateMediaProgress",
    value: function updateMediaProgress(payload) {
      var setAttributes = this.props.setAttributes;

      if (payload.mediaUrl) {
        setAttributes({
          url: payload.mediaUrl
        });
      }

      if (!this.state.isUploadInProgress) {
        this.setState({
          isUploadInProgress: true
        });
      }
    }
  }, {
    key: "finishMediaUploadWithSuccess",
    value: function finishMediaUploadWithSuccess(payload) {
      var setAttributes = this.props.setAttributes;
      setAttributes({
        url: payload.mediaUrl,
        id: payload.mediaServerId
      });
      this.setState({
        isUploadInProgress: false
      });
    }
  }, {
    key: "finishMediaUploadWithFailure",
    value: function finishMediaUploadWithFailure(payload) {
      var setAttributes = this.props.setAttributes;
      setAttributes({
        id: payload.mediaId
      });
      this.setState({
        isUploadInProgress: false
      });
    }
  }, {
    key: "mediaUploadStateReset",
    value: function mediaUploadStateReset() {
      var setAttributes = this.props.setAttributes;
      setAttributes({
        id: null,
        url: null
      });
      this.setState({
        isUploadInProgress: false
      });
    }
  }, {
    key: "updateAlt",
    value: function updateAlt(newAlt) {
      this.props.setAttributes({
        alt: newAlt
      });
    }
  }, {
    key: "updateImageURL",
    value: function updateImageURL(url) {
      this.props.setAttributes({
        url: url,
        width: undefined,
        height: undefined
      });
    }
  }, {
    key: "onSetLinkDestination",
    value: function onSetLinkDestination(href) {
      this.props.setAttributes({
        linkDestination: LINK_DESTINATION_CUSTOM,
        href: href
      });
    }
  }, {
    key: "onClearSettings",
    value: function onClearSettings() {
      this.props.setAttributes({
        alt: '',
        linkDestination: LINK_DESTINATION_NONE,
        href: undefined
      });
    }
  }, {
    key: "onSelectMediaUploadOption",
    value: function onSelectMediaUploadOption(mediaId, mediaUrl) {
      var setAttributes = this.props.setAttributes;
      setAttributes({
        url: mediaUrl,
        id: mediaId
      });
    }
  }, {
    key: "onFocusCaption",
    value: function onFocusCaption() {
      if (this.props.onFocus) {
        this.props.onFocus();
      }

      if (!this.state.isCaptionSelected) {
        this.setState({
          isCaptionSelected: true
        });
      }
    }
  }, {
    key: "getIcon",
    value: function getIcon(isRetryIcon) {
      if (isRetryIcon) {
        return (0, _element.createElement)(_components.Icon, (0, _extends2.default)({
          icon: _iconRetry.default
        }, _styles.default.iconRetry));
      }

      return (0, _element.createElement)(_components.Icon, (0, _extends2.default)({
        icon: _icon.default
      }, _styles.default.icon));
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          attributes = _this$props2.attributes,
          isSelected = _this$props2.isSelected;
      var url = attributes.url,
          height = attributes.height,
          width = attributes.width,
          alt = attributes.alt,
          href = attributes.href,
          id = attributes.id;

      var onImageSettingsButtonPressed = function onImageSettingsButtonPressed() {
        _this2.setState({
          showSettings: true
        });
      };

      var onImageSettingsClose = function onImageSettingsClose() {
        _this2.setState({
          showSettings: false
        });
      };

      var getToolbarEditButton = function getToolbarEditButton(open) {
        return (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_components.Toolbar, null, (0, _element.createElement)(_components.ToolbarButton, {
          title: (0, _i18n.__)('Edit image'),
          icon: "edit",
          onClick: open
        })));
      };

      var getInspectorControls = function getInspectorControls() {
        return (0, _element.createElement)(_components.BottomSheet, {
          isVisible: _this2.state.showSettings,
          onClose: onImageSettingsClose,
          hideHeader: true
        }, (0, _element.createElement)(_components.BottomSheet.Cell, {
          icon: 'admin-links',
          label: (0, _i18n.__)('Link To'),
          value: href || '',
          valuePlaceholder: (0, _i18n.__)('Add URL'),
          onChangeValue: _this2.onSetLinkDestination,
          autoCapitalize: "none",
          autoCorrect: false,
          keyboardType: "url"
        }), (0, _element.createElement)(_components.BottomSheet.Cell, {
          icon: 'editor-textcolor',
          label: (0, _i18n.__)('Alt Text'),
          value: alt || '',
          valuePlaceholder: (0, _i18n.__)('None'),
          separatorType: 'fullWidth',
          onChangeValue: _this2.updateAlt
        }), (0, _element.createElement)(_components.BottomSheet.Cell, {
          label: (0, _i18n.__)('Clear All Settings'),
          labelStyle: _styles.default.clearSettingsButton,
          separatorType: 'none',
          onPress: _this2.onClearSettings
        }));
      };

      if (!url) {
        return (0, _element.createElement)(_reactNative.View, {
          style: {
            flex: 1
          }
        }, (0, _element.createElement)(_blockEditor.MediaPlaceholder, {
          mediaType: _blockEditor.MEDIA_TYPE_IMAGE,
          onSelectURL: this.onSelectMediaUploadOption,
          icon: this.getIcon(false),
          onFocus: this.props.onFocus
        }));
      }

      var imageContainerHeight = _reactNative.Dimensions.get('window').width / IMAGE_ASPECT_RATIO;

      var getImageComponent = function getImageComponent(openMediaOptions, getMediaOptions) {
        return (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
          accessible: !isSelected,
          onPress: _this2.onImagePressed,
          onLongPress: openMediaOptions,
          disabled: !isSelected
        }, (0, _element.createElement)(_reactNative.View, {
          style: {
            flex: 1
          }
        }, getInspectorControls(), getMediaOptions(), !_this2.state.isCaptionSelected && getToolbarEditButton(openMediaOptions), (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.ToolbarButton, {
          title: (0, _i18n.__)('Image Settings'),
          icon: "admin-generic",
          onClick: onImageSettingsButtonPressed
        })), (0, _element.createElement)(_mediaUploadProgress.default, {
          height: height,
          width: width,
          coverUrl: url,
          mediaId: id,
          onUpdateMediaProgress: _this2.updateMediaProgress,
          onFinishMediaUploadWithSuccess: _this2.finishMediaUploadWithSuccess,
          onFinishMediaUploadWithFailure: _this2.finishMediaUploadWithFailure,
          onMediaUploadStateReset: _this2.mediaUploadStateReset,
          renderContent: function renderContent(_ref) {
            var isUploadInProgress = _ref.isUploadInProgress,
                isUploadFailed = _ref.isUploadFailed,
                finalWidth = _ref.finalWidth,
                finalHeight = _ref.finalHeight,
                imageWidthWithinContainer = _ref.imageWidthWithinContainer,
                retryMessage = _ref.retryMessage;
            var opacity = isUploadInProgress ? 0.3 : 1;

            var icon = _this2.getIcon(isUploadFailed);

            var iconContainer = (0, _element.createElement)(_reactNative.View, {
              style: _styles.default.modalIcon
            }, icon);
            return (0, _element.createElement)(_reactNative.View, {
              style: {
                flex: 1
              }
            }, !imageWidthWithinContainer && (0, _element.createElement)(_reactNative.View, {
              style: [_styles.default.imageContainer, {
                height: imageContainerHeight
              }]
            }, _this2.getIcon(false)), (0, _element.createElement)(_reactNative.ImageBackground, {
              accessible: true,
              disabled: !isSelected,
              accessibilityLabel: alt,
              accessibilityHint: (0, _i18n.__)('Double tap and hold to edit'),
              accessibilityRole: 'imagebutton',
              style: {
                width: finalWidth,
                height: finalHeight,
                opacity: opacity
              },
              resizeMethod: "scale",
              source: {
                uri: url
              },
              key: url
            }, isUploadFailed && (0, _element.createElement)(_reactNative.View, {
              style: [_styles.default.imageContainer, {
                flex: 1,
                backgroundColor: 'rgba(0, 0, 0, 0.5)'
              }]
            }, iconContainer, (0, _element.createElement)(_reactNative.Text, {
              style: _styles.default.uploadFailedText
            }, retryMessage))));
          }
        }), (0, _element.createElement)(_blockEditor.Caption, {
          clientId: _this2.props.clientId,
          isSelected: _this2.state.isCaptionSelected,
          accessible: true,
          accessibilityLabelCreator: function accessibilityLabelCreator(caption) {
            return (0, _lodash.isEmpty)(caption) ?
            /* translators: accessibility text. Empty image caption. */
            'Image caption. Empty' : (0, _i18n.sprintf)(
            /* translators: accessibility text. %s: image caption. */
            (0, _i18n.__)('Image caption. %s'), caption);
          },
          onFocus: _this2.onFocusCaption,
          onBlur: _this2.props.onBlur // always assign onBlur as props

        })));
      };

      return (0, _element.createElement)(_blockEditor.MediaUpload, {
        mediaType: _blockEditor.MEDIA_TYPE_IMAGE,
        onSelectURL: this.onSelectMediaUploadOption,
        render: function render(_ref2) {
          var open = _ref2.open,
              getMediaOptions = _ref2.getMediaOptions;
          return getImageComponent(open, getMediaOptions);
        }
      });
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      // Avoid a UI flicker in the toolbar by insuring that isCaptionSelected
      // is updated immediately any time the isSelected prop becomes false
      return {
        isCaptionSelected: props.isSelected && state.isCaptionSelected
      };
    }
  }]);
  return ImageEdit;
}(_react.default.Component);

var _default = ImageEdit;
exports.default = _default;
//# sourceMappingURL=edit.native.js.map