"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _headingToolbar = _interopRequireDefault(require("./heading-toolbar"));

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _compose = require("@wordpress/compose");

var _blocks = require("@wordpress/blocks");

var _blockEditor = require("@wordpress/block-editor");

/**
 * External dependencies
 */

/**
 * Internal dependencies
 */

/**
 * WordPress dependencies
 */
var HeadingColorUI = (0, _element.memo)(function (_ref) {
  var textColorValue = _ref.textColorValue,
      setTextColor = _ref.setTextColor;
  return (0, _element.createElement)(_blockEditor.PanelColorSettings, {
    title: (0, _i18n.__)('Color Settings'),
    initialOpen: false,
    colorSettings: [{
      value: textColorValue,
      onChange: setTextColor,
      label: (0, _i18n.__)('Text Color')
    }]
  });
});

function HeadingEdit(_ref2) {
  var _classnames;

  var attributes = _ref2.attributes,
      setAttributes = _ref2.setAttributes,
      mergeBlocks = _ref2.mergeBlocks,
      onReplace = _ref2.onReplace,
      className = _ref2.className,
      textColor = _ref2.textColor,
      setTextColor = _ref2.setTextColor;
  var align = attributes.align,
      content = attributes.content,
      level = attributes.level,
      placeholder = attributes.placeholder;
  var tagName = 'h' + level;
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_headingToolbar.default, {
    minLevel: 2,
    maxLevel: 5,
    selectedLevel: level,
    onChange: function onChange(newLevel) {
      return setAttributes({
        level: newLevel
      });
    }
  }), (0, _element.createElement)(_blockEditor.AlignmentToolbar, {
    value: align,
    onChange: function onChange(nextAlign) {
      setAttributes({
        align: nextAlign
      });
    }
  })), (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Heading Settings')
  }, (0, _element.createElement)("p", null, (0, _i18n.__)('Level')), (0, _element.createElement)(_headingToolbar.default, {
    isCollapsed: false,
    minLevel: 1,
    maxLevel: 7,
    selectedLevel: level,
    onChange: function onChange(newLevel) {
      return setAttributes({
        level: newLevel
      });
    }
  })), (0, _element.createElement)(HeadingColorUI, {
    setTextColor: setTextColor,
    textColorValue: textColor.color
  })), (0, _element.createElement)(_blockEditor.RichText, {
    identifier: "content",
    wrapperClassName: "wp-block-heading",
    tagName: tagName,
    value: content,
    onChange: function onChange(value) {
      return setAttributes({
        content: value
      });
    },
    onMerge: mergeBlocks,
    onSplit: function onSplit(value) {
      if (!value) {
        return (0, _blocks.createBlock)('core/paragraph');
      }

      return (0, _blocks.createBlock)('core/heading', (0, _objectSpread2.default)({}, attributes, {
        content: value
      }));
    },
    onReplace: onReplace,
    onRemove: function onRemove() {
      return onReplace([]);
    },
    className: (0, _classnames2.default)(className, (_classnames = {}, (0, _defineProperty2.default)(_classnames, "has-text-align-".concat(align), align), (0, _defineProperty2.default)(_classnames, 'has-text-color', textColor.color), (0, _defineProperty2.default)(_classnames, textColor.class, textColor.class), _classnames)),
    placeholder: placeholder || (0, _i18n.__)('Write headingâ€¦'),
    style: {
      color: textColor.color
    }
  }));
}

var _default = (0, _compose.compose)([(0, _blockEditor.withColors)('backgroundColor', {
  textColor: 'color'
})])(HeadingEdit);

exports.default = _default;
//# sourceMappingURL=edit.js.map