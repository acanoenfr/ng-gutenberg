{"version":3,"sources":["@wordpress/rich-text/src/component/editable.js"],"names":["isEqual","Component","createElement","diffAriaProps","Editable","bindEditorNode","bind","nextProps","props","style","editorNode","setAttribute","Object","assign","whiteSpace","className","start","reversed","removedKeys","updatedKeys","forEach","key","removeAttribute","setRef","tagName","record","valueToEditableHTML","remainingProps","role","contentEditable","ref","suppressContentEditableWarning","dangerouslySetInnerHTML","__html"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { isEqual } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Component, createElement } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { diffAriaProps } from './aria';\n\nexport default class Editable extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.bindEditorNode = this.bindEditorNode.bind( this );\n\t}\n\n\t// We must prevent rerenders because the browser will modify the DOM. React\n\t// will rerender the DOM fine, but we're losing selection and it would be\n\t// more expensive to do so as it would just set the inner HTML through\n\t// `dangerouslySetInnerHTML`. Instead RichText does it's own diffing and\n\t// selection setting.\n\t//\n\t// Because we never update the component, we have to look through props and\n\t// update the attributes on the wrapper nodes here. `componentDidUpdate`\n\t// will never be called.\n\tshouldComponentUpdate( nextProps ) {\n\t\tif ( ! isEqual( this.props.style, nextProps.style ) ) {\n\t\t\tthis.editorNode.setAttribute( 'style', '' );\n\t\t\tObject.assign( this.editorNode.style, {\n\t\t\t\t...( nextProps.style || {} ),\n\t\t\t\twhiteSpace: 'pre-wrap',\n\t\t\t} );\n\t\t}\n\n\t\tif ( ! isEqual( this.props.className, nextProps.className ) ) {\n\t\t\tthis.editorNode.className = nextProps.className;\n\t\t}\n\n\t\tif ( this.props.start !== nextProps.start ) {\n\t\t\tthis.editorNode.setAttribute( 'start', nextProps.start );\n\t\t}\n\n\t\tif ( this.props.reversed !== nextProps.reversed ) {\n\t\t\tthis.editorNode.reversed = nextProps.reversed;\n\t\t}\n\n\t\tconst { removedKeys, updatedKeys } = diffAriaProps( this.props, nextProps );\n\t\tremovedKeys.forEach( ( key ) =>\n\t\t\tthis.editorNode.removeAttribute( key ) );\n\t\tupdatedKeys.forEach( ( key ) =>\n\t\t\tthis.editorNode.setAttribute( key, nextProps[ key ] ) );\n\n\t\treturn false;\n\t}\n\n\tbindEditorNode( editorNode ) {\n\t\tthis.editorNode = editorNode;\n\t\tthis.props.setRef( editorNode );\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\ttagName = 'div',\n\t\t\tstyle = {},\n\t\t\trecord,\n\t\t\tvalueToEditableHTML,\n\t\t\tclassName,\n\t\t\t...remainingProps\n\t\t} = this.props;\n\n\t\tdelete remainingProps.setRef;\n\n\t\t// In HTML, leading and trailing spaces are not visible, and multiple\n\t\t// spaces elsewhere are visually reduced to one space. This rule\n\t\t// prevents spaces from collapsing so all space is visible in the editor\n\t\t// and can be removed.\n\t\t// It also prevents some browsers from inserting non-breaking spaces at\n\t\t// the end of a line to prevent the space from visually disappearing.\n\t\t// Sometimes these non breaking spaces can linger in the editor causing\n\t\t// unwanted non breaking spaces in between words. If also prevent\n\t\t// Firefox from inserting a trailing `br` node to visualise any trailing\n\t\t// space, causing the element to be saved.\n\t\t//\n\t\t// > Authors are encouraged to set the 'white-space' property on editing\n\t\t// > hosts and on markup that was originally created through these\n\t\t// > editing mechanisms to the value 'pre-wrap'. Default HTML whitespace\n\t\t// > handling is not well suited to WYSIWYG editing, and line wrapping\n\t\t// > will not work correctly in some corner cases if 'white-space' is\n\t\t// > left at its default value.\n\t\t// >\n\t\t// > https://html.spec.whatwg.org/multipage/interaction.html#best-practices-for-in-page-editors\n\t\tconst whiteSpace = 'pre-wrap';\n\n\t\treturn createElement( tagName, {\n\t\t\trole: 'textbox',\n\t\t\t'aria-multiline': true,\n\t\t\tclassName,\n\t\t\tcontentEditable: true,\n\t\t\tref: this.bindEditorNode,\n\t\t\tstyle: {\n\t\t\t\t...style,\n\t\t\t\twhiteSpace,\n\t\t\t},\n\t\t\tsuppressContentEditableWarning: true,\n\t\t\tdangerouslySetInnerHTML: { __html: valueToEditableHTML( record ) },\n\t\t\t...remainingProps,\n\t\t} );\n\t}\n}\n"]}