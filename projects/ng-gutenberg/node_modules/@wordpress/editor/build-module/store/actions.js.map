{"version":3,"sources":["@wordpress/editor/src/store/actions.js"],"names":["getBlocksWithSourcedAttributes","resetLastBlockSourceDependencies","setupEditor","__experimentalSubscribeSources","resetAutosave","editPost","savePost","refreshPost","trashPost","autosave","__experimentalLocalAutosave","redo","undo","resetEditorBlocks","has","castArray","deprecated","dispatch","select","apiFetch","parse","synchronizeBlocksWithTemplate","isShallowEqual","STORE_KEY","POST_UPDATE_TRANSACTION_ID","TRASH_POST_NOTICE_ID","getNotificationArgumentsForSaveSuccess","getNotificationArgumentsForSaveFail","getNotificationArgumentsForTrashFail","serializeBlocks","awaitNextStateChange","getRegistry","sources","lastBlockSourceDependenciesByRegistry","WeakMap","blocks","registry","blockSourceDependencies","get","workingBlocks","i","length","block","name","blockType","Object","entries","attributes","attributeName","schema","source","apply","dependencies","sourcedAttributeValue","splice","innerBlocks","appliedInnerBlocks","sourcesToUpdate","values","set","lastBlockSourceDependencies","getDependencies","post","edits","template","content","raw","isNewPost","status","resetPost","type","__unstableShouldCreateUndoLevel","setupEditorState","keys","some","key","__experimentalTearDownEditor","isStillReady","reset","lastDependencies","newAutosave","alternative","plugin","postId","__experimentalRequestPostUpdateStart","options","__experimentalRequestPostUpdateFinish","updatePost","id","__experimentalOptimisticUpdatePost","optimist","isAutosave","undoIgnore","previousRecord","error","args","updatedRecord","previousPost","postType","postTypeSlug","path","rest_base","Date","now","newPost","method","title","excerpt","createUndoLevel","updatePostLock","lock","__experimentalFetchReusableBlocks","__experimentalReceiveReusableBlocks","results","__experimentalSaveReusableBlock","__experimentalDeleteReusableBlock","__experimentalUpdateReusableBlock","changes","__experimentalConvertBlockToStatic","clientId","__experimentalConvertBlockToReusable","clientIds","enablePublishSidebar","disablePublishSidebar","lockPostSaving","lockName","unlockPostSaving","lastBlockAttributesChange","updatedSources","Set","updatedBlockTypes","blockName","add","newAttributeValue","hasOwnProperty","update","Array","from","noChange","blocksForSerialization","updateEditorSettings","settings","getBlockEditorAction","resetBlocks","receiveBlocks","updateBlock","updateBlockAttributes","selectBlock","startMultiSelect","stopMultiSelect","multiSelect","clearSelectedBlock","toggleSelection","replaceBlocks","replaceBlock","moveBlocksDown","moveBlocksUp","moveBlockToPosition","insertBlock","insertBlocks","showInsertionPoint","hideInsertionPoint","setTemplateValidity","synchronizeTemplate","mergeBlocks","removeBlocks","removeBlock","toggleBlockMode","startTyping","stopTyping","enterFormattedText","exitFormattedText","insertDefaultBlock","updateBlockListSettings"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { has, castArray } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport deprecated from '@wordpress/deprecated';\nimport { dispatch, select, apiFetch } from '@wordpress/data-controls';\nimport { parse, synchronizeBlocksWithTemplate } from '@wordpress/blocks';\nimport isShallowEqual from '@wordpress/is-shallow-equal';\n\n/**\n * Internal dependencies\n */\nimport {\n\tSTORE_KEY,\n\tPOST_UPDATE_TRANSACTION_ID,\n\tTRASH_POST_NOTICE_ID,\n} from './constants';\nimport {\n\tgetNotificationArgumentsForSaveSuccess,\n\tgetNotificationArgumentsForSaveFail,\n\tgetNotificationArgumentsForTrashFail,\n} from './utils/notice-builder';\nimport serializeBlocks from './utils/serialize-blocks';\nimport { awaitNextStateChange, getRegistry } from './controls';\nimport * as sources from './block-sources';\n\n/**\n * Map of Registry instance to WeakMap of dependencies by custom source.\n *\n * @type WeakMap<WPDataRegistry,WeakMap<WPBlockAttributeSource,Object>>\n */\nconst lastBlockSourceDependenciesByRegistry = new WeakMap;\n\n/**\n * Given a blocks array, returns a blocks array with sourced attribute values\n * applied. The reference will remain consistent with the original argument if\n * no attribute values must be overridden. If sourced values are applied, the\n * return value will be a modified copy of the original array.\n *\n * @param {WPBlock[]} blocks Original blocks array.\n *\n * @return {WPBlock[]} Blocks array with sourced values applied.\n */\nfunction* getBlocksWithSourcedAttributes( blocks ) {\n\tconst registry = yield getRegistry();\n\tif ( ! lastBlockSourceDependenciesByRegistry.has( registry ) ) {\n\t\treturn blocks;\n\t}\n\n\tconst blockSourceDependencies = lastBlockSourceDependenciesByRegistry.get( registry );\n\n\tlet workingBlocks = blocks;\n\tfor ( let i = 0; i < blocks.length; i++ ) {\n\t\tlet block = blocks[ i ];\n\t\tconst blockType = yield select( 'core/blocks', 'getBlockType', block.name );\n\n\t\tfor ( const [ attributeName, schema ] of Object.entries( blockType.attributes ) ) {\n\t\t\tif ( ! sources[ schema.source ] || ! sources[ schema.source ].apply ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( ! blockSourceDependencies.has( sources[ schema.source ] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst dependencies = blockSourceDependencies.get( sources[ schema.source ] );\n\t\t\tconst sourcedAttributeValue = sources[ schema.source ].apply( schema, dependencies );\n\n\t\t\t// It's only necessary to apply the value if it differs from the\n\t\t\t// block's locally-assigned value, to avoid needlessly resetting\n\t\t\t// the block editor.\n\t\t\tif ( sourcedAttributeValue === block.attributes[ attributeName ] ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Create a shallow clone to mutate, leaving the original intact.\n\t\t\tif ( workingBlocks === blocks ) {\n\t\t\t\tworkingBlocks = [ ...workingBlocks ];\n\t\t\t}\n\n\t\t\tblock = {\n\t\t\t\t...block,\n\t\t\t\tattributes: {\n\t\t\t\t\t...block.attributes,\n\t\t\t\t\t[ attributeName ]: sourcedAttributeValue,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tworkingBlocks.splice( i, 1, block );\n\t\t}\n\n\t\t// Recurse to apply source attributes to inner blocks.\n\t\tif ( block.innerBlocks.length ) {\n\t\t\tconst appliedInnerBlocks = yield* getBlocksWithSourcedAttributes( block.innerBlocks );\n\t\t\tif ( appliedInnerBlocks !== block.innerBlocks ) {\n\t\t\t\tif ( workingBlocks === blocks ) {\n\t\t\t\t\tworkingBlocks = [ ...workingBlocks ];\n\t\t\t\t}\n\n\t\t\t\tblock = {\n\t\t\t\t\t...block,\n\t\t\t\t\tinnerBlocks: appliedInnerBlocks,\n\t\t\t\t};\n\n\t\t\t\tworkingBlocks.splice( i, 1, block );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn workingBlocks;\n}\n\n/**\n * Refreshes the last block source dependencies, optionally for a given subset\n * of sources (defaults to the full set of sources).\n *\n * @param {?Array} sourcesToUpdate Optional subset of sources to reset.\n *\n * @yield {Object} Yielded actions or control descriptors.\n */\nfunction* resetLastBlockSourceDependencies( sourcesToUpdate = Object.values( sources ) ) {\n\tif ( ! sourcesToUpdate.length ) {\n\t\treturn;\n\t}\n\n\tconst registry = yield getRegistry();\n\tif ( ! lastBlockSourceDependenciesByRegistry.has( registry ) ) {\n\t\tlastBlockSourceDependenciesByRegistry.set( registry, new WeakMap );\n\t}\n\n\tconst lastBlockSourceDependencies = lastBlockSourceDependenciesByRegistry.get( registry );\n\n\tfor ( const source of sourcesToUpdate ) {\n\t\tconst dependencies = yield* source.getDependencies();\n\t\tlastBlockSourceDependencies.set( source, dependencies );\n\t}\n}\n\n/**\n * Returns an action generator used in signalling that editor has initialized with\n * the specified post object and editor settings.\n *\n * @param {Object} post      Post object.\n * @param {Object} edits     Initial edited attributes object.\n * @param {Array?} template  Block Template.\n */\nexport function* setupEditor( post, edits, template ) {\n\t// In order to ensure maximum of a single parse during setup, edits are\n\t// included as part of editor setup action. Assume edited content as\n\t// canonical if provided, falling back to post.\n\tlet content;\n\tif ( has( edits, [ 'content' ] ) ) {\n\t\tcontent = edits.content;\n\t} else {\n\t\tcontent = post.content.raw;\n\t}\n\n\tlet blocks = parse( content );\n\n\t// Apply a template for new posts only, if exists.\n\tconst isNewPost = post.status === 'auto-draft';\n\tif ( isNewPost && template ) {\n\t\tblocks = synchronizeBlocksWithTemplate( blocks, template );\n\t}\n\n\tyield resetPost( post );\n\tyield* resetLastBlockSourceDependencies();\n\tyield {\n\t\ttype: 'SETUP_EDITOR',\n\t\tpost,\n\t\tedits,\n\t\ttemplate,\n\t};\n\tyield resetEditorBlocks( blocks, { __unstableShouldCreateUndoLevel: false } );\n\tyield setupEditorState( post );\n\tif (\n\t\tedits &&\n\t\tObject.keys( edits ).some(\n\t\t\t( key ) =>\n\t\t\t\tedits[ key ] !== ( has( post, [ key, 'raw' ] ) ? post[ key ].raw : post[ key ] )\n\t\t)\n\t) {\n\t\tyield editPost( edits );\n\t}\n\tyield* __experimentalSubscribeSources();\n}\n\n/**\n * Returns an action object signalling that the editor is being destroyed and\n * that any necessary state or side-effect cleanup should occur.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalTearDownEditor() {\n\treturn { type: 'TEAR_DOWN_EDITOR' };\n}\n\n/**\n * Returns an action generator which loops to await the next state change,\n * calling to reset blocks when a block source dependencies change.\n *\n * @yield {Object} Action object.\n */\nexport function* __experimentalSubscribeSources() {\n\twhile ( true ) {\n\t\tyield awaitNextStateChange();\n\n\t\t// The bailout case: If the editor becomes unmounted, it will flag\n\t\t// itself as non-ready. Effectively unsubscribes from the registry.\n\t\tconst isStillReady = yield select( STORE_KEY, '__unstableIsEditorReady' );\n\t\tif ( ! isStillReady ) {\n\t\t\tbreak;\n\t\t}\n\n\t\tconst registry = yield getRegistry();\n\n\t\tlet reset = false;\n\t\tfor ( const source of Object.values( sources ) ) {\n\t\t\tif ( ! source.getDependencies ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst dependencies = yield* source.getDependencies();\n\n\t\t\tif ( ! lastBlockSourceDependenciesByRegistry.has( registry ) ) {\n\t\t\t\tlastBlockSourceDependenciesByRegistry.set( registry, new WeakMap );\n\t\t\t}\n\n\t\t\tconst lastBlockSourceDependencies = lastBlockSourceDependenciesByRegistry.get( registry );\n\t\t\tconst lastDependencies = lastBlockSourceDependencies.get( source );\n\n\t\t\tif ( ! isShallowEqual( dependencies, lastDependencies ) ) {\n\t\t\t\tlastBlockSourceDependencies.set( source, dependencies );\n\n\t\t\t\t// Allow the loop to continue in order to assign latest\n\t\t\t\t// dependencies values, but mark for reset.\n\t\t\t\treset = true;\n\t\t\t}\n\t\t}\n\n\t\tif ( reset ) {\n\t\t\tyield resetEditorBlocks( yield select( STORE_KEY, 'getEditorBlocks' ), { __unstableShouldCreateUndoLevel: false } );\n\t\t}\n\t}\n}\n\n/**\n * Returns an action object used in signalling that the latest version of the\n * post has been received, either by initialization or save.\n *\n * @param {Object} post Post object.\n *\n * @return {Object} Action object.\n */\nexport function resetPost( post ) {\n\treturn {\n\t\ttype: 'RESET_POST',\n\t\tpost,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the latest autosave of the\n * post has been received, by initialization or autosave.\n *\n * @deprecated since 5.6. Callers should use the `receiveAutosaves( postId, autosave )`\n * \t\t\t   selector from the '@wordpress/core-data' package.\n *\n * @param {Object} newAutosave Autosave post object.\n *\n * @return {Object} Action object.\n */\nexport function* resetAutosave( newAutosave ) {\n\tdeprecated( 'resetAutosave action (`core/editor` store)', {\n\t\talternative: 'receiveAutosaves action (`core` store)',\n\t\tplugin: 'Gutenberg',\n\t} );\n\n\tconst postId = yield select( STORE_KEY, 'getCurrentPostId' );\n\tyield dispatch( 'core', 'receiveAutosaves', postId, newAutosave );\n\n\treturn { type: '__INERT__' };\n}\n\n/**\n * Action for dispatching that a post update request has started.\n *\n * @param {Object} options\n *\n * @return {Object} An action object\n */\nexport function __experimentalRequestPostUpdateStart( options = {} ) {\n\treturn {\n\t\ttype: 'REQUEST_POST_UPDATE_START',\n\t\toptions,\n\t};\n}\n\n/**\n * Action for dispatching that a post update request has finished.\n *\n * @param {Object} options\n *\n * @return {Object} An action object\n */\nexport function __experimentalRequestPostUpdateFinish( options = {} ) {\n\treturn {\n\t\ttype: 'REQUEST_POST_UPDATE_FINISH',\n\t\toptions,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a patch of updates for the\n * latest version of the post have been received.\n *\n * @param {Object} edits Updated post fields.\n *\n * @return {Object} Action object.\n */\nexport function updatePost( edits ) {\n\treturn {\n\t\ttype: 'UPDATE_POST',\n\t\tedits,\n\t};\n}\n\n/**\n * Returns an action object used to setup the editor state when first opening\n * an editor.\n *\n * @param {Object} post   Post object.\n *\n * @return {Object} Action object.\n */\nexport function setupEditorState( post ) {\n\treturn {\n\t\ttype: 'SETUP_EDITOR_STATE',\n\t\tpost,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that attributes of the post have\n * been edited.\n *\n * @param {Object} edits   Post attributes to edit.\n * @param {Object} options Options for the edit.\n *\n * @yield {Object} Action object or control.\n */\nexport function* editPost( edits, options ) {\n\tconst { id, type } = yield select( STORE_KEY, 'getCurrentPost' );\n\tyield dispatch(\n\t\t'core',\n\t\t'editEntityRecord',\n\t\t'postType',\n\t\ttype,\n\t\tid,\n\t\tedits,\n\t\toptions\n\t);\n}\n\n/**\n * Returns action object produced by the updatePost creator augmented by\n * an optimist option that signals optimistically applying updates.\n *\n * @param {Object} edits  Updated post fields.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalOptimisticUpdatePost( edits ) {\n\treturn {\n\t\t...updatePost( edits ),\n\t\toptimist: { id: POST_UPDATE_TRANSACTION_ID },\n\t};\n}\n\n/**\n * Action generator for saving the current post in the editor.\n *\n * @param {Object} options\n */\nexport function* savePost( options = {} ) {\n\tif ( ! ( yield select( STORE_KEY, 'isEditedPostSaveable' ) ) ) {\n\t\treturn;\n\t}\n\tlet edits = {\n\t\tcontent: yield select( STORE_KEY, 'getEditedPostContent' ),\n\t};\n\tif ( ! options.isAutosave ) {\n\t\tyield dispatch( STORE_KEY, 'editPost', edits, { undoIgnore: true } );\n\t}\n\n\tyield __experimentalRequestPostUpdateStart( options );\n\tconst previousRecord = yield select( STORE_KEY, 'getCurrentPost' );\n\tedits = {\n\t\tid: previousRecord.id,\n\t\t...( yield select(\n\t\t\t'core',\n\t\t\t'getEntityRecordNonTransientEdits',\n\t\t\t'postType',\n\t\t\tpreviousRecord.type,\n\t\t\tpreviousRecord.id\n\t\t) ),\n\t\t...edits,\n\t};\n\tyield dispatch(\n\t\t'core',\n\t\t'saveEntityRecord',\n\t\t'postType',\n\t\tpreviousRecord.type,\n\t\tedits,\n\t\toptions\n\t);\n\tyield __experimentalRequestPostUpdateFinish( options );\n\n\tconst error = yield select(\n\t\t'core',\n\t\t'getLastEntitySaveError',\n\t\t'postType',\n\t\tpreviousRecord.type,\n\t\tpreviousRecord.id\n\t);\n\tif ( error ) {\n\t\tconst args = getNotificationArgumentsForSaveFail( {\n\t\t\tpost: previousRecord,\n\t\t\tedits,\n\t\t\terror,\n\t\t} );\n\t\tif ( args.length ) {\n\t\t\tyield dispatch( 'core/notices', 'createErrorNotice', ...args );\n\t\t}\n\t} else {\n\t\tconst updatedRecord = yield select( STORE_KEY, 'getCurrentPost' );\n\t\tconst args = getNotificationArgumentsForSaveSuccess( {\n\t\t\tpreviousPost: previousRecord,\n\t\t\tpost: updatedRecord,\n\t\t\tpostType: yield select( 'core', 'getPostType', updatedRecord.type ),\n\t\t\toptions,\n\t\t} );\n\t\tif ( args.length ) {\n\t\t\tyield dispatch( 'core/notices', 'createSuccessNotice', ...args );\n\t\t}\n\t\t// Make sure that any edits after saving create an undo level and are\n\t\t// considered for change detection.\n\t\tif ( ! options.isAutosave ) {\n\t\t\tyield dispatch( 'core/block-editor', '__unstableMarkLastChangeAsPersistent' );\n\t\t}\n\t}\n}\n\n/**\n * Action generator for handling refreshing the current post.\n */\nexport function* refreshPost() {\n\tconst post = yield select(\n\t\tSTORE_KEY,\n\t\t'getCurrentPost'\n\t);\n\tconst postTypeSlug = yield select(\n\t\tSTORE_KEY,\n\t\t'getCurrentPostType'\n\t);\n\tconst postType = yield select(\n\t\t'core',\n\t\t'getPostType',\n\t\tpostTypeSlug\n\t);\n\tconst newPost = yield apiFetch(\n\t\t{\n\t\t\t// Timestamp arg allows caller to bypass browser caching, which is\n\t\t\t// expected for this specific function.\n\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ post.id }` +\n\t\t\t\t`?context=edit&_timestamp=${ Date.now() }`,\n\t\t}\n\t);\n\tyield dispatch(\n\t\tSTORE_KEY,\n\t\t'resetPost',\n\t\tnewPost\n\t);\n}\n\n/**\n * Action generator for trashing the current post in the editor.\n */\nexport function* trashPost() {\n\tconst postTypeSlug = yield select(\n\t\tSTORE_KEY,\n\t\t'getCurrentPostType'\n\t);\n\tconst postType = yield select(\n\t\t'core',\n\t\t'getPostType',\n\t\tpostTypeSlug\n\t);\n\tyield dispatch(\n\t\t'core/notices',\n\t\t'removeNotice',\n\t\tTRASH_POST_NOTICE_ID\n\t);\n\ttry {\n\t\tconst post = yield select(\n\t\t\tSTORE_KEY,\n\t\t\t'getCurrentPost'\n\t\t);\n\t\tyield apiFetch(\n\t\t\t{\n\t\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ post.id }`,\n\t\t\t\tmethod: 'DELETE',\n\t\t\t}\n\t\t);\n\n\t\tyield dispatch(\n\t\t\tSTORE_KEY,\n\t\t\t'savePost'\n\t\t);\n\t} catch ( error ) {\n\t\tyield dispatch(\n\t\t\t'core/notices',\n\t\t\t'createErrorNotice',\n\t\t\t...getNotificationArgumentsForTrashFail( { error } ),\n\t\t);\n\t}\n}\n\n/**\n * Action generator used in signalling that the post should autosave.\n *\n * @param {Object?} options Extra flags to identify the autosave.\n */\nexport function* autosave( options ) {\n\tyield dispatch(\n\t\tSTORE_KEY,\n\t\t'savePost',\n\t\t{ isAutosave: true, ...options }\n\t);\n}\n\nexport function* __experimentalLocalAutosave() {\n\tconst post = yield select( STORE_KEY, 'getCurrentPost' );\n\tconst title = yield select( STORE_KEY, 'getEditedPostAttribute', 'title' );\n\tconst content = yield select( STORE_KEY, 'getEditedPostAttribute', 'content' );\n\tconst excerpt = yield select( STORE_KEY, 'getEditedPostAttribute', 'excerpt' );\n\tyield {\n\t\ttype: 'LOCAL_AUTOSAVE_SET',\n\t\tpostId: post.id,\n\t\ttitle,\n\t\tcontent,\n\t\texcerpt,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that undo history should\n * restore last popped state.\n *\n * @yield {Object} Action object.\n */\nexport function* redo() {\n\tyield dispatch( 'core', 'redo' );\n}\n\n/**\n * Returns an action object used in signalling that undo history should pop.\n *\n * @yield {Object} Action object.\n */\nexport function* undo() {\n\tyield dispatch( 'core', 'undo' );\n}\n\n/**\n * Returns an action object used in signalling that undo history record should\n * be created.\n *\n * @return {Object} Action object.\n */\nexport function createUndoLevel() {\n\treturn { type: 'CREATE_UNDO_LEVEL' };\n}\n\n/**\n * Returns an action object used to lock the editor.\n *\n * @param {Object}  lock Details about the post lock status, user, and nonce.\n *\n * @return {Object} Action object.\n */\nexport function updatePostLock( lock ) {\n\treturn {\n\t\ttype: 'UPDATE_POST_LOCK',\n\t\tlock,\n\t};\n}\n\n/**\n * Returns an action object used to fetch a single reusable block or all\n * reusable blocks from the REST API into the store.\n *\n * @param {?string} id If given, only a single reusable block with this ID will\n *                     be fetched.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalFetchReusableBlocks( id ) {\n\treturn {\n\t\ttype: 'FETCH_REUSABLE_BLOCKS',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that reusable blocks have been\n * received. `results` is an array of objects containing:\n *  - `reusableBlock` - Details about how the reusable block is persisted.\n *  - `parsedBlock` - The original block.\n *\n * @param {Object[]} results Reusable blocks received.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalReceiveReusableBlocks( results ) {\n\treturn {\n\t\ttype: 'RECEIVE_REUSABLE_BLOCKS',\n\t\tresults,\n\t};\n}\n\n/**\n * Returns an action object used to save a reusable block that's in the store to\n * the REST API.\n *\n * @param {Object} id The ID of the reusable block to save.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalSaveReusableBlock( id ) {\n\treturn {\n\t\ttype: 'SAVE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used to delete a reusable block via the REST API.\n *\n * @param {number} id The ID of the reusable block to delete.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalDeleteReusableBlock( id ) {\n\treturn {\n\t\ttype: 'DELETE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a reusable block is\n * to be updated.\n *\n * @param {number} id      The ID of the reusable block to update.\n * @param {Object} changes The changes to apply.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalUpdateReusableBlock( id, changes ) {\n\treturn {\n\t\ttype: 'UPDATE_REUSABLE_BLOCK',\n\t\tid,\n\t\tchanges,\n\t};\n}\n\n/**\n * Returns an action object used to convert a reusable block into a static\n * block.\n *\n * @param {string} clientId The client ID of the block to attach.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalConvertBlockToStatic( clientId ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_STATIC',\n\t\tclientId,\n\t};\n}\n\n/**\n * Returns an action object used to convert a static block into a reusable\n * block.\n *\n * @param {string} clientIds The client IDs of the block to detach.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalConvertBlockToReusable( clientIds ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_REUSABLE',\n\t\tclientIds: castArray( clientIds ),\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has enabled the\n * publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function enablePublishSidebar() {\n\treturn {\n\t\ttype: 'ENABLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has disabled the\n * publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function disablePublishSidebar() {\n\treturn {\n\t\ttype: 'DISABLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used to signal that post saving is locked.\n *\n * @param  {string} lockName The lock name.\n *\n * @example\n * ```\n * const { subscribe } = wp.data;\n *\n * const initialPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n *\n * // Only allow publishing posts that are set to a future date.\n * if ( 'publish' !== initialPostStatus ) {\n *\n * \t// Track locking.\n * \tlet locked = false;\n *\n * \t// Watch for the publish event.\n * \tlet unssubscribe = subscribe( () => {\n * \t\tconst currentPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n * \t\tif ( 'publish' !== currentPostStatus ) {\n *\n * \t\t\t// Compare the post date to the current date, lock the post if the date isn't in the future.\n * \t\t\tconst postDate = new Date( wp.data.select( 'core/editor' ).getEditedPostAttribute( 'date' ) );\n * \t\t\tconst currentDate = new Date();\n * \t\t\tif ( postDate.getTime() <= currentDate.getTime() ) {\n * \t\t\t\tif ( ! locked ) {\n * \t\t\t\t\tlocked = true;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).lockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t} else {\n * \t\t\t\tif ( locked ) {\n * \t\t\t\t\tlocked = false;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).unlockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t}\n * \t\t}\n * \t} );\n * }\n * ```\n *\n * @return {Object} Action object\n */\nexport function lockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that post saving is unlocked.\n *\n * @param  {string} lockName The lock name.\n *\n * @example\n * ```\n * // Unlock post saving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).unlockPostSaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function unlockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that the blocks have been updated.\n *\n * @param {Array}   blocks  Block Array.\n * @param {?Object} options Optional options.\n *\n * @yield {Object} Action object\n */\nexport function* resetEditorBlocks( blocks, options = {} ) {\n\tconst lastBlockAttributesChange = yield select( 'core/block-editor', '__experimentalGetLastBlockAttributeChanges' );\n\n\t// Sync to sources from block attributes updates.\n\tif ( lastBlockAttributesChange ) {\n\t\tconst updatedSources = new Set;\n\t\tconst updatedBlockTypes = new Set;\n\t\tfor ( const [ clientId, attributes ] of Object.entries( lastBlockAttributesChange ) ) {\n\t\t\tconst blockName = yield select( 'core/block-editor', 'getBlockName', clientId );\n\t\t\tif ( updatedBlockTypes.has( blockName ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tupdatedBlockTypes.add( blockName );\n\t\t\tconst blockType = yield select( 'core/blocks', 'getBlockType', blockName );\n\n\t\t\tfor ( const [ attributeName, newAttributeValue ] of Object.entries( attributes ) ) {\n\t\t\t\tif ( ! blockType.attributes.hasOwnProperty( attributeName ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst schema = blockType.attributes[ attributeName ];\n\t\t\t\tconst source = sources[ schema.source ];\n\n\t\t\t\tif ( source && source.update ) {\n\t\t\t\t\tyield* source.update( schema, newAttributeValue );\n\t\t\t\t\tupdatedSources.add( source );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Dependencies are reset so that source dependencies subscription\n\t\t// skips a reset which would otherwise occur by dependencies change.\n\t\t// This assures that at most one reset occurs per block change.\n\t\tyield* resetLastBlockSourceDependencies( Array.from( updatedSources ) );\n\t}\n\n\tconst edits = { blocks: yield* getBlocksWithSourcedAttributes( blocks ) };\n\n\tif ( options.__unstableShouldCreateUndoLevel !== false ) {\n\t\tconst { id, type } = yield select( STORE_KEY, 'getCurrentPost' );\n\t\tconst noChange =\n\t\t\t( yield select( 'core', 'getEditedEntityRecord', 'postType', type, id ) )\n\t\t\t\t.blocks === edits.blocks;\n\t\tif ( noChange ) {\n\t\t\treturn yield dispatch(\n\t\t\t\t'core',\n\t\t\t\t'__unstableCreateUndoLevel',\n\t\t\t\t'postType',\n\t\t\t\ttype,\n\t\t\t\tid\n\t\t\t);\n\t\t}\n\n\t\t// We create a new function here on every persistent edit\n\t\t// to make sure the edit makes the post dirty and creates\n\t\t// a new undo level.\n\t\tedits.content = ( { blocks: blocksForSerialization = [] } ) =>\n\t\t\tserializeBlocks( blocksForSerialization );\n\t}\n\n\tyield* editPost( edits );\n}\n\n/*\n * Returns an action object used in signalling that the post editor settings have been updated.\n *\n * @param {Object} settings Updated settings\n *\n * @return {Object} Action object\n */\nexport function updateEditorSettings( settings ) {\n\treturn {\n\t\ttype: 'UPDATE_EDITOR_SETTINGS',\n\t\tsettings,\n\t};\n}\n\n/**\n * Backward compatibility\n */\n\nconst getBlockEditorAction = ( name ) => function* ( ...args ) {\n\tdeprecated( '`wp.data.dispatch( \\'core/editor\\' ).' + name + '`', {\n\t\talternative: '`wp.data.dispatch( \\'core/block-editor\\' ).' + name + '`',\n\t} );\n\tyield dispatch( 'core/block-editor', name, ...args );\n};\n\n/**\n * @see resetBlocks in core/block-editor store.\n */\nexport const resetBlocks = getBlockEditorAction( 'resetBlocks' );\n\n/**\n * @see receiveBlocks in core/block-editor store.\n */\nexport const receiveBlocks = getBlockEditorAction( 'receiveBlocks' );\n\n/**\n * @see updateBlock in core/block-editor store.\n */\nexport const updateBlock = getBlockEditorAction( 'updateBlock' );\n\n/**\n * @see updateBlockAttributes in core/block-editor store.\n */\nexport const updateBlockAttributes = getBlockEditorAction( 'updateBlockAttributes' );\n\n/**\n * @see selectBlock in core/block-editor store.\n */\nexport const selectBlock = getBlockEditorAction( 'selectBlock' );\n\n/**\n * @see startMultiSelect in core/block-editor store.\n */\nexport const startMultiSelect = getBlockEditorAction( 'startMultiSelect' );\n\n/**\n * @see stopMultiSelect in core/block-editor store.\n */\nexport const stopMultiSelect = getBlockEditorAction( 'stopMultiSelect' );\n\n/**\n * @see multiSelect in core/block-editor store.\n */\nexport const multiSelect = getBlockEditorAction( 'multiSelect' );\n\n/**\n * @see clearSelectedBlock in core/block-editor store.\n */\nexport const clearSelectedBlock = getBlockEditorAction( 'clearSelectedBlock' );\n\n/**\n * @see toggleSelection in core/block-editor store.\n */\nexport const toggleSelection = getBlockEditorAction( 'toggleSelection' );\n\n/**\n * @see replaceBlocks in core/block-editor store.\n */\nexport const replaceBlocks = getBlockEditorAction( 'replaceBlocks' );\n\n/**\n * @see replaceBlock in core/block-editor store.\n */\nexport const replaceBlock = getBlockEditorAction( 'replaceBlock' );\n\n/**\n * @see moveBlocksDown in core/block-editor store.\n */\nexport const moveBlocksDown = getBlockEditorAction( 'moveBlocksDown' );\n\n/**\n * @see moveBlocksUp in core/block-editor store.\n */\nexport const moveBlocksUp = getBlockEditorAction( 'moveBlocksUp' );\n\n/**\n * @see moveBlockToPosition in core/block-editor store.\n */\nexport const moveBlockToPosition = getBlockEditorAction( 'moveBlockToPosition' );\n\n/**\n * @see insertBlock in core/block-editor store.\n */\nexport const insertBlock = getBlockEditorAction( 'insertBlock' );\n\n/**\n * @see insertBlocks in core/block-editor store.\n */\nexport const insertBlocks = getBlockEditorAction( 'insertBlocks' );\n\n/**\n * @see showInsertionPoint in core/block-editor store.\n */\nexport const showInsertionPoint = getBlockEditorAction( 'showInsertionPoint' );\n\n/**\n * @see hideInsertionPoint in core/block-editor store.\n */\nexport const hideInsertionPoint = getBlockEditorAction( 'hideInsertionPoint' );\n\n/**\n * @see setTemplateValidity in core/block-editor store.\n */\nexport const setTemplateValidity = getBlockEditorAction( 'setTemplateValidity' );\n\n/**\n * @see synchronizeTemplate in core/block-editor store.\n */\nexport const synchronizeTemplate = getBlockEditorAction( 'synchronizeTemplate' );\n\n/**\n * @see mergeBlocks in core/block-editor store.\n */\nexport const mergeBlocks = getBlockEditorAction( 'mergeBlocks' );\n\n/**\n * @see removeBlocks in core/block-editor store.\n */\nexport const removeBlocks = getBlockEditorAction( 'removeBlocks' );\n\n/**\n * @see removeBlock in core/block-editor store.\n */\nexport const removeBlock = getBlockEditorAction( 'removeBlock' );\n\n/**\n * @see toggleBlockMode in core/block-editor store.\n */\nexport const toggleBlockMode = getBlockEditorAction( 'toggleBlockMode' );\n\n/**\n * @see startTyping in core/block-editor store.\n */\nexport const startTyping = getBlockEditorAction( 'startTyping' );\n\n/**\n * @see stopTyping in core/block-editor store.\n */\nexport const stopTyping = getBlockEditorAction( 'stopTyping' );\n\n/**\n * @see enterFormattedText in core/block-editor store.\n */\nexport const enterFormattedText = getBlockEditorAction( 'enterFormattedText' );\n\n/**\n * @see exitFormattedText in core/block-editor store.\n */\nexport const exitFormattedText = getBlockEditorAction( 'exitFormattedText' );\n\n/**\n * @see insertDefaultBlock in core/block-editor store.\n */\nexport const insertDefaultBlock = getBlockEditorAction( 'insertDefaultBlock' );\n\n/**\n * @see updateBlockListSettings in core/block-editor store.\n */\nexport const updateBlockListSettings = getBlockEditorAction( 'updateBlockListSettings' );\n"]}