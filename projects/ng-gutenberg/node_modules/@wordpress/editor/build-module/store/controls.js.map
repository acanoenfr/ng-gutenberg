{"version":3,"sources":["@wordpress/editor/src/store/controls.js"],"names":["createRegistryControl","awaitNextStateChange","type","getRegistry","postKey","postId","localAutosaveGet","window","sessionStorage","getItem","localAutosaveSet","title","content","excerpt","setItem","JSON","stringify","post_title","localAutosaveClear","removeItem","controls","AWAIT_NEXT_STATE_CHANGE","registry","Promise","resolve","unsubscribe","subscribe","GET_REGISTRY","LOCAL_AUTOSAVE_SET"],"mappings":"AAAA;;;AAGA,SAASA,qBAAT,QAAsC,iBAAtC;AAEA;;;;;;;AAMA,OAAO,SAASC,oBAAT,GAAgC;AACtC,SAAO;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAP;AACA;AAED;;;;;;;AAMA,OAAO,SAASC,WAAT,GAAuB;AAC7B,SAAO;AAAED,IAAAA,IAAI,EAAE;AAAR,GAAP;AACA;AAED;;;;;;;;;;;;;AAYA,SAASE,OAAT,CAAkBC,MAAlB,EAA2B;AAC1B,iDAAyCA,MAAzC;AACA;;AAED,OAAO,SAASC,gBAAT,CAA2BD,MAA3B,EAAoC;AAC1C,SAAOE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA+BL,OAAO,CAAEC,MAAF,CAAtC,CAAP;AACA;AAED,OAAO,SAASK,gBAAT,CAA2BL,MAA3B,EAAmCM,KAAnC,EAA0CC,OAA1C,EAAmDC,OAAnD,EAA6D;AACnEN,EAAAA,MAAM,CAACC,cAAP,CAAsBM,OAAtB,CAA+BV,OAAO,CAAEC,MAAF,CAAtC,EAAkDU,IAAI,CAACC,SAAL,CAAgB;AACjEC,IAAAA,UAAU,EAAEN,KADqD;AAEjEC,IAAAA,OAAO,EAAPA,OAFiE;AAGjEC,IAAAA,OAAO,EAAPA;AAHiE,GAAhB,CAAlD;AAKA;AAED,OAAO,SAASK,kBAAT,CAA6Bb,MAA7B,EAAsC;AAC5CE,EAAAA,MAAM,CAACC,cAAP,CAAsBW,UAAtB,CAAkCf,OAAO,CAAEC,MAAF,CAAzC;AACA;AAED,IAAMe,QAAQ,GAAG;AAChBC,EAAAA,uBAAuB,EAAErB,qBAAqB,CAC7C,UAAEsB,QAAF;AAAA,WAAgB;AAAA,aAAM,IAAIC,OAAJ,CAAa,UAAEC,OAAF,EAAe;AACjD,YAAMC,WAAW,GAAGH,QAAQ,CAACI,SAAT,CAAoB,YAAM;AAC7CD,UAAAA,WAAW;AACXD,UAAAA,OAAO;AACP,SAHmB,CAApB;AAIA,OALqB,CAAN;AAAA,KAAhB;AAAA,GAD6C,CAD9B;AAShBG,EAAAA,YAAY,EAAE3B,qBAAqB,CAAE,UAAEsB,QAAF;AAAA,WAAgB;AAAA,aAAMA,QAAN;AAAA,KAAhB;AAAA,GAAF,CATnB;AAUhBM,EAAAA,kBAVgB,oCAU0C;AAAA,QAApCvB,MAAoC,QAApCA,MAAoC;AAAA,QAA5BM,KAA4B,QAA5BA,KAA4B;AAAA,QAArBC,OAAqB,QAArBA,OAAqB;AAAA,QAAZC,OAAY,QAAZA,OAAY;AACzDH,IAAAA,gBAAgB,CAAEL,MAAF,EAAUM,KAAV,EAAiBC,OAAjB,EAA0BC,OAA1B,CAAhB;AACA;AAZe,CAAjB;AAeA,eAAeO,QAAf","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createRegistryControl } from '@wordpress/data';\n\n/**\n * Returns a control descriptor signalling to subscribe to the registry and\n * resolve the control promise only when the next state change occurs.\n *\n * @return {Object} Control descriptor.\n */\nexport function awaitNextStateChange() {\n\treturn { type: 'AWAIT_NEXT_STATE_CHANGE' };\n}\n\n/**\n * Returns a control descriptor signalling to resolve with the current data\n * registry.\n *\n * @return {Object} Control descriptor.\n */\nexport function getRegistry() {\n\treturn { type: 'GET_REGISTRY' };\n}\n\n/**\n * Function returning a sessionStorage key to set or retrieve a given post's\n * automatic session backup.\n *\n * Keys are crucially prefixed with 'wp-autosave-' so that wp-login.php's\n * `loggedout` handler can clear sessionStorage of any user-private content.\n *\n * @see https://github.com/WordPress/wordpress-develop/blob/6dad32d2aed47e6c0cf2aee8410645f6d7aba6bd/src/wp-login.php#L103\n *\n * @param {string} postId  Post ID.\n * @return {string}        sessionStorage key\n */\nfunction postKey( postId ) {\n\treturn `wp-autosave-block-editor-post-${ postId }`;\n}\n\nexport function localAutosaveGet( postId ) {\n\treturn window.sessionStorage.getItem( postKey( postId ) );\n}\n\nexport function localAutosaveSet( postId, title, content, excerpt ) {\n\twindow.sessionStorage.setItem( postKey( postId ), JSON.stringify( {\n\t\tpost_title: title,\n\t\tcontent,\n\t\texcerpt,\n\t} ) );\n}\n\nexport function localAutosaveClear( postId ) {\n\twindow.sessionStorage.removeItem( postKey( postId ) );\n}\n\nconst controls = {\n\tAWAIT_NEXT_STATE_CHANGE: createRegistryControl(\n\t\t( registry ) => () => new Promise( ( resolve ) => {\n\t\t\tconst unsubscribe = registry.subscribe( () => {\n\t\t\t\tunsubscribe();\n\t\t\t\tresolve();\n\t\t\t} );\n\t\t} )\n\t),\n\tGET_REGISTRY: createRegistryControl( ( registry ) => () => registry ),\n\tLOCAL_AUTOSAVE_SET( { postId, title, content, excerpt } ) {\n\t\tlocalAutosaveSet( postId, title, content, excerpt );\n\t},\n};\n\nexport default controls;\n"]}