import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import RNReactNativeGutenbergBridge, { subscribeParentGetHtml, subscribeParentToggleHTMLMode, subscribeUpdateHtml, subscribeSetFocusOnTitle, subscribeSetTitle } from 'react-native-gutenberg-bridge';
/**
 * WordPress dependencies
 */

import { Component } from '@wordpress/element';
import { parse, serialize, getUnregisteredTypeHandlerName } from '@wordpress/blocks';
import { withDispatch, withSelect } from '@wordpress/data';
import { compose } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import EditorProvider from './index.js';

var NativeEditorProvider =
/*#__PURE__*/
function (_Component) {
  _inherits(NativeEditorProvider, _Component);

  function NativeEditorProvider(props) {
    var _this;

    _classCallCheck(this, NativeEditorProvider);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(NativeEditorProvider).apply(this, arguments)); // Keep a local reference to `post` to detect changes

    _this.post = props.post;
    _this.setTitleRef = _this.setTitleRef.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(NativeEditorProvider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.subscriptionParentGetHtml = subscribeParentGetHtml(function () {
        _this2.serializeToNativeAction();
      });
      this.subscriptionParentToggleHTMLMode = subscribeParentToggleHTMLMode(function () {
        _this2.toggleMode();
      });
      this.subscriptionParentSetTitle = subscribeSetTitle(function (payload) {
        _this2.props.editTitle(payload.title);
      });
      this.subscriptionParentUpdateHtml = subscribeUpdateHtml(function (payload) {
        _this2.updateHtmlAction(payload.html);
      });
      this.subscriptionParentSetFocusOnTitle = subscribeSetFocusOnTitle(function () {
        if (_this2.postTitleRef) {
          _this2.postTitleRef.focus();
        }
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.subscriptionParentGetHtml) {
        this.subscriptionParentGetHtml.remove();
      }

      if (this.subscriptionParentToggleHTMLMode) {
        this.subscriptionParentToggleHTMLMode.remove();
      }

      if (this.subscriptionParentSetTitle) {
        this.subscriptionParentSetTitle.remove();
      }

      if (this.subscriptionParentUpdateHtml) {
        this.subscriptionParentUpdateHtml.remove();
      }

      if (this.subscriptionParentSetFocusOnTitle) {
        this.subscriptionParentSetFocusOnTitle.remove();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (!prevProps.isReady && this.props.isReady) {
        var blocks = this.props.blocks;

        var isUnsupportedBlock = function isUnsupportedBlock(_ref) {
          var name = _ref.name;
          return name === getUnregisteredTypeHandlerName();
        };

        var unsupportedBlockNames = blocks.filter(isUnsupportedBlock).map(function (block) {
          return block.attributes.originalName;
        });
        RNReactNativeGutenbergBridge.editorDidMount(unsupportedBlockNames);
      }
    }
  }, {
    key: "setTitleRef",
    value: function setTitleRef(titleRef) {
      this.postTitleRef = titleRef;
    }
  }, {
    key: "serializeToNativeAction",
    value: function serializeToNativeAction() {
      if (this.props.mode === 'text') {
        this.updateHtmlAction(this.props.getEditedPostContent());
      }

      var html = serialize(this.props.blocks);
      var title = this.props.title;
      var hasChanges = title !== this.post.title.raw || html !== this.post.content.raw;
      RNReactNativeGutenbergBridge.provideToNative_Html(html, title, hasChanges);

      if (hasChanges) {
        this.post.title.raw = title;
        this.post.content.raw = html;
      }
    }
  }, {
    key: "updateHtmlAction",
    value: function updateHtmlAction(html) {
      var parsed = parse(html);
      this.props.resetEditorBlocksWithoutUndoLevel(parsed);
    }
  }, {
    key: "toggleMode",
    value: function toggleMode() {
      var _this$props = this.props,
          mode = _this$props.mode,
          switchMode = _this$props.switchMode; // refresh html content first

      this.serializeToNativeAction(); // make sure to blur the selected block and dismiss the keyboard

      this.props.clearSelectedBlock();
      switchMode(mode === 'visual' ? 'text' : 'visual');
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          post = _this$props2.post,
          props = _objectWithoutProperties(_this$props2, ["children", "post"]);

      return createElement(EditorProvider, _extends({
        post: this.post
      }, props), children);
    }
  }]);

  return NativeEditorProvider;
}(Component);

export default compose([withSelect(function (select) {
  var _select = select('core/editor'),
      isEditorReady = _select.__unstableIsEditorReady,
      getEditorBlocks = _select.getEditorBlocks,
      getEditedPostAttribute = _select.getEditedPostAttribute,
      getEditedPostContent = _select.getEditedPostContent;

  var _select2 = select('core/edit-post'),
      getEditorMode = _select2.getEditorMode;

  return {
    mode: getEditorMode(),
    isReady: isEditorReady(),
    blocks: getEditorBlocks(),
    title: getEditedPostAttribute('title'),
    getEditedPostContent: getEditedPostContent
  };
}), withDispatch(function (dispatch) {
  var _dispatch = dispatch('core/editor'),
      editPost = _dispatch.editPost,
      resetEditorBlocks = _dispatch.resetEditorBlocks;

  var _dispatch2 = dispatch('core/block-editor'),
      clearSelectedBlock = _dispatch2.clearSelectedBlock;

  var _dispatch3 = dispatch('core/edit-post'),
      switchEditorMode = _dispatch3.switchEditorMode;

  return {
    clearSelectedBlock: clearSelectedBlock,
    editTitle: function editTitle(title) {
      editPost({
        title: title
      });
    },
    resetEditorBlocksWithoutUndoLevel: function resetEditorBlocksWithoutUndoLevel(blocks) {
      resetEditorBlocks(blocks, {
        __unstableShouldCreateUndoLevel: false
      });
    },
    switchMode: function switchMode(mode) {
      switchEditorMode(mode);
    }
  };
})])(NativeEditorProvider);
//# sourceMappingURL=index.native.js.map