"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _reactNativeGutenbergBridge = _interopRequireWildcard(require("react-native-gutenberg-bridge"));

var _blocks = require("@wordpress/blocks");

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _index = _interopRequireDefault(require("./index.js"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var NativeEditorProvider =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(NativeEditorProvider, _Component);

  function NativeEditorProvider(props) {
    var _this;

    (0, _classCallCheck2.default)(this, NativeEditorProvider);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(NativeEditorProvider).apply(this, arguments)); // Keep a local reference to `post` to detect changes

    _this.post = props.post;
    _this.setTitleRef = _this.setTitleRef.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(NativeEditorProvider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.subscriptionParentGetHtml = (0, _reactNativeGutenbergBridge.subscribeParentGetHtml)(function () {
        _this2.serializeToNativeAction();
      });
      this.subscriptionParentToggleHTMLMode = (0, _reactNativeGutenbergBridge.subscribeParentToggleHTMLMode)(function () {
        _this2.toggleMode();
      });
      this.subscriptionParentSetTitle = (0, _reactNativeGutenbergBridge.subscribeSetTitle)(function (payload) {
        _this2.props.editTitle(payload.title);
      });
      this.subscriptionParentUpdateHtml = (0, _reactNativeGutenbergBridge.subscribeUpdateHtml)(function (payload) {
        _this2.updateHtmlAction(payload.html);
      });
      this.subscriptionParentSetFocusOnTitle = (0, _reactNativeGutenbergBridge.subscribeSetFocusOnTitle)(function () {
        if (_this2.postTitleRef) {
          _this2.postTitleRef.focus();
        }
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.subscriptionParentGetHtml) {
        this.subscriptionParentGetHtml.remove();
      }

      if (this.subscriptionParentToggleHTMLMode) {
        this.subscriptionParentToggleHTMLMode.remove();
      }

      if (this.subscriptionParentSetTitle) {
        this.subscriptionParentSetTitle.remove();
      }

      if (this.subscriptionParentUpdateHtml) {
        this.subscriptionParentUpdateHtml.remove();
      }

      if (this.subscriptionParentSetFocusOnTitle) {
        this.subscriptionParentSetFocusOnTitle.remove();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (!prevProps.isReady && this.props.isReady) {
        var blocks = this.props.blocks;

        var isUnsupportedBlock = function isUnsupportedBlock(_ref) {
          var name = _ref.name;
          return name === (0, _blocks.getUnregisteredTypeHandlerName)();
        };

        var unsupportedBlockNames = blocks.filter(isUnsupportedBlock).map(function (block) {
          return block.attributes.originalName;
        });

        _reactNativeGutenbergBridge.default.editorDidMount(unsupportedBlockNames);
      }
    }
  }, {
    key: "setTitleRef",
    value: function setTitleRef(titleRef) {
      this.postTitleRef = titleRef;
    }
  }, {
    key: "serializeToNativeAction",
    value: function serializeToNativeAction() {
      if (this.props.mode === 'text') {
        this.updateHtmlAction(this.props.getEditedPostContent());
      }

      var html = (0, _blocks.serialize)(this.props.blocks);
      var title = this.props.title;
      var hasChanges = title !== this.post.title.raw || html !== this.post.content.raw;

      _reactNativeGutenbergBridge.default.provideToNative_Html(html, title, hasChanges);

      if (hasChanges) {
        this.post.title.raw = title;
        this.post.content.raw = html;
      }
    }
  }, {
    key: "updateHtmlAction",
    value: function updateHtmlAction(html) {
      var parsed = (0, _blocks.parse)(html);
      this.props.resetEditorBlocksWithoutUndoLevel(parsed);
    }
  }, {
    key: "toggleMode",
    value: function toggleMode() {
      var _this$props = this.props,
          mode = _this$props.mode,
          switchMode = _this$props.switchMode; // refresh html content first

      this.serializeToNativeAction(); // make sure to blur the selected block and dismiss the keyboard

      this.props.clearSelectedBlock();
      switchMode(mode === 'visual' ? 'text' : 'visual');
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          post = _this$props2.post,
          props = (0, _objectWithoutProperties2.default)(_this$props2, ["children", "post"]);
      return (0, _element.createElement)(_index.default, (0, _extends2.default)({
        post: this.post
      }, props), children);
    }
  }]);
  return NativeEditorProvider;
}(_element.Component);

var _default = (0, _compose.compose)([(0, _data.withSelect)(function (select) {
  var _select = select('core/editor'),
      isEditorReady = _select.__unstableIsEditorReady,
      getEditorBlocks = _select.getEditorBlocks,
      getEditedPostAttribute = _select.getEditedPostAttribute,
      getEditedPostContent = _select.getEditedPostContent;

  var _select2 = select('core/edit-post'),
      getEditorMode = _select2.getEditorMode;

  return {
    mode: getEditorMode(),
    isReady: isEditorReady(),
    blocks: getEditorBlocks(),
    title: getEditedPostAttribute('title'),
    getEditedPostContent: getEditedPostContent
  };
}), (0, _data.withDispatch)(function (dispatch) {
  var _dispatch = dispatch('core/editor'),
      editPost = _dispatch.editPost,
      resetEditorBlocks = _dispatch.resetEditorBlocks;

  var _dispatch2 = dispatch('core/block-editor'),
      clearSelectedBlock = _dispatch2.clearSelectedBlock;

  var _dispatch3 = dispatch('core/edit-post'),
      switchEditorMode = _dispatch3.switchEditorMode;

  return {
    clearSelectedBlock: clearSelectedBlock,
    editTitle: function editTitle(title) {
      editPost({
        title: title
      });
    },
    resetEditorBlocksWithoutUndoLevel: function resetEditorBlocksWithoutUndoLevel(blocks) {
      resetEditorBlocks(blocks, {
        __unstableShouldCreateUndoLevel: false
      });
    },
    switchMode: function switchMode(mode) {
      switchEditorMode(mode);
    }
  };
})])(NativeEditorProvider);

exports.default = _default;
//# sourceMappingURL=index.native.js.map