{"version":3,"sources":["@wordpress/editor/src/components/local-autosave-monitor/index.js"],"names":["requestIdleCallback","window","requestAnimationFrame","hasSessionStorageSupport","sessionStorage","setItem","removeItem","error","useAutosaveNotice","select","_postId","getCurrentPostId","postType","getCurrentPostType","user","getCurrentUser","postId","getEditedPostAttribute","remoteAutosave","getAutosave","id","hasFetchedAutosave","hasFetchedAutosaves","createWarningNotice","removeNotice","editPost","resetEditorBlocks","localAutosave","JSON","parse","title","post_title","content","excerpt","edits","hasDifference","Object","keys","some","key","noticeId","actions","label","onClick","useAutosavePurge","isDirty","isEditedPostDirty","isAutosaving","isAutosavingPost","didError","didPostSaveRequestFail","lastIsDirty","lastIsAutosaving","current","LocalAutosaveMonitor","__experimentalLocalAutosave","autosave","localAutosaveInterval","getEditorSettings","__experimentalLocalAutosaveInterval"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { once, uniqueId, omit } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useCallback, useEffect, useRef } from '@wordpress/element';\nimport { ifCondition } from '@wordpress/compose';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\nimport { parse } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport AutosaveMonitor from '../autosave-monitor';\nimport {\n\tlocalAutosaveGet,\n\tlocalAutosaveClear,\n} from '../../store/controls';\n\nconst requestIdleCallback = window.requestIdleCallback ? window.requestIdleCallback : window.requestAnimationFrame;\n\n/**\n * Function which returns true if the current environment supports browser\n * sessionStorage, or false otherwise. The result of this function is cached and\n * reused in subsequent invocations.\n */\nconst hasSessionStorageSupport = once( () => {\n\ttry {\n\t\t// Private Browsing in Safari 10 and earlier will throw an error when\n\t\t// attempting to set into sessionStorage. The test here is intentional in\n\t\t// causing a thrown error as condition bailing from local autosave.\n\t\twindow.sessionStorage.setItem( '__wpEditorTestSessionStorage', '' );\n\t\twindow.sessionStorage.removeItem( '__wpEditorTestSessionStorage' );\n\t\treturn true;\n\t} catch ( error ) {\n\t\treturn false;\n\t}\n} );\n\n/**\n * Custom hook which manages the creation of a notice prompting the user to\n * restore a local autosave, if one exists.\n */\nfunction useAutosaveNotice() {\n\tconst {\n\t\tpostId,\n\t\tgetEditedPostAttribute,\n\t\tremoteAutosave,\n\t\thasFetchedAutosave,\n\t} = useSelect( ( select ) => {\n\t\tconst _postId = select( 'core/editor' ).getCurrentPostId();\n\t\tconst postType = select( 'core/editor' ).getCurrentPostType();\n\t\tconst user = select( 'core' ).getCurrentUser();\n\t\treturn {\n\t\t\tpostId: _postId,\n\t\t\tgetEditedPostAttribute: select( 'core/editor' ).getEditedPostAttribute,\n\t\t\tremoteAutosave: select( 'core' ).getAutosave( postType, _postId, user.id ),\n\t\t\thasFetchedAutosave: select( 'core' ).hasFetchedAutosaves( postType, _postId ) && user.id,\n\t\t};\n\t} );\n\n\tconst { createWarningNotice, removeNotice } = useDispatch( 'core/notices' );\n\tconst { editPost, resetEditorBlocks } = useDispatch( 'core/editor' );\n\n\tuseEffect( () => {\n\t\tif ( ! hasFetchedAutosave ) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet localAutosave = localAutosaveGet( postId );\n\t\tif ( ! localAutosave ) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tlocalAutosave = JSON.parse( localAutosave );\n\t\t} catch ( error ) {\n\t\t\t// Not usable if it can't be parsed.\n\t\t\treturn;\n\t\t}\n\n\t\tconst { post_title: title, content, excerpt } = localAutosave;\n\t\tconst edits = { title, content, excerpt };\n\n\t\t{\n\t\t\t// Only display a notice if there is a difference between what has been\n\t\t\t// saved and that which is stored in sessionStorage.\n\t\t\tconst hasDifference = Object.keys( edits ).some( ( key ) => {\n\t\t\t\treturn edits[ key ] !== getEditedPostAttribute( key );\n\t\t\t} );\n\n\t\t\tif ( ! hasDifference ) {\n\t\t\t\t// If there is no difference, it can be safely ejected from storage.\n\t\t\t\tlocalAutosaveClear( postId );\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif ( remoteAutosave ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst noticeId = uniqueId( 'wpEditorAutosaveRestore' );\n\t\tcreateWarningNotice( __( 'The backup of this post in your browser is different from the version below.' ), {\n\t\t\tid: noticeId,\n\t\t\tactions: [\n\t\t\t\t{\n\t\t\t\t\tlabel: __( 'Restore the backup' ),\n\t\t\t\t\tonClick() {\n\t\t\t\t\t\teditPost( omit( edits, [ 'content' ] ) );\n\t\t\t\t\t\tresetEditorBlocks( parse( edits.content ) );\n\t\t\t\t\t\tremoveNotice( noticeId );\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t} );\n\t}, [ postId, hasFetchedAutosave ] );\n}\n\n/**\n * Custom hook which ejects a local autosave after a successful save occurs.\n */\nfunction useAutosavePurge() {\n\tconst {\n\t\tpostId,\n\t\tisDirty,\n\t\tisAutosaving,\n\t\tdidError,\n\t} = useSelect( ( select ) => ( {\n\t\tpostId: select( 'core/editor' ).getCurrentPostId(),\n\t\tpostType: select( 'core/editor' ).getCurrentPostType(),\n\t\tisDirty: select( 'core/editor' ).isEditedPostDirty(),\n\t\tisAutosaving: select( 'core/editor' ).isAutosavingPost(),\n\t\tdidError: select( 'core/editor' ).didPostSaveRequestFail(),\n\t} ) );\n\n\tconst lastIsDirty = useRef( isDirty );\n\tconst lastIsAutosaving = useRef( isAutosaving );\n\n\tuseEffect( () => {\n\t\tif ( lastIsAutosaving.current && ! isAutosaving && ! didError ) {\n\t\t\tlocalAutosaveClear( postId );\n\t\t}\n\n\t\tlastIsDirty.current = isDirty;\n\t\tlastIsAutosaving.current = isAutosaving;\n\t}, [ isDirty, isAutosaving, didError ] );\n}\n\nfunction LocalAutosaveMonitor() {\n\tconst { __experimentalLocalAutosave } = useDispatch( 'core/editor' );\n\tconst autosave = useCallback( () => {\n\t\trequestIdleCallback( __experimentalLocalAutosave );\n\t}, [] );\n\tuseAutosaveNotice();\n\tuseAutosavePurge();\n\n\tconst { localAutosaveInterval } = useSelect( ( select ) => ( {\n\t\tlocalAutosaveInterval: select( 'core/editor' )\n\t\t\t.getEditorSettings().__experimentalLocalAutosaveInterval,\n\t} ) );\n\n\treturn (\n\t\t<AutosaveMonitor\n\t\t\tinterval={ localAutosaveInterval }\n\t\t\tautosave={ autosave }\n\t\t\tshouldThrottle\n\t\t/>\n\t);\n}\n\nexport default ifCondition( hasSessionStorageSupport )( LocalAutosaveMonitor );\n"]}