{"version":3,"sources":["@wordpress/editor/src/store/actions.js"],"names":["getBlocksWithSourcedAttributes","resetLastBlockSourceDependencies","setupEditor","__experimentalSubscribeSources","resetAutosave","editPost","savePost","refreshPost","trashPost","autosave","__experimentalLocalAutosave","redo","undo","resetEditorBlocks","lastBlockSourceDependenciesByRegistry","WeakMap","blocks","registry","has","blockSourceDependencies","get","workingBlocks","i","length","block","name","blockType","Object","entries","attributes","attributeName","schema","sources","source","apply","dependencies","sourcedAttributeValue","splice","innerBlocks","appliedInnerBlocks","sourcesToUpdate","values","set","lastBlockSourceDependencies","getDependencies","post","edits","template","content","raw","isNewPost","status","resetPost","type","__unstableShouldCreateUndoLevel","setupEditorState","keys","some","key","__experimentalTearDownEditor","STORE_KEY","isStillReady","reset","lastDependencies","newAutosave","alternative","plugin","postId","__experimentalRequestPostUpdateStart","options","__experimentalRequestPostUpdateFinish","updatePost","id","__experimentalOptimisticUpdatePost","optimist","POST_UPDATE_TRANSACTION_ID","isAutosave","undoIgnore","previousRecord","error","args","dispatch","updatedRecord","getNotificationArgumentsForSaveSuccess","previousPost","postType","postTypeSlug","path","rest_base","Date","now","newPost","TRASH_POST_NOTICE_ID","method","title","excerpt","createUndoLevel","updatePostLock","lock","__experimentalFetchReusableBlocks","__experimentalReceiveReusableBlocks","results","__experimentalSaveReusableBlock","__experimentalDeleteReusableBlock","__experimentalUpdateReusableBlock","changes","__experimentalConvertBlockToStatic","clientId","__experimentalConvertBlockToReusable","clientIds","enablePublishSidebar","disablePublishSidebar","lockPostSaving","lockName","unlockPostSaving","lastBlockAttributesChange","updatedSources","Set","updatedBlockTypes","blockName","add","newAttributeValue","hasOwnProperty","update","Array","from","noChange","blocksForSerialization","updateEditorSettings","settings","getBlockEditorAction","resetBlocks","receiveBlocks","updateBlock","updateBlockAttributes","selectBlock","startMultiSelect","stopMultiSelect","multiSelect","clearSelectedBlock","toggleSelection","replaceBlocks","replaceBlock","moveBlocksDown","moveBlocksUp","moveBlockToPosition","insertBlock","insertBlocks","showInsertionPoint","hideInsertionPoint","setTemplateValidity","synchronizeTemplate","mergeBlocks","removeBlocks","removeBlock","toggleBlockMode","startTyping","stopTyping","enterFormattedText","exitFormattedText","insertDefaultBlock","updateBlockListSettings"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { has, castArray } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport deprecated from '@wordpress/deprecated';\nimport { dispatch, select, apiFetch } from '@wordpress/data-controls';\nimport { parse, synchronizeBlocksWithTemplate } from '@wordpress/blocks';\nimport isShallowEqual from '@wordpress/is-shallow-equal';\n\n/**\n * Internal dependencies\n */\nimport {\n\tSTORE_KEY,\n\tPOST_UPDATE_TRANSACTION_ID,\n\tTRASH_POST_NOTICE_ID,\n} from './constants';\nimport {\n\tgetNotificationArgumentsForSaveSuccess,\n\tgetNotificationArgumentsForSaveFail,\n\tgetNotificationArgumentsForTrashFail,\n} from './utils/notice-builder';\nimport serializeBlocks from './utils/serialize-blocks';\nimport { awaitNextStateChange, getRegistry } from './controls';\nimport * as sources from './block-sources';\n\n/**\n * Map of Registry instance to WeakMap of dependencies by custom source.\n *\n * @type WeakMap<WPDataRegistry,WeakMap<WPBlockAttributeSource,Object>>\n */\nconst lastBlockSourceDependenciesByRegistry = new WeakMap;\n\n/**\n * Given a blocks array, returns a blocks array with sourced attribute values\n * applied. The reference will remain consistent with the original argument if\n * no attribute values must be overridden. If sourced values are applied, the\n * return value will be a modified copy of the original array.\n *\n * @param {WPBlock[]} blocks Original blocks array.\n *\n * @return {WPBlock[]} Blocks array with sourced values applied.\n */\nfunction* getBlocksWithSourcedAttributes( blocks ) {\n\tconst registry = yield getRegistry();\n\tif ( ! lastBlockSourceDependenciesByRegistry.has( registry ) ) {\n\t\treturn blocks;\n\t}\n\n\tconst blockSourceDependencies = lastBlockSourceDependenciesByRegistry.get( registry );\n\n\tlet workingBlocks = blocks;\n\tfor ( let i = 0; i < blocks.length; i++ ) {\n\t\tlet block = blocks[ i ];\n\t\tconst blockType = yield select( 'core/blocks', 'getBlockType', block.name );\n\n\t\tfor ( const [ attributeName, schema ] of Object.entries( blockType.attributes ) ) {\n\t\t\tif ( ! sources[ schema.source ] || ! sources[ schema.source ].apply ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( ! blockSourceDependencies.has( sources[ schema.source ] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst dependencies = blockSourceDependencies.get( sources[ schema.source ] );\n\t\t\tconst sourcedAttributeValue = sources[ schema.source ].apply( schema, dependencies );\n\n\t\t\t// It's only necessary to apply the value if it differs from the\n\t\t\t// block's locally-assigned value, to avoid needlessly resetting\n\t\t\t// the block editor.\n\t\t\tif ( sourcedAttributeValue === block.attributes[ attributeName ] ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Create a shallow clone to mutate, leaving the original intact.\n\t\t\tif ( workingBlocks === blocks ) {\n\t\t\t\tworkingBlocks = [ ...workingBlocks ];\n\t\t\t}\n\n\t\t\tblock = {\n\t\t\t\t...block,\n\t\t\t\tattributes: {\n\t\t\t\t\t...block.attributes,\n\t\t\t\t\t[ attributeName ]: sourcedAttributeValue,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tworkingBlocks.splice( i, 1, block );\n\t\t}\n\n\t\t// Recurse to apply source attributes to inner blocks.\n\t\tif ( block.innerBlocks.length ) {\n\t\t\tconst appliedInnerBlocks = yield* getBlocksWithSourcedAttributes( block.innerBlocks );\n\t\t\tif ( appliedInnerBlocks !== block.innerBlocks ) {\n\t\t\t\tif ( workingBlocks === blocks ) {\n\t\t\t\t\tworkingBlocks = [ ...workingBlocks ];\n\t\t\t\t}\n\n\t\t\t\tblock = {\n\t\t\t\t\t...block,\n\t\t\t\t\tinnerBlocks: appliedInnerBlocks,\n\t\t\t\t};\n\n\t\t\t\tworkingBlocks.splice( i, 1, block );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn workingBlocks;\n}\n\n/**\n * Refreshes the last block source dependencies, optionally for a given subset\n * of sources (defaults to the full set of sources).\n *\n * @param {?Array} sourcesToUpdate Optional subset of sources to reset.\n *\n * @yield {Object} Yielded actions or control descriptors.\n */\nfunction* resetLastBlockSourceDependencies( sourcesToUpdate = Object.values( sources ) ) {\n\tif ( ! sourcesToUpdate.length ) {\n\t\treturn;\n\t}\n\n\tconst registry = yield getRegistry();\n\tif ( ! lastBlockSourceDependenciesByRegistry.has( registry ) ) {\n\t\tlastBlockSourceDependenciesByRegistry.set( registry, new WeakMap );\n\t}\n\n\tconst lastBlockSourceDependencies = lastBlockSourceDependenciesByRegistry.get( registry );\n\n\tfor ( const source of sourcesToUpdate ) {\n\t\tconst dependencies = yield* source.getDependencies();\n\t\tlastBlockSourceDependencies.set( source, dependencies );\n\t}\n}\n\n/**\n * Returns an action generator used in signalling that editor has initialized with\n * the specified post object and editor settings.\n *\n * @param {Object} post      Post object.\n * @param {Object} edits     Initial edited attributes object.\n * @param {Array?} template  Block Template.\n */\nexport function* setupEditor( post, edits, template ) {\n\t// In order to ensure maximum of a single parse during setup, edits are\n\t// included as part of editor setup action. Assume edited content as\n\t// canonical if provided, falling back to post.\n\tlet content;\n\tif ( has( edits, [ 'content' ] ) ) {\n\t\tcontent = edits.content;\n\t} else {\n\t\tcontent = post.content.raw;\n\t}\n\n\tlet blocks = parse( content );\n\n\t// Apply a template for new posts only, if exists.\n\tconst isNewPost = post.status === 'auto-draft';\n\tif ( isNewPost && template ) {\n\t\tblocks = synchronizeBlocksWithTemplate( blocks, template );\n\t}\n\n\tyield resetPost( post );\n\tyield* resetLastBlockSourceDependencies();\n\tyield {\n\t\ttype: 'SETUP_EDITOR',\n\t\tpost,\n\t\tedits,\n\t\ttemplate,\n\t};\n\tyield resetEditorBlocks( blocks, { __unstableShouldCreateUndoLevel: false } );\n\tyield setupEditorState( post );\n\tif (\n\t\tedits &&\n\t\tObject.keys( edits ).some(\n\t\t\t( key ) =>\n\t\t\t\tedits[ key ] !== ( has( post, [ key, 'raw' ] ) ? post[ key ].raw : post[ key ] )\n\t\t)\n\t) {\n\t\tyield editPost( edits );\n\t}\n\tyield* __experimentalSubscribeSources();\n}\n\n/**\n * Returns an action object signalling that the editor is being destroyed and\n * that any necessary state or side-effect cleanup should occur.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalTearDownEditor() {\n\treturn { type: 'TEAR_DOWN_EDITOR' };\n}\n\n/**\n * Returns an action generator which loops to await the next state change,\n * calling to reset blocks when a block source dependencies change.\n *\n * @yield {Object} Action object.\n */\nexport function* __experimentalSubscribeSources() {\n\twhile ( true ) {\n\t\tyield awaitNextStateChange();\n\n\t\t// The bailout case: If the editor becomes unmounted, it will flag\n\t\t// itself as non-ready. Effectively unsubscribes from the registry.\n\t\tconst isStillReady = yield select( STORE_KEY, '__unstableIsEditorReady' );\n\t\tif ( ! isStillReady ) {\n\t\t\tbreak;\n\t\t}\n\n\t\tconst registry = yield getRegistry();\n\n\t\tlet reset = false;\n\t\tfor ( const source of Object.values( sources ) ) {\n\t\t\tif ( ! source.getDependencies ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst dependencies = yield* source.getDependencies();\n\n\t\t\tif ( ! lastBlockSourceDependenciesByRegistry.has( registry ) ) {\n\t\t\t\tlastBlockSourceDependenciesByRegistry.set( registry, new WeakMap );\n\t\t\t}\n\n\t\t\tconst lastBlockSourceDependencies = lastBlockSourceDependenciesByRegistry.get( registry );\n\t\t\tconst lastDependencies = lastBlockSourceDependencies.get( source );\n\n\t\t\tif ( ! isShallowEqual( dependencies, lastDependencies ) ) {\n\t\t\t\tlastBlockSourceDependencies.set( source, dependencies );\n\n\t\t\t\t// Allow the loop to continue in order to assign latest\n\t\t\t\t// dependencies values, but mark for reset.\n\t\t\t\treset = true;\n\t\t\t}\n\t\t}\n\n\t\tif ( reset ) {\n\t\t\tyield resetEditorBlocks( yield select( STORE_KEY, 'getEditorBlocks' ), { __unstableShouldCreateUndoLevel: false } );\n\t\t}\n\t}\n}\n\n/**\n * Returns an action object used in signalling that the latest version of the\n * post has been received, either by initialization or save.\n *\n * @param {Object} post Post object.\n *\n * @return {Object} Action object.\n */\nexport function resetPost( post ) {\n\treturn {\n\t\ttype: 'RESET_POST',\n\t\tpost,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the latest autosave of the\n * post has been received, by initialization or autosave.\n *\n * @deprecated since 5.6. Callers should use the `receiveAutosaves( postId, autosave )`\n * \t\t\t   selector from the '@wordpress/core-data' package.\n *\n * @param {Object} newAutosave Autosave post object.\n *\n * @return {Object} Action object.\n */\nexport function* resetAutosave( newAutosave ) {\n\tdeprecated( 'resetAutosave action (`core/editor` store)', {\n\t\talternative: 'receiveAutosaves action (`core` store)',\n\t\tplugin: 'Gutenberg',\n\t} );\n\n\tconst postId = yield select( STORE_KEY, 'getCurrentPostId' );\n\tyield dispatch( 'core', 'receiveAutosaves', postId, newAutosave );\n\n\treturn { type: '__INERT__' };\n}\n\n/**\n * Action for dispatching that a post update request has started.\n *\n * @param {Object} options\n *\n * @return {Object} An action object\n */\nexport function __experimentalRequestPostUpdateStart( options = {} ) {\n\treturn {\n\t\ttype: 'REQUEST_POST_UPDATE_START',\n\t\toptions,\n\t};\n}\n\n/**\n * Action for dispatching that a post update request has finished.\n *\n * @param {Object} options\n *\n * @return {Object} An action object\n */\nexport function __experimentalRequestPostUpdateFinish( options = {} ) {\n\treturn {\n\t\ttype: 'REQUEST_POST_UPDATE_FINISH',\n\t\toptions,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a patch of updates for the\n * latest version of the post have been received.\n *\n * @param {Object} edits Updated post fields.\n *\n * @return {Object} Action object.\n */\nexport function updatePost( edits ) {\n\treturn {\n\t\ttype: 'UPDATE_POST',\n\t\tedits,\n\t};\n}\n\n/**\n * Returns an action object used to setup the editor state when first opening\n * an editor.\n *\n * @param {Object} post   Post object.\n *\n * @return {Object} Action object.\n */\nexport function setupEditorState( post ) {\n\treturn {\n\t\ttype: 'SETUP_EDITOR_STATE',\n\t\tpost,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that attributes of the post have\n * been edited.\n *\n * @param {Object} edits   Post attributes to edit.\n * @param {Object} options Options for the edit.\n *\n * @yield {Object} Action object or control.\n */\nexport function* editPost( edits, options ) {\n\tconst { id, type } = yield select( STORE_KEY, 'getCurrentPost' );\n\tyield dispatch(\n\t\t'core',\n\t\t'editEntityRecord',\n\t\t'postType',\n\t\ttype,\n\t\tid,\n\t\tedits,\n\t\toptions\n\t);\n}\n\n/**\n * Returns action object produced by the updatePost creator augmented by\n * an optimist option that signals optimistically applying updates.\n *\n * @param {Object} edits  Updated post fields.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalOptimisticUpdatePost( edits ) {\n\treturn {\n\t\t...updatePost( edits ),\n\t\toptimist: { id: POST_UPDATE_TRANSACTION_ID },\n\t};\n}\n\n/**\n * Action generator for saving the current post in the editor.\n *\n * @param {Object} options\n */\nexport function* savePost( options = {} ) {\n\tif ( ! ( yield select( STORE_KEY, 'isEditedPostSaveable' ) ) ) {\n\t\treturn;\n\t}\n\tlet edits = {\n\t\tcontent: yield select( STORE_KEY, 'getEditedPostContent' ),\n\t};\n\tif ( ! options.isAutosave ) {\n\t\tyield dispatch( STORE_KEY, 'editPost', edits, { undoIgnore: true } );\n\t}\n\n\tyield __experimentalRequestPostUpdateStart( options );\n\tconst previousRecord = yield select( STORE_KEY, 'getCurrentPost' );\n\tedits = {\n\t\tid: previousRecord.id,\n\t\t...( yield select(\n\t\t\t'core',\n\t\t\t'getEntityRecordNonTransientEdits',\n\t\t\t'postType',\n\t\t\tpreviousRecord.type,\n\t\t\tpreviousRecord.id\n\t\t) ),\n\t\t...edits,\n\t};\n\tyield dispatch(\n\t\t'core',\n\t\t'saveEntityRecord',\n\t\t'postType',\n\t\tpreviousRecord.type,\n\t\tedits,\n\t\toptions\n\t);\n\tyield __experimentalRequestPostUpdateFinish( options );\n\n\tconst error = yield select(\n\t\t'core',\n\t\t'getLastEntitySaveError',\n\t\t'postType',\n\t\tpreviousRecord.type,\n\t\tpreviousRecord.id\n\t);\n\tif ( error ) {\n\t\tconst args = getNotificationArgumentsForSaveFail( {\n\t\t\tpost: previousRecord,\n\t\t\tedits,\n\t\t\terror,\n\t\t} );\n\t\tif ( args.length ) {\n\t\t\tyield dispatch( 'core/notices', 'createErrorNotice', ...args );\n\t\t}\n\t} else {\n\t\tconst updatedRecord = yield select( STORE_KEY, 'getCurrentPost' );\n\t\tconst args = getNotificationArgumentsForSaveSuccess( {\n\t\t\tpreviousPost: previousRecord,\n\t\t\tpost: updatedRecord,\n\t\t\tpostType: yield select( 'core', 'getPostType', updatedRecord.type ),\n\t\t\toptions,\n\t\t} );\n\t\tif ( args.length ) {\n\t\t\tyield dispatch( 'core/notices', 'createSuccessNotice', ...args );\n\t\t}\n\t\t// Make sure that any edits after saving create an undo level and are\n\t\t// considered for change detection.\n\t\tif ( ! options.isAutosave ) {\n\t\t\tyield dispatch( 'core/block-editor', '__unstableMarkLastChangeAsPersistent' );\n\t\t}\n\t}\n}\n\n/**\n * Action generator for handling refreshing the current post.\n */\nexport function* refreshPost() {\n\tconst post = yield select(\n\t\tSTORE_KEY,\n\t\t'getCurrentPost'\n\t);\n\tconst postTypeSlug = yield select(\n\t\tSTORE_KEY,\n\t\t'getCurrentPostType'\n\t);\n\tconst postType = yield select(\n\t\t'core',\n\t\t'getPostType',\n\t\tpostTypeSlug\n\t);\n\tconst newPost = yield apiFetch(\n\t\t{\n\t\t\t// Timestamp arg allows caller to bypass browser caching, which is\n\t\t\t// expected for this specific function.\n\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ post.id }` +\n\t\t\t\t`?context=edit&_timestamp=${ Date.now() }`,\n\t\t}\n\t);\n\tyield dispatch(\n\t\tSTORE_KEY,\n\t\t'resetPost',\n\t\tnewPost\n\t);\n}\n\n/**\n * Action generator for trashing the current post in the editor.\n */\nexport function* trashPost() {\n\tconst postTypeSlug = yield select(\n\t\tSTORE_KEY,\n\t\t'getCurrentPostType'\n\t);\n\tconst postType = yield select(\n\t\t'core',\n\t\t'getPostType',\n\t\tpostTypeSlug\n\t);\n\tyield dispatch(\n\t\t'core/notices',\n\t\t'removeNotice',\n\t\tTRASH_POST_NOTICE_ID\n\t);\n\ttry {\n\t\tconst post = yield select(\n\t\t\tSTORE_KEY,\n\t\t\t'getCurrentPost'\n\t\t);\n\t\tyield apiFetch(\n\t\t\t{\n\t\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ post.id }`,\n\t\t\t\tmethod: 'DELETE',\n\t\t\t}\n\t\t);\n\n\t\tyield dispatch(\n\t\t\tSTORE_KEY,\n\t\t\t'savePost'\n\t\t);\n\t} catch ( error ) {\n\t\tyield dispatch(\n\t\t\t'core/notices',\n\t\t\t'createErrorNotice',\n\t\t\t...getNotificationArgumentsForTrashFail( { error } ),\n\t\t);\n\t}\n}\n\n/**\n * Action generator used in signalling that the post should autosave.\n *\n * @param {Object?} options Extra flags to identify the autosave.\n */\nexport function* autosave( options ) {\n\tyield dispatch(\n\t\tSTORE_KEY,\n\t\t'savePost',\n\t\t{ isAutosave: true, ...options }\n\t);\n}\n\nexport function* __experimentalLocalAutosave() {\n\tconst post = yield select( STORE_KEY, 'getCurrentPost' );\n\tconst title = yield select( STORE_KEY, 'getEditedPostAttribute', 'title' );\n\tconst content = yield select( STORE_KEY, 'getEditedPostAttribute', 'content' );\n\tconst excerpt = yield select( STORE_KEY, 'getEditedPostAttribute', 'excerpt' );\n\tyield {\n\t\ttype: 'LOCAL_AUTOSAVE_SET',\n\t\tpostId: post.id,\n\t\ttitle,\n\t\tcontent,\n\t\texcerpt,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that undo history should\n * restore last popped state.\n *\n * @yield {Object} Action object.\n */\nexport function* redo() {\n\tyield dispatch( 'core', 'redo' );\n}\n\n/**\n * Returns an action object used in signalling that undo history should pop.\n *\n * @yield {Object} Action object.\n */\nexport function* undo() {\n\tyield dispatch( 'core', 'undo' );\n}\n\n/**\n * Returns an action object used in signalling that undo history record should\n * be created.\n *\n * @return {Object} Action object.\n */\nexport function createUndoLevel() {\n\treturn { type: 'CREATE_UNDO_LEVEL' };\n}\n\n/**\n * Returns an action object used to lock the editor.\n *\n * @param {Object}  lock Details about the post lock status, user, and nonce.\n *\n * @return {Object} Action object.\n */\nexport function updatePostLock( lock ) {\n\treturn {\n\t\ttype: 'UPDATE_POST_LOCK',\n\t\tlock,\n\t};\n}\n\n/**\n * Returns an action object used to fetch a single reusable block or all\n * reusable blocks from the REST API into the store.\n *\n * @param {?string} id If given, only a single reusable block with this ID will\n *                     be fetched.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalFetchReusableBlocks( id ) {\n\treturn {\n\t\ttype: 'FETCH_REUSABLE_BLOCKS',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that reusable blocks have been\n * received. `results` is an array of objects containing:\n *  - `reusableBlock` - Details about how the reusable block is persisted.\n *  - `parsedBlock` - The original block.\n *\n * @param {Object[]} results Reusable blocks received.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalReceiveReusableBlocks( results ) {\n\treturn {\n\t\ttype: 'RECEIVE_REUSABLE_BLOCKS',\n\t\tresults,\n\t};\n}\n\n/**\n * Returns an action object used to save a reusable block that's in the store to\n * the REST API.\n *\n * @param {Object} id The ID of the reusable block to save.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalSaveReusableBlock( id ) {\n\treturn {\n\t\ttype: 'SAVE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used to delete a reusable block via the REST API.\n *\n * @param {number} id The ID of the reusable block to delete.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalDeleteReusableBlock( id ) {\n\treturn {\n\t\ttype: 'DELETE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a reusable block is\n * to be updated.\n *\n * @param {number} id      The ID of the reusable block to update.\n * @param {Object} changes The changes to apply.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalUpdateReusableBlock( id, changes ) {\n\treturn {\n\t\ttype: 'UPDATE_REUSABLE_BLOCK',\n\t\tid,\n\t\tchanges,\n\t};\n}\n\n/**\n * Returns an action object used to convert a reusable block into a static\n * block.\n *\n * @param {string} clientId The client ID of the block to attach.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalConvertBlockToStatic( clientId ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_STATIC',\n\t\tclientId,\n\t};\n}\n\n/**\n * Returns an action object used to convert a static block into a reusable\n * block.\n *\n * @param {string} clientIds The client IDs of the block to detach.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalConvertBlockToReusable( clientIds ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_REUSABLE',\n\t\tclientIds: castArray( clientIds ),\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has enabled the\n * publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function enablePublishSidebar() {\n\treturn {\n\t\ttype: 'ENABLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has disabled the\n * publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function disablePublishSidebar() {\n\treturn {\n\t\ttype: 'DISABLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used to signal that post saving is locked.\n *\n * @param  {string} lockName The lock name.\n *\n * @example\n * ```\n * const { subscribe } = wp.data;\n *\n * const initialPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n *\n * // Only allow publishing posts that are set to a future date.\n * if ( 'publish' !== initialPostStatus ) {\n *\n * \t// Track locking.\n * \tlet locked = false;\n *\n * \t// Watch for the publish event.\n * \tlet unssubscribe = subscribe( () => {\n * \t\tconst currentPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n * \t\tif ( 'publish' !== currentPostStatus ) {\n *\n * \t\t\t// Compare the post date to the current date, lock the post if the date isn't in the future.\n * \t\t\tconst postDate = new Date( wp.data.select( 'core/editor' ).getEditedPostAttribute( 'date' ) );\n * \t\t\tconst currentDate = new Date();\n * \t\t\tif ( postDate.getTime() <= currentDate.getTime() ) {\n * \t\t\t\tif ( ! locked ) {\n * \t\t\t\t\tlocked = true;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).lockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t} else {\n * \t\t\t\tif ( locked ) {\n * \t\t\t\t\tlocked = false;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).unlockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t}\n * \t\t}\n * \t} );\n * }\n * ```\n *\n * @return {Object} Action object\n */\nexport function lockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that post saving is unlocked.\n *\n * @param  {string} lockName The lock name.\n *\n * @example\n * ```\n * // Unlock post saving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).unlockPostSaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function unlockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that the blocks have been updated.\n *\n * @param {Array}   blocks  Block Array.\n * @param {?Object} options Optional options.\n *\n * @yield {Object} Action object\n */\nexport function* resetEditorBlocks( blocks, options = {} ) {\n\tconst lastBlockAttributesChange = yield select( 'core/block-editor', '__experimentalGetLastBlockAttributeChanges' );\n\n\t// Sync to sources from block attributes updates.\n\tif ( lastBlockAttributesChange ) {\n\t\tconst updatedSources = new Set;\n\t\tconst updatedBlockTypes = new Set;\n\t\tfor ( const [ clientId, attributes ] of Object.entries( lastBlockAttributesChange ) ) {\n\t\t\tconst blockName = yield select( 'core/block-editor', 'getBlockName', clientId );\n\t\t\tif ( updatedBlockTypes.has( blockName ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tupdatedBlockTypes.add( blockName );\n\t\t\tconst blockType = yield select( 'core/blocks', 'getBlockType', blockName );\n\n\t\t\tfor ( const [ attributeName, newAttributeValue ] of Object.entries( attributes ) ) {\n\t\t\t\tif ( ! blockType.attributes.hasOwnProperty( attributeName ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst schema = blockType.attributes[ attributeName ];\n\t\t\t\tconst source = sources[ schema.source ];\n\n\t\t\t\tif ( source && source.update ) {\n\t\t\t\t\tyield* source.update( schema, newAttributeValue );\n\t\t\t\t\tupdatedSources.add( source );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Dependencies are reset so that source dependencies subscription\n\t\t// skips a reset which would otherwise occur by dependencies change.\n\t\t// This assures that at most one reset occurs per block change.\n\t\tyield* resetLastBlockSourceDependencies( Array.from( updatedSources ) );\n\t}\n\n\tconst edits = { blocks: yield* getBlocksWithSourcedAttributes( blocks ) };\n\n\tif ( options.__unstableShouldCreateUndoLevel !== false ) {\n\t\tconst { id, type } = yield select( STORE_KEY, 'getCurrentPost' );\n\t\tconst noChange =\n\t\t\t( yield select( 'core', 'getEditedEntityRecord', 'postType', type, id ) )\n\t\t\t\t.blocks === edits.blocks;\n\t\tif ( noChange ) {\n\t\t\treturn yield dispatch(\n\t\t\t\t'core',\n\t\t\t\t'__unstableCreateUndoLevel',\n\t\t\t\t'postType',\n\t\t\t\ttype,\n\t\t\t\tid\n\t\t\t);\n\t\t}\n\n\t\t// We create a new function here on every persistent edit\n\t\t// to make sure the edit makes the post dirty and creates\n\t\t// a new undo level.\n\t\tedits.content = ( { blocks: blocksForSerialization = [] } ) =>\n\t\t\tserializeBlocks( blocksForSerialization );\n\t}\n\n\tyield* editPost( edits );\n}\n\n/*\n * Returns an action object used in signalling that the post editor settings have been updated.\n *\n * @param {Object} settings Updated settings\n *\n * @return {Object} Action object\n */\nexport function updateEditorSettings( settings ) {\n\treturn {\n\t\ttype: 'UPDATE_EDITOR_SETTINGS',\n\t\tsettings,\n\t};\n}\n\n/**\n * Backward compatibility\n */\n\nconst getBlockEditorAction = ( name ) => function* ( ...args ) {\n\tdeprecated( '`wp.data.dispatch( \\'core/editor\\' ).' + name + '`', {\n\t\talternative: '`wp.data.dispatch( \\'core/block-editor\\' ).' + name + '`',\n\t} );\n\tyield dispatch( 'core/block-editor', name, ...args );\n};\n\n/**\n * @see resetBlocks in core/block-editor store.\n */\nexport const resetBlocks = getBlockEditorAction( 'resetBlocks' );\n\n/**\n * @see receiveBlocks in core/block-editor store.\n */\nexport const receiveBlocks = getBlockEditorAction( 'receiveBlocks' );\n\n/**\n * @see updateBlock in core/block-editor store.\n */\nexport const updateBlock = getBlockEditorAction( 'updateBlock' );\n\n/**\n * @see updateBlockAttributes in core/block-editor store.\n */\nexport const updateBlockAttributes = getBlockEditorAction( 'updateBlockAttributes' );\n\n/**\n * @see selectBlock in core/block-editor store.\n */\nexport const selectBlock = getBlockEditorAction( 'selectBlock' );\n\n/**\n * @see startMultiSelect in core/block-editor store.\n */\nexport const startMultiSelect = getBlockEditorAction( 'startMultiSelect' );\n\n/**\n * @see stopMultiSelect in core/block-editor store.\n */\nexport const stopMultiSelect = getBlockEditorAction( 'stopMultiSelect' );\n\n/**\n * @see multiSelect in core/block-editor store.\n */\nexport const multiSelect = getBlockEditorAction( 'multiSelect' );\n\n/**\n * @see clearSelectedBlock in core/block-editor store.\n */\nexport const clearSelectedBlock = getBlockEditorAction( 'clearSelectedBlock' );\n\n/**\n * @see toggleSelection in core/block-editor store.\n */\nexport const toggleSelection = getBlockEditorAction( 'toggleSelection' );\n\n/**\n * @see replaceBlocks in core/block-editor store.\n */\nexport const replaceBlocks = getBlockEditorAction( 'replaceBlocks' );\n\n/**\n * @see replaceBlock in core/block-editor store.\n */\nexport const replaceBlock = getBlockEditorAction( 'replaceBlock' );\n\n/**\n * @see moveBlocksDown in core/block-editor store.\n */\nexport const moveBlocksDown = getBlockEditorAction( 'moveBlocksDown' );\n\n/**\n * @see moveBlocksUp in core/block-editor store.\n */\nexport const moveBlocksUp = getBlockEditorAction( 'moveBlocksUp' );\n\n/**\n * @see moveBlockToPosition in core/block-editor store.\n */\nexport const moveBlockToPosition = getBlockEditorAction( 'moveBlockToPosition' );\n\n/**\n * @see insertBlock in core/block-editor store.\n */\nexport const insertBlock = getBlockEditorAction( 'insertBlock' );\n\n/**\n * @see insertBlocks in core/block-editor store.\n */\nexport const insertBlocks = getBlockEditorAction( 'insertBlocks' );\n\n/**\n * @see showInsertionPoint in core/block-editor store.\n */\nexport const showInsertionPoint = getBlockEditorAction( 'showInsertionPoint' );\n\n/**\n * @see hideInsertionPoint in core/block-editor store.\n */\nexport const hideInsertionPoint = getBlockEditorAction( 'hideInsertionPoint' );\n\n/**\n * @see setTemplateValidity in core/block-editor store.\n */\nexport const setTemplateValidity = getBlockEditorAction( 'setTemplateValidity' );\n\n/**\n * @see synchronizeTemplate in core/block-editor store.\n */\nexport const synchronizeTemplate = getBlockEditorAction( 'synchronizeTemplate' );\n\n/**\n * @see mergeBlocks in core/block-editor store.\n */\nexport const mergeBlocks = getBlockEditorAction( 'mergeBlocks' );\n\n/**\n * @see removeBlocks in core/block-editor store.\n */\nexport const removeBlocks = getBlockEditorAction( 'removeBlocks' );\n\n/**\n * @see removeBlock in core/block-editor store.\n */\nexport const removeBlock = getBlockEditorAction( 'removeBlock' );\n\n/**\n * @see toggleBlockMode in core/block-editor store.\n */\nexport const toggleBlockMode = getBlockEditorAction( 'toggleBlockMode' );\n\n/**\n * @see startTyping in core/block-editor store.\n */\nexport const startTyping = getBlockEditorAction( 'startTyping' );\n\n/**\n * @see stopTyping in core/block-editor store.\n */\nexport const stopTyping = getBlockEditorAction( 'stopTyping' );\n\n/**\n * @see enterFormattedText in core/block-editor store.\n */\nexport const enterFormattedText = getBlockEditorAction( 'enterFormattedText' );\n\n/**\n * @see exitFormattedText in core/block-editor store.\n */\nexport const exitFormattedText = getBlockEditorAction( 'exitFormattedText' );\n\n/**\n * @see insertDefaultBlock in core/block-editor store.\n */\nexport const insertDefaultBlock = getBlockEditorAction( 'insertDefaultBlock' );\n\n/**\n * @see updateBlockListSettings in core/block-editor store.\n */\nexport const updateBlockListSettings = getBlockEditorAction( 'updateBlockListSettings' );\n"]}