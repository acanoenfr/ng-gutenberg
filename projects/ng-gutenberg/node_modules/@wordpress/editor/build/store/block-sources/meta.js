"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDependencies = getDependencies;
exports.apply = apply;
exports.update = update;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _dataControls = require("@wordpress/data-controls");

var _actions = require("../actions");

var _marked =
/*#__PURE__*/
_regenerator.default.mark(getDependencies),
    _marked2 =
/*#__PURE__*/
_regenerator.default.mark(update);

/**
 * Store control invoked upon a state change, responsible for returning an
 * object of dependencies. When a change in dependencies occurs (by shallow
 * equality of the returned object), blocks are reset to apply the new sourced
 * value.
 *
 * @yield {Object} Optional yielded controls.
 *
 * @return {Object} Dependencies as object.
 */
function getDependencies() {
  return _regenerator.default.wrap(function getDependencies$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _dataControls.select)('core/editor', 'getEditedPostAttribute', 'meta');

        case 2:
          _context.t0 = _context.sent;
          return _context.abrupt("return", {
            meta: _context.t0
          });

        case 4:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}
/**
 * Given an attribute schema and dependencies data, returns a source value.
 *
 * @param {Object} schema            Block type attribute schema.
 * @param {Object} dependencies      Source dependencies.
 * @param {Object} dependencies.meta Post meta.
 *
 * @return {Object} Block attribute value.
 */


function apply(schema, _ref) {
  var meta = _ref.meta;
  return meta[schema.meta];
}
/**
 * Store control invoked upon a block attributes update, responsible for
 * reflecting an update in a meta value.
 *
 * @param {Object} schema Block type attribute schema.
 * @param {*}      value  Updated block attribute value.
 *
 * @yield {Object} Yielded action objects or store controls.
 */


function update(schema, value) {
  return _regenerator.default.wrap(function update$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return (0, _actions.editPost)({
            meta: (0, _defineProperty2.default)({}, schema.meta, value)
          });

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=meta.js.map