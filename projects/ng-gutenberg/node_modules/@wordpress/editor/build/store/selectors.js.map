{"version":3,"sources":["@wordpress/editor/src/store/selectors.js"],"names":["EMPTY_OBJECT","EMPTY_ARRAY","hasEditorUndo","select","hasUndo","hasEditorRedo","hasRedo","isEditedPostNew","state","getCurrentPost","status","hasChangedContent","edits","getPostEdits","isEditedPostDirty","postType","getCurrentPostType","postId","getCurrentPostId","hasEditsForEntityRecord","isCleanNewPost","post","getRawEntityRecord","getCurrentPostRevisionsCount","getCurrentPostLastRevisionId","getEntityRecordEdits","getCurrentPostAttribute","attributeName","hasOwnProperty","getNestedEditedPostProperty","getEditedPostAttribute","getEditedPostContent","EDIT_MERGE_PROPERTIES","has","getAutosaveAttribute","AUTOSAVE_PROPERTIES","currentUserId","getCurrentUser","autosave","getAutosave","getEditedPostVisibility","password","isCurrentPostPending","isCurrentPostPublished","currentPost","indexOf","Date","Number","date","ONE_MINUTE_IN_MS","isCurrentPostScheduled","isEditedPostPublishable","isEditedPostSaveable","isSavingPost","isEditedPostEmpty","blocks","getEditorBlocks","length","blockName","name","isEditedPostAutosaveable","isPostAutosavingLocked","hasFetchedAutosave","hasFetchedAutosaves","some","field","alternative","plugin","getPostRawValue","hasAutosave","isEditedPostBeingScheduled","checkedDate","isEditedPostDateFloating","modified","isSavingEntityRecord","didPostSaveRequestSucceed","getLastEntitySaveError","didPostSaveRequestFail","isAutosavingPost","saving","isPreviewingPost","options","isPreview","getEditedPostPreviewLink","pending","previewLink","preview","featuredImageId","_thumbnail_id","getSuggestedPostFormat","getBlocksForSerialization","hint","editor","present","value","isSingleUnmodifiedDefaultBlock","record","getEditedEntityRecord","content","__experimentalGetReusableBlock","ref","block","reusableBlocks","data","isTemporary","isNaN","parseInt","id","__experimentalIsSavingReusableBlock","isSaving","__experimentalIsFetchingReusableBlock","isFetching","__experimentalGetReusableBlocks","getStateBeforeOptimisticTransaction","transactionId","transaction","optimist","entry","beforeState","action","isPublishingPost","stateBeforeRequest","POST_UPDATE_TRANSACTION_ID","isPermalinkEditable","permalinkTemplate","PERMALINK_POSTNAME_REGEX","test","getPermalink","permalinkParts","getPermalinkParts","prefix","postName","suffix","split","inSomeHistory","predicate","isPostLocked","postLock","isLocked","isPostSavingLocked","Object","keys","postSavingLock","postAutosavingLock","isPostLockTakeover","isTakeover","getPostLockUser","user","getActivePostLock","activePostLock","canUserUseUnfilteredHTML","isPublishSidebarEnabled","preferences","PREFERENCES_DEFAULTS","__unstableIsEditorReady","isReady","getEditorSettings","editorSettings","getBlockEditorSelector","args","getBlockName","isBlockValid","getBlockAttributes","getBlock","getBlocks","__unstableGetBlockWithoutInnerBlocks","getClientIdsOfDescendants","getClientIdsWithDescendants","getGlobalBlockCount","getBlocksByClientId","getBlockCount","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","getBlockHierarchyRootClientId","getAdjacentBlockClientId","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","getMultiSelectedBlockClientIds","getMultiSelectedBlocks","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","getBlockOrder","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","isTyping","isCaretWithinFormattedText","getBlockInsertionPoint","isBlockInsertionPointVisible","isValidTemplate","getTemplate","getTemplateLock","canInsertBlockType","getInserterItems","hasInserterItems","getBlockListSettings"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tfind,\n\tget,\n\thas,\n\tmap,\n\tpick,\n\tmapValues,\n\tincludes,\n} from 'lodash';\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetFreeformContentHandlerName,\n\tgetDefaultBlockName,\n\tisUnmodifiedDefaultBlock,\n} from '@wordpress/blocks';\nimport { isInTheFuture, getDate } from '@wordpress/date';\nimport { addQueryArgs } from '@wordpress/url';\nimport { createRegistrySelector } from '@wordpress/data';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { PREFERENCES_DEFAULTS } from './defaults';\nimport {\n\tEDIT_MERGE_PROPERTIES,\n\tPOST_UPDATE_TRANSACTION_ID,\n\tPERMALINK_POSTNAME_REGEX,\n\tONE_MINUTE_IN_MS,\n\tAUTOSAVE_PROPERTIES,\n} from './constants';\nimport { getPostRawValue } from './reducer';\nimport serializeBlocks from './utils/serialize-blocks';\n\n/**\n * Shared reference to an empty object for cases where it is important to avoid\n * returning a new object reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_OBJECT = {};\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Returns true if any past editor history snapshots exist, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether undo history exists.\n */\nexport const hasEditorUndo = createRegistrySelector( ( select ) => () => {\n\treturn select( 'core' ).hasUndo();\n} );\n\n/**\n * Returns true if any future editor history snapshots exist, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether redo history exists.\n */\nexport const hasEditorRedo = createRegistrySelector( ( select ) => () => {\n\treturn select( 'core' ).hasRedo();\n} );\n\n/**\n * Returns true if the currently edited post is yet to be saved, or false if\n * the post has been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is new.\n */\nexport function isEditedPostNew( state ) {\n\treturn getCurrentPost( state ).status === 'auto-draft';\n}\n\n/**\n * Returns true if content includes unsaved changes, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether content includes unsaved changes.\n */\nexport function hasChangedContent( state ) {\n\tconst edits = getPostEdits( state );\n\n\treturn (\n\t\t'blocks' in edits ||\n\n\t\t// `edits` is intended to contain only values which are different from\n\t\t// the saved post, so the mere presence of a property is an indicator\n\t\t// that the value is different than what is known to be saved. While\n\t\t// content in Visual mode is represented by the blocks state, in Text\n\t\t// mode it is tracked by `edits.content`.\n\t\t'content' in edits\n\t);\n}\n\n/**\n * Returns true if there are unsaved values for the current edit session, or\n * false if the editing state matches the saved or new post.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether unsaved values exist.\n */\nexport const isEditedPostDirty = createRegistrySelector( ( select ) => ( state ) => {\n\t// Edits should contain only fields which differ from the saved post (reset\n\t// at initial load and save complete). Thus, a non-empty edits state can be\n\t// inferred to contain unsaved values.\n\tconst postType = getCurrentPostType( state );\n\tconst postId = getCurrentPostId( state );\n\tif ( select( 'core' ).hasEditsForEntityRecord( 'postType', postType, postId ) ) {\n\t\treturn true;\n\t}\n\treturn false;\n} );\n\n/**\n * Returns true if there are no unsaved values for the current edit session and\n * if the currently edited post is new (has never been saved before).\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether new post and unsaved values exist.\n */\nexport function isCleanNewPost( state ) {\n\treturn ! isEditedPostDirty( state ) && isEditedPostNew( state );\n}\n\n/**\n * Returns the post currently being edited in its last known saved state, not\n * including unsaved edits. Returns an object containing relevant default post\n * values if the post has not yet been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Post object.\n */\nexport const getCurrentPost = createRegistrySelector( ( select ) => ( state ) => {\n\tconst postId = getCurrentPostId( state );\n\tconst postType = getCurrentPostType( state );\n\n\tconst post = select( 'core' ).getRawEntityRecord( 'postType', postType, postId );\n\tif ( post ) {\n\t\treturn post;\n\t}\n\n\t// This exists for compatibility with the previous selector behavior\n\t// which would guarantee an object return based on the editor reducer's\n\t// default empty object state.\n\treturn EMPTY_OBJECT;\n} );\n\n/**\n * Returns the post type of the post currently being edited.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Post type.\n */\nexport function getCurrentPostType( state ) {\n\treturn state.postType;\n}\n\n/**\n * Returns the ID of the post currently being edited, or null if the post has\n * not yet been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {?number} ID of current post.\n */\nexport function getCurrentPostId( state ) {\n\treturn state.postId;\n}\n\n/**\n * Returns the number of revisions of the post currently being edited.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of revisions.\n */\nexport function getCurrentPostRevisionsCount( state ) {\n\treturn get( getCurrentPost( state ), [ '_links', 'version-history', 0, 'count' ], 0 );\n}\n\n/**\n * Returns the last revision ID of the post currently being edited,\n * or null if the post has no revisions.\n *\n * @param {Object} state Global application state.\n *\n * @return {?number} ID of the last revision.\n */\nexport function getCurrentPostLastRevisionId( state ) {\n\treturn get( getCurrentPost( state ), [ '_links', 'predecessor-version', 0, 'id' ], null );\n}\n\n/**\n * Returns any post values which have been changed in the editor but not yet\n * been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Object of key value pairs comprising unsaved edits.\n */\nexport const getPostEdits = createRegistrySelector( ( select ) => ( state ) => {\n\tconst postType = getCurrentPostType( state );\n\tconst postId = getCurrentPostId( state );\n\treturn select( 'core' ).getEntityRecordEdits( 'postType', postType, postId ) || EMPTY_OBJECT;\n} );\n\n/**\n * Returns an attribute value of the saved post.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @return {*} Post attribute value.\n */\nexport function getCurrentPostAttribute( state, attributeName ) {\n\tswitch ( attributeName ) {\n\t\tcase 'type':\n\t\t\treturn getCurrentPostType( state );\n\n\t\tcase 'id':\n\t\t\treturn getCurrentPostId( state );\n\n\t\tdefault:\n\t\t\tconst post = getCurrentPost( state );\n\t\t\tif ( ! post.hasOwnProperty( attributeName ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn getPostRawValue( post[ attributeName ] );\n\t}\n}\n\n/**\n * Returns a single attribute of the post being edited, preferring the unsaved\n * edit if one exists, but merging with the attribute value for the last known\n * saved state of the post (this is needed for some nested attributes like meta).\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @return {*} Post attribute value.\n */\nconst getNestedEditedPostProperty = ( state, attributeName ) => {\n\tconst edits = getPostEdits( state );\n\tif ( ! edits.hasOwnProperty( attributeName ) ) {\n\t\treturn getCurrentPostAttribute( state, attributeName );\n\t}\n\n\treturn {\n\t\t...getCurrentPostAttribute( state, attributeName ),\n\t\t...edits[ attributeName ],\n\t};\n};\n\n/**\n * Returns a single attribute of the post being edited, preferring the unsaved\n * edit if one exists, but falling back to the attribute for the last known\n * saved state of the post.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @return {*} Post attribute value.\n */\nexport function getEditedPostAttribute( state, attributeName ) {\n\t// Special cases\n\tswitch ( attributeName ) {\n\t\tcase 'content':\n\t\t\treturn getEditedPostContent( state );\n\t}\n\n\t// Fall back to saved post value if not edited.\n\tconst edits = getPostEdits( state );\n\tif ( ! edits.hasOwnProperty( attributeName ) ) {\n\t\treturn getCurrentPostAttribute( state, attributeName );\n\t}\n\n\t// Merge properties are objects which contain only the patch edit in state,\n\t// and thus must be merged with the current post attribute.\n\tif ( EDIT_MERGE_PROPERTIES.has( attributeName ) ) {\n\t\treturn getNestedEditedPostProperty( state, attributeName );\n\t}\n\n\treturn edits[ attributeName ];\n}\n\n/**\n * Returns an attribute value of the current autosave revision for a post, or\n * null if there is no autosave for the post.\n *\n * @deprecated since 5.6. Callers should use the `getAutosave( postType, postId, userId )` selector\n * \t\t\t   from the '@wordpress/core-data' package and access properties on the returned\n * \t\t\t   autosave object using getPostRawValue.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Autosave attribute name.\n *\n * @return {*} Autosave attribute value.\n */\nexport const getAutosaveAttribute = createRegistrySelector( ( select ) => ( state, attributeName ) => {\n\tif ( ! includes( AUTOSAVE_PROPERTIES, attributeName ) && attributeName !== 'preview_link' ) {\n\t\treturn;\n\t}\n\n\tconst postType = getCurrentPostType( state );\n\tconst postId = getCurrentPostId( state );\n\tconst currentUserId = get( select( 'core' ).getCurrentUser(), [ 'id' ] );\n\tconst autosave = select( 'core' ).getAutosave( postType, postId, currentUserId );\n\n\tif ( autosave ) {\n\t\treturn getPostRawValue( autosave[ attributeName ] );\n\t}\n} );\n\n/**\n * Returns the current visibility of the post being edited, preferring the\n * unsaved value if different than the saved post. The return value is one of\n * \"private\", \"password\", or \"public\".\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Post visibility.\n */\nexport function getEditedPostVisibility( state ) {\n\tconst status = getEditedPostAttribute( state, 'status' );\n\tif ( status === 'private' ) {\n\t\treturn 'private';\n\t}\n\n\tconst password = getEditedPostAttribute( state, 'password' );\n\tif ( password ) {\n\t\treturn 'password';\n\t}\n\n\treturn 'public';\n}\n\n/**\n * Returns true if post is pending review.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether current post is pending review.\n */\nexport function isCurrentPostPending( state ) {\n\treturn getCurrentPost( state ).status === 'pending';\n}\n\n/**\n * Return true if the current post has already been published.\n *\n * @param {Object}  state       Global application state.\n * @param {Object?} currentPost Explicit current post for bypassing registry selector.\n *\n * @return {boolean} Whether the post has been published.\n */\nexport function isCurrentPostPublished( state, currentPost ) {\n\tconst post = currentPost || getCurrentPost( state );\n\n\treturn (\n\t\t[ 'publish', 'private' ].indexOf( post.status ) !== -1 ||\n\t\t( post.status === 'future' &&\n\t\t\t! isInTheFuture( new Date( Number( getDate( post.date ) ) - ONE_MINUTE_IN_MS ) ) )\n\t);\n}\n\n/**\n * Returns true if post is already scheduled.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether current post is scheduled to be posted.\n */\nexport function isCurrentPostScheduled( state ) {\n\treturn getCurrentPost( state ).status === 'future' && ! isCurrentPostPublished( state );\n}\n\n/**\n * Return true if the post being edited can be published.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post can been published.\n */\nexport function isEditedPostPublishable( state ) {\n\tconst post = getCurrentPost( state );\n\n\t// TODO: Post being publishable should be superset of condition of post\n\t// being saveable. Currently this restriction is imposed at UI.\n\t//\n\t//  See: <PostPublishButton /> (`isButtonEnabled` assigned by `isSaveable`)\n\n\treturn isEditedPostDirty( state ) || [ 'publish', 'private', 'future' ].indexOf( post.status ) === -1;\n}\n\n/**\n * Returns true if the post can be saved, or false otherwise. A post must\n * contain a title, an excerpt, or non-empty content to be valid for save.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post can be saved.\n */\nexport function isEditedPostSaveable( state ) {\n\tif ( isSavingPost( state ) ) {\n\t\treturn false;\n\t}\n\n\t// TODO: Post should not be saveable if not dirty. Cannot be added here at\n\t// this time since posts where meta boxes are present can be saved even if\n\t// the post is not dirty. Currently this restriction is imposed at UI, but\n\t// should be moved here.\n\t//\n\t//  See: `isEditedPostPublishable` (includes `isEditedPostDirty` condition)\n\t//  See: <PostSavedState /> (`forceIsDirty` prop)\n\t//  See: <PostPublishButton /> (`forceIsDirty` prop)\n\t//  See: https://github.com/WordPress/gutenberg/pull/4184\n\n\treturn (\n\t\t!! getEditedPostAttribute( state, 'title' ) ||\n\t\t!! getEditedPostAttribute( state, 'excerpt' ) ||\n\t\t! isEditedPostEmpty( state )\n\t);\n}\n\n/**\n * Returns true if the edited post has content. A post has content if it has at\n * least one saveable block or otherwise has a non-empty content property\n * assigned.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post has content.\n */\nexport function isEditedPostEmpty( state ) {\n\t// While the condition of truthy content string is sufficient to determine\n\t// emptiness, testing saveable blocks length is a trivial operation. Since\n\t// this function can be called frequently, optimize for the fast case as a\n\t// condition of the mere existence of blocks. Note that the value of edited\n\t// content takes precedent over block content, and must fall through to the\n\t// default logic.\n\tconst blocks = getEditorBlocks( state );\n\n\tif ( blocks.length ) {\n\t\t// Pierce the abstraction of the serializer in knowing that blocks are\n\t\t// joined with with newlines such that even if every individual block\n\t\t// produces an empty save result, the serialized content is non-empty.\n\t\tif ( blocks.length > 1 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// There are two conditions under which the optimization cannot be\n\t\t// assumed, and a fallthrough to getEditedPostContent must occur:\n\t\t//\n\t\t// 1. getBlocksForSerialization has special treatment in omitting a\n\t\t//    single unmodified default block.\n\t\t// 2. Comment delimiters are omitted for a freeform or unregistered\n\t\t//    block in its serialization. The freeform block specifically may\n\t\t//    produce an empty string in its saved output.\n\t\t//\n\t\t// For all other content, the single block is assumed to make a post\n\t\t// non-empty, if only by virtue of its own comment delimiters.\n\t\tconst blockName = blocks[ 0 ].name;\n\t\tif (\n\t\t\tblockName !== getDefaultBlockName() &&\n\t\t\tblockName !== getFreeformContentHandlerName()\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn ! getEditedPostContent( state );\n}\n\n/**\n * Returns true if the post can be autosaved, or false otherwise.\n *\n * @param {Object} state    Global application state.\n * @param {Object} autosave A raw autosave object from the REST API.\n *\n * @return {boolean} Whether the post can be autosaved.\n */\nexport const isEditedPostAutosaveable = createRegistrySelector( ( select ) => function( state ) {\n\t// A post must contain a title, an excerpt, or non-empty content to be valid for autosaving.\n\tif ( ! isEditedPostSaveable( state ) ) {\n\t\treturn false;\n\t}\n\n\t// A post is not autosavable when there is a post autosave lock.\n\tif ( isPostAutosavingLocked( state ) ) {\n\t\treturn false;\n\t}\n\n\tconst postType = getCurrentPostType( state );\n\tconst postId = getCurrentPostId( state );\n\tconst hasFetchedAutosave = select( 'core' ).hasFetchedAutosaves( postType, postId );\n\tconst currentUserId = get( select( 'core' ).getCurrentUser(), [ 'id' ] );\n\n\t// Disable reason - this line causes the side-effect of fetching the autosave\n\t// via a resolver, moving below the return would result in the autosave never\n\t// being fetched.\n\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\tconst autosave = select( 'core' ).getAutosave( postType, postId, currentUserId );\n\n\t// If any existing autosaves have not yet been fetched, this function is\n\t// unable to determine if the post is autosaveable, so return false.\n\tif ( ! hasFetchedAutosave ) {\n\t\treturn false;\n\t}\n\n\t// If we don't already have an autosave, the post is autosaveable.\n\tif ( ! autosave ) {\n\t\treturn true;\n\t}\n\n\t// To avoid an expensive content serialization, use the content dirtiness\n\t// flag in place of content field comparison against the known autosave.\n\t// This is not strictly accurate, and relies on a tolerance toward autosave\n\t// request failures for unnecessary saves.\n\tif ( hasChangedContent( state ) ) {\n\t\treturn true;\n\t}\n\n\t// If the title or excerpt has changed, the post is autosaveable.\n\treturn [ 'title', 'excerpt' ].some( ( field ) => (\n\t\tgetPostRawValue( autosave[ field ] ) !== getEditedPostAttribute( state, field )\n\t) );\n} );\n\n/**\n * Returns the current autosave, or null if one is not set (i.e. if the post\n * has yet to be autosaved, or has been saved or published since the last\n * autosave).\n *\n * @deprecated since 5.6. Callers should use the `getAutosave( postType, postId, userId )`\n * \t\t\t   selector from the '@wordpress/core-data' package.\n *\n * @param {Object} state Editor state.\n *\n * @return {?Object} Current autosave, if exists.\n */\nexport const getAutosave = createRegistrySelector( ( select ) => ( state ) => {\n\tdeprecated( '`wp.data.select( \\'core/editor\\' ).getAutosave()`', {\n\t\talternative: '`wp.data.select( \\'core\\' ).getAutosave( postType, postId, userId )`',\n\t\tplugin: 'Gutenberg',\n\t} );\n\n\tconst postType = getCurrentPostType( state );\n\tconst postId = getCurrentPostId( state );\n\tconst currentUserId = get( select( 'core' ).getCurrentUser(), [ 'id' ] );\n\tconst autosave = select( 'core' ).getAutosave( postType, postId, currentUserId );\n\treturn mapValues( pick( autosave, AUTOSAVE_PROPERTIES ), getPostRawValue );\n} );\n\n/**\n * Returns the true if there is an existing autosave, otherwise false.\n *\n * @deprecated since 5.6. Callers should use the `getAutosave( postType, postId, userId )` selector\n *             from the '@wordpress/core-data' package and check for a truthy value.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether there is an existing autosave.\n */\nexport const hasAutosave = createRegistrySelector( ( select ) => ( state ) => {\n\tdeprecated( '`wp.data.select( \\'core/editor\\' ).hasAutosave()`', {\n\t\talternative: '`!! wp.data.select( \\'core\\' ).getAutosave( postType, postId, userId )`',\n\t\tplugin: 'Gutenberg',\n\t} );\n\n\tconst postType = getCurrentPostType( state );\n\tconst postId = getCurrentPostId( state );\n\tconst currentUserId = get( select( 'core' ).getCurrentUser(), [ 'id' ] );\n\treturn !! select( 'core' ).getAutosave( postType, postId, currentUserId );\n} );\n\n/**\n * Return true if the post being edited is being scheduled. Preferring the\n * unsaved status values.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post has been published.\n */\nexport function isEditedPostBeingScheduled( state ) {\n\tconst date = getEditedPostAttribute( state, 'date' );\n\t// Offset the date by one minute (network latency)\n\tconst checkedDate = new Date( Number( getDate( date ) ) - ONE_MINUTE_IN_MS );\n\n\treturn isInTheFuture( checkedDate );\n}\n\n/**\n * Returns whether the current post should be considered to have a \"floating\"\n * date (i.e. that it would publish \"Immediately\" rather than at a set time).\n *\n * Unlike in the PHP backend, the REST API returns a full date string for posts\n * where the 0000-00-00T00:00:00 placeholder is present in the database. To\n * infer that a post is set to publish \"Immediately\" we check whether the date\n * and modified date are the same.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the edited post has a floating date value.\n */\nexport function isEditedPostDateFloating( state ) {\n\tconst date = getEditedPostAttribute( state, 'date' );\n\tconst modified = getEditedPostAttribute( state, 'modified' );\n\tconst status = getEditedPostAttribute( state, 'status' );\n\tif ( status === 'draft' || status === 'auto-draft' || status === 'pending' ) {\n\t\treturn date === modified;\n\t}\n\treturn false;\n}\n\n/**\n * Returns true if the post is currently being saved, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post is being saved.\n */\nexport const isSavingPost = createRegistrySelector( ( select ) => ( state ) => {\n\tconst postType = getCurrentPostType( state );\n\tconst postId = getCurrentPostId( state );\n\treturn select( 'core' ).isSavingEntityRecord( 'postType', postType, postId );\n} );\n\n/**\n * Returns true if a previous post save was attempted successfully, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post was saved successfully.\n */\nexport const didPostSaveRequestSucceed = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\treturn ! select( 'core' ).getLastEntitySaveError( 'postType', postType, postId );\n\t}\n);\n\n/**\n * Returns true if a previous post save was attempted but failed, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post save failed.\n */\nexport const didPostSaveRequestFail = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\treturn !! select( 'core' ).getLastEntitySaveError( 'postType', postType, postId );\n\t}\n);\n\n/**\n * Returns true if the post is autosaving, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is autosaving.\n */\nexport function isAutosavingPost( state ) {\n\tif ( ! isSavingPost( state ) ) {\n\t\treturn false;\n\t}\n\treturn !! get( state.saving, [ 'options', 'isAutosave' ] );\n}\n\n/**\n * Returns true if the post is being previewed, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is being previewed.\n */\nexport function isPreviewingPost( state ) {\n\tif ( ! isSavingPost( state ) ) {\n\t\treturn false;\n\t}\n\treturn !! state.saving.options.isPreview;\n}\n\n/**\n * Returns the post preview link\n *\n * @param {Object} state Global application state.\n *\n * @return {string?} Preview Link.\n */\nexport function getEditedPostPreviewLink( state ) {\n\tif ( state.saving.pending || isSavingPost( state ) ) {\n\t\treturn;\n\t}\n\n\tlet previewLink = getAutosaveAttribute( state, 'preview_link' );\n\tif ( ! previewLink ) {\n\t\tpreviewLink = getEditedPostAttribute( state, 'link' );\n\t\tif ( previewLink ) {\n\t\t\tpreviewLink = addQueryArgs( previewLink, { preview: true } );\n\t\t}\n\t}\n\tconst featuredImageId = getEditedPostAttribute( state, 'featured_media' );\n\n\tif ( previewLink && featuredImageId ) {\n\t\treturn addQueryArgs( previewLink, { _thumbnail_id: featuredImageId } );\n\t}\n\n\treturn previewLink;\n}\n\n/**\n * Returns a suggested post format for the current post, inferred only if there\n * is a single block within the post and it is of a type known to match a\n * default post format. Returns null if the format cannot be determined.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Suggested post format.\n */\nexport function getSuggestedPostFormat( state ) {\n\tconst blocks = getEditorBlocks( state );\n\n\tlet name;\n\t// If there is only one block in the content of the post grab its name\n\t// so we can derive a suitable post format from it.\n\tif ( blocks.length === 1 ) {\n\t\tname = blocks[ 0 ].name;\n\t}\n\n\t// If there are two blocks in the content and the last one is a text blocks\n\t// grab the name of the first one to also suggest a post format from it.\n\tif ( blocks.length === 2 ) {\n\t\tif ( blocks[ 1 ].name === 'core/paragraph' ) {\n\t\t\tname = blocks[ 0 ].name;\n\t\t}\n\t}\n\n\t// We only convert to default post formats in core.\n\tswitch ( name ) {\n\t\tcase 'core/image':\n\t\t\treturn 'image';\n\t\tcase 'core/quote':\n\t\tcase 'core/pullquote':\n\t\t\treturn 'quote';\n\t\tcase 'core/gallery':\n\t\t\treturn 'gallery';\n\t\tcase 'core/video':\n\t\tcase 'core-embed/youtube':\n\t\tcase 'core-embed/vimeo':\n\t\t\treturn 'video';\n\t\tcase 'core/audio':\n\t\tcase 'core-embed/spotify':\n\t\tcase 'core-embed/soundcloud':\n\t\t\treturn 'audio';\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns a set of blocks which are to be used in consideration of the post's\n * generated save content.\n *\n * @deprecated since Gutenberg 6.2.0.\n *\n * @param {Object} state Editor state.\n *\n * @return {WPBlock[]} Filtered set of blocks for save.\n */\nexport function getBlocksForSerialization( state ) {\n\tdeprecated( '`core/editor` getBlocksForSerialization selector', {\n\t\tplugin: 'Gutenberg',\n\t\talternative: 'getEditorBlocks',\n\t\thint: 'Blocks serialization pre-processing occurs at save time',\n\t} );\n\n\tconst blocks = state.editor.present.blocks.value;\n\n\t// WARNING: Any changes to the logic of this function should be verified\n\t// against the implementation of isEditedPostEmpty, which bypasses this\n\t// function for performance' sake, in an assumption of this current logic\n\t// being irrelevant to the optimized condition of emptiness.\n\n\t// A single unmodified default block is assumed to be equivalent to an\n\t// empty post.\n\tconst isSingleUnmodifiedDefaultBlock = (\n\t\tblocks.length === 1 &&\n\t\tisUnmodifiedDefaultBlock( blocks[ 0 ] )\n\t);\n\n\tif ( isSingleUnmodifiedDefaultBlock ) {\n\t\treturn [];\n\t}\n\n\treturn blocks;\n}\n\n/**\n * Returns the content of the post being edited.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Post content.\n */\nexport const getEditedPostContent = createRegistrySelector( ( select ) => ( state ) => {\n\tconst postId = getCurrentPostId( state );\n\tconst postType = getCurrentPostType( state );\n\tconst record = select( 'core' ).getEditedEntityRecord(\n\t\t'postType',\n\t\tpostType,\n\t\tpostId\n\t);\n\tif ( record ) {\n\t\tif ( typeof record.content === 'function' ) {\n\t\t\treturn record.content( record );\n\t\t} else if ( record.blocks ) {\n\t\t\treturn serializeBlocks( record.blocks );\n\t\t} else if ( record.content ) {\n\t\t\treturn record.content;\n\t\t}\n\t}\n\treturn '';\n} );\n\n/**\n * Returns the reusable block with the given ID.\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The reusable block's ID.\n *\n * @return {Object} The reusable block, or null if none exists.\n */\nexport const __experimentalGetReusableBlock = createSelector(\n\t( state, ref ) => {\n\t\tconst block = state.reusableBlocks.data[ ref ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst isTemporary = isNaN( parseInt( ref ) );\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tid: isTemporary ? ref : +ref,\n\t\t\tisTemporary,\n\t\t};\n\t},\n\t( state, ref ) => [\n\t\tstate.reusableBlocks.data[ ref ],\n\t],\n);\n\n/**\n * Returns whether or not the reusable block with the given ID is being saved.\n *\n * @param {Object} state Global application state.\n * @param {string} ref   The reusable block's ID.\n *\n * @return {boolean} Whether or not the reusable block is being saved.\n */\nexport function __experimentalIsSavingReusableBlock( state, ref ) {\n\treturn state.reusableBlocks.isSaving[ ref ] || false;\n}\n\n/**\n * Returns true if the reusable block with the given ID is being fetched, or\n * false otherwise.\n *\n * @param {Object} state Global application state.\n * @param {string} ref   The reusable block's ID.\n *\n * @return {boolean} Whether the reusable block is being fetched.\n */\nexport function __experimentalIsFetchingReusableBlock( state, ref ) {\n\treturn !! state.reusableBlocks.isFetching[ ref ];\n}\n\n/**\n * Returns an array of all reusable blocks.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} An array of all reusable blocks.\n */\nexport const __experimentalGetReusableBlocks = createSelector(\n\t( state ) => {\n\t\treturn map(\n\t\t\tstate.reusableBlocks.data,\n\t\t\t( value, ref ) => __experimentalGetReusableBlock( state, ref )\n\t\t);\n\t},\n\t( state ) => [\n\t\tstate.reusableBlocks.data,\n\t]\n);\n\n/**\n * Returns state object prior to a specified optimist transaction ID, or `null`\n * if the transaction corresponding to the given ID cannot be found.\n *\n * @param {Object} state         Current global application state.\n * @param {Object} transactionId Optimist transaction ID.\n *\n * @return {Object} Global application state prior to transaction.\n */\nexport function getStateBeforeOptimisticTransaction( state, transactionId ) {\n\tconst transaction = find( state.optimist, ( entry ) => (\n\t\tentry.beforeState &&\n\t\tget( entry.action, [ 'optimist', 'id' ] ) === transactionId\n\t) );\n\n\treturn transaction ? transaction.beforeState : null;\n}\n\n/**\n * Returns true if the post is being published, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post is being published.\n */\nexport function isPublishingPost( state ) {\n\tif ( ! isSavingPost( state ) ) {\n\t\treturn false;\n\t}\n\n\t// Saving is optimistic, so assume that current post would be marked as\n\t// published if publishing\n\tif ( ! isCurrentPostPublished( state ) ) {\n\t\treturn false;\n\t}\n\n\t// Use post update transaction ID to retrieve the state prior to the\n\t// optimistic transaction\n\tconst stateBeforeRequest = getStateBeforeOptimisticTransaction(\n\t\tstate,\n\t\tPOST_UPDATE_TRANSACTION_ID\n\t);\n\n\t// Consider as publishing when current post prior to request was not\n\t// considered published\n\treturn (\n\t\t!! stateBeforeRequest &&\n\t\t! isCurrentPostPublished( null, stateBeforeRequest.currentPost )\n\t);\n}\n\n/**\n * Returns whether the permalink is editable or not.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether or not the permalink is editable.\n */\nexport function isPermalinkEditable( state ) {\n\tconst permalinkTemplate = getEditedPostAttribute( state, 'permalink_template' );\n\n\treturn PERMALINK_POSTNAME_REGEX.test( permalinkTemplate );\n}\n\n/**\n * Returns the permalink for the post.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} The permalink, or null if the post is not viewable.\n */\nexport function getPermalink( state ) {\n\tconst permalinkParts = getPermalinkParts( state );\n\tif ( ! permalinkParts ) {\n\t\treturn null;\n\t}\n\n\tconst { prefix, postName, suffix } = permalinkParts;\n\n\tif ( isPermalinkEditable( state ) ) {\n\t\treturn prefix + postName + suffix;\n\t}\n\n\treturn prefix;\n}\n\n/**\n * Returns the permalink for a post, split into it's three parts: the prefix,\n * the postName, and the suffix.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} An object containing the prefix, postName, and suffix for\n *                  the permalink, or null if the post is not viewable.\n */\nexport function getPermalinkParts( state ) {\n\tconst permalinkTemplate = getEditedPostAttribute( state, 'permalink_template' );\n\tif ( ! permalinkTemplate ) {\n\t\treturn null;\n\t}\n\n\tconst postName = getEditedPostAttribute( state, 'slug' ) || getEditedPostAttribute( state, 'generated_slug' );\n\n\tconst [ prefix, suffix ] = permalinkTemplate.split( PERMALINK_POSTNAME_REGEX );\n\n\treturn {\n\t\tprefix,\n\t\tpostName,\n\t\tsuffix,\n\t};\n}\n\n/**\n * Returns true if an optimistic transaction is pending commit, for which the\n * before state satisfies the given predicate function.\n *\n * @param {Object}   state     Editor state.\n * @param {Function} predicate Function given state, returning true if match.\n *\n * @return {boolean} Whether predicate matches for some history.\n */\nexport function inSomeHistory( state, predicate ) {\n\tconst { optimist } = state;\n\n\t// In recursion, optimist state won't exist. Assume exhausted options.\n\tif ( ! optimist ) {\n\t\treturn false;\n\t}\n\n\treturn optimist.some( ( { beforeState } ) => (\n\t\tbeforeState && predicate( beforeState )\n\t) );\n}\n\n/**\n * Returns whether the post is locked.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is locked.\n */\nexport function isPostLocked( state ) {\n\treturn state.postLock.isLocked;\n}\n\n/**\n * Returns whether post saving is locked.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is locked.\n */\nexport function isPostSavingLocked( state ) {\n\treturn Object.keys( state.postSavingLock ).length > 0;\n}\n\n/**\n * Returns whether post autosaving is locked.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is locked.\n */\nexport function isPostAutosavingLocked( state ) {\n\treturn Object.keys( state.postAutosavingLock ).length > 0;\n}\n\n/**\n * Returns whether the edition of the post has been taken over.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is post lock takeover.\n */\nexport function isPostLockTakeover( state ) {\n\treturn state.postLock.isTakeover;\n}\n\n/**\n * Returns details about the post lock user.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} A user object.\n */\nexport function getPostLockUser( state ) {\n\treturn state.postLock.user;\n}\n\n/**\n * Returns the active post lock.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} The lock object.\n */\nexport function getActivePostLock( state ) {\n\treturn state.postLock.activePostLock;\n}\n\n/**\n * Returns whether or not the user has the unfiltered_html capability.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the user can or can't post unfiltered HTML.\n */\nexport function canUserUseUnfilteredHTML( state ) {\n\treturn has( getCurrentPost( state ), [ '_links', 'wp:action-unfiltered-html' ] );\n}\n\n/**\n * Returns whether the pre-publish panel should be shown\n * or skipped when the user clicks the \"publish\" button.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the pre-publish panel should be shown or not.\n */\nexport function isPublishSidebarEnabled( state ) {\n\tif ( state.preferences.hasOwnProperty( 'isPublishSidebarEnabled' ) ) {\n\t\treturn state.preferences.isPublishSidebarEnabled;\n\t}\n\treturn PREFERENCES_DEFAULTS.isPublishSidebarEnabled;\n}\n\n/**\n * Return the current block list.\n *\n * @param {Object} state\n * @return {Array} Block list.\n */\nexport function getEditorBlocks( state ) {\n\treturn getEditedPostAttribute( state, 'blocks' ) || EMPTY_ARRAY;\n}\n\n/**\n * Is the editor ready\n *\n * @param {Object} state\n * @return {boolean} is Ready.\n */\nexport function __unstableIsEditorReady( state ) {\n\treturn state.isReady;\n}\n\n/**\n * Returns the post editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getEditorSettings( state ) {\n\treturn state.editorSettings;\n}\n\n/*\n * Backward compatibility\n */\n\nfunction getBlockEditorSelector( name ) {\n\treturn createRegistrySelector( ( select ) => ( state, ...args ) => {\n\t\tdeprecated( '`wp.data.select( \\'core/editor\\' ).' + name + '`', {\n\t\t\talternative: '`wp.data.select( \\'core/block-editor\\' ).' + name + '`',\n\t\t} );\n\n\t\treturn select( 'core/block-editor' )[ name ]( ...args );\n\t} );\n}\n\n/**\n * @see getBlockName in core/block-editor store.\n */\nexport const getBlockName = getBlockEditorSelector( 'getBlockName' );\n\n/**\n * @see isBlockValid in core/block-editor store.\n */\nexport const isBlockValid = getBlockEditorSelector( 'isBlockValid' );\n\n/**\n * @see getBlockAttributes in core/block-editor store.\n */\nexport const getBlockAttributes = getBlockEditorSelector( 'getBlockAttributes' );\n\n/**\n * @see getBlock in core/block-editor store.\n */\nexport const getBlock = getBlockEditorSelector( 'getBlock' );\n\n/**\n * @see getBlocks in core/block-editor store.\n */\nexport const getBlocks = getBlockEditorSelector( 'getBlocks' );\n\n/**\n * @see __unstableGetBlockWithoutInnerBlocks in core/block-editor store.\n */\nexport const __unstableGetBlockWithoutInnerBlocks = getBlockEditorSelector( '__unstableGetBlockWithoutInnerBlocks' );\n\n/**\n * @see getClientIdsOfDescendants in core/block-editor store.\n */\nexport const getClientIdsOfDescendants = getBlockEditorSelector( 'getClientIdsOfDescendants' );\n\n/**\n * @see getClientIdsWithDescendants in core/block-editor store.\n */\nexport const getClientIdsWithDescendants = getBlockEditorSelector( 'getClientIdsWithDescendants' );\n\n/**\n * @see getGlobalBlockCount in core/block-editor store.\n */\nexport const getGlobalBlockCount = getBlockEditorSelector( 'getGlobalBlockCount' );\n\n/**\n * @see getBlocksByClientId in core/block-editor store.\n */\nexport const getBlocksByClientId = getBlockEditorSelector( 'getBlocksByClientId' );\n\n/**\n * @see getBlockCount in core/block-editor store.\n */\nexport const getBlockCount = getBlockEditorSelector( 'getBlockCount' );\n\n/**\n * @see getBlockSelectionStart in core/block-editor store.\n */\nexport const getBlockSelectionStart = getBlockEditorSelector( 'getBlockSelectionStart' );\n\n/**\n * @see getBlockSelectionEnd in core/block-editor store.\n */\nexport const getBlockSelectionEnd = getBlockEditorSelector( 'getBlockSelectionEnd' );\n\n/**\n * @see getSelectedBlockCount in core/block-editor store.\n */\nexport const getSelectedBlockCount = getBlockEditorSelector( 'getSelectedBlockCount' );\n\n/**\n * @see hasSelectedBlock in core/block-editor store.\n */\nexport const hasSelectedBlock = getBlockEditorSelector( 'hasSelectedBlock' );\n\n/**\n * @see getSelectedBlockClientId in core/block-editor store.\n */\nexport const getSelectedBlockClientId = getBlockEditorSelector( 'getSelectedBlockClientId' );\n\n/**\n * @see getSelectedBlock in core/block-editor store.\n */\nexport const getSelectedBlock = getBlockEditorSelector( 'getSelectedBlock' );\n\n/**\n * @see getBlockRootClientId in core/block-editor store.\n */\nexport const getBlockRootClientId = getBlockEditorSelector( 'getBlockRootClientId' );\n\n/**\n * @see getBlockHierarchyRootClientId in core/block-editor store.\n */\nexport const getBlockHierarchyRootClientId = getBlockEditorSelector( 'getBlockHierarchyRootClientId' );\n\n/**\n * @see getAdjacentBlockClientId in core/block-editor store.\n */\nexport const getAdjacentBlockClientId = getBlockEditorSelector( 'getAdjacentBlockClientId' );\n\n/**\n * @see getPreviousBlockClientId in core/block-editor store.\n */\nexport const getPreviousBlockClientId = getBlockEditorSelector( 'getPreviousBlockClientId' );\n\n/**\n * @see getNextBlockClientId in core/block-editor store.\n */\nexport const getNextBlockClientId = getBlockEditorSelector( 'getNextBlockClientId' );\n\n/**\n * @see getSelectedBlocksInitialCaretPosition in core/block-editor store.\n */\nexport const getSelectedBlocksInitialCaretPosition = getBlockEditorSelector( 'getSelectedBlocksInitialCaretPosition' );\n\n/**\n * @see getMultiSelectedBlockClientIds in core/block-editor store.\n */\nexport const getMultiSelectedBlockClientIds = getBlockEditorSelector( 'getMultiSelectedBlockClientIds' );\n\n/**\n * @see getMultiSelectedBlocks in core/block-editor store.\n */\nexport const getMultiSelectedBlocks = getBlockEditorSelector( 'getMultiSelectedBlocks' );\n\n/**\n * @see getFirstMultiSelectedBlockClientId in core/block-editor store.\n */\nexport const getFirstMultiSelectedBlockClientId = getBlockEditorSelector( 'getFirstMultiSelectedBlockClientId' );\n\n/**\n * @see getLastMultiSelectedBlockClientId in core/block-editor store.\n */\nexport const getLastMultiSelectedBlockClientId = getBlockEditorSelector( 'getLastMultiSelectedBlockClientId' );\n\n/**\n * @see isFirstMultiSelectedBlock in core/block-editor store.\n */\nexport const isFirstMultiSelectedBlock = getBlockEditorSelector( 'isFirstMultiSelectedBlock' );\n\n/**\n * @see isBlockMultiSelected in core/block-editor store.\n */\nexport const isBlockMultiSelected = getBlockEditorSelector( 'isBlockMultiSelected' );\n\n/**\n * @see isAncestorMultiSelected in core/block-editor store.\n */\nexport const isAncestorMultiSelected = getBlockEditorSelector( 'isAncestorMultiSelected' );\n\n/**\n * @see getMultiSelectedBlocksStartClientId in core/block-editor store.\n */\nexport const getMultiSelectedBlocksStartClientId = getBlockEditorSelector( 'getMultiSelectedBlocksStartClientId' );\n\n/**\n * @see getMultiSelectedBlocksEndClientId in core/block-editor store.\n */\nexport const getMultiSelectedBlocksEndClientId = getBlockEditorSelector( 'getMultiSelectedBlocksEndClientId' );\n\n/**\n * @see getBlockOrder in core/block-editor store.\n */\nexport const getBlockOrder = getBlockEditorSelector( 'getBlockOrder' );\n\n/**\n * @see getBlockIndex in core/block-editor store.\n */\nexport const getBlockIndex = getBlockEditorSelector( 'getBlockIndex' );\n\n/**\n * @see isBlockSelected in core/block-editor store.\n */\nexport const isBlockSelected = getBlockEditorSelector( 'isBlockSelected' );\n\n/**\n * @see hasSelectedInnerBlock in core/block-editor store.\n */\nexport const hasSelectedInnerBlock = getBlockEditorSelector( 'hasSelectedInnerBlock' );\n\n/**\n * @see isBlockWithinSelection in core/block-editor store.\n */\nexport const isBlockWithinSelection = getBlockEditorSelector( 'isBlockWithinSelection' );\n\n/**\n * @see hasMultiSelection in core/block-editor store.\n */\nexport const hasMultiSelection = getBlockEditorSelector( 'hasMultiSelection' );\n\n/**\n * @see isMultiSelecting in core/block-editor store.\n */\nexport const isMultiSelecting = getBlockEditorSelector( 'isMultiSelecting' );\n\n/**\n * @see isSelectionEnabled in core/block-editor store.\n */\nexport const isSelectionEnabled = getBlockEditorSelector( 'isSelectionEnabled' );\n\n/**\n * @see getBlockMode in core/block-editor store.\n */\nexport const getBlockMode = getBlockEditorSelector( 'getBlockMode' );\n\n/**\n * @see isTyping in core/block-editor store.\n */\nexport const isTyping = getBlockEditorSelector( 'isTyping' );\n\n/**\n * @see isCaretWithinFormattedText in core/block-editor store.\n */\nexport const isCaretWithinFormattedText = getBlockEditorSelector( 'isCaretWithinFormattedText' );\n\n/**\n * @see getBlockInsertionPoint in core/block-editor store.\n */\nexport const getBlockInsertionPoint = getBlockEditorSelector( 'getBlockInsertionPoint' );\n\n/**\n * @see isBlockInsertionPointVisible in core/block-editor store.\n */\nexport const isBlockInsertionPointVisible = getBlockEditorSelector( 'isBlockInsertionPointVisible' );\n\n/**\n * @see isValidTemplate in core/block-editor store.\n */\nexport const isValidTemplate = getBlockEditorSelector( 'isValidTemplate' );\n\n/**\n * @see getTemplate in core/block-editor store.\n */\nexport const getTemplate = getBlockEditorSelector( 'getTemplate' );\n\n/**\n * @see getTemplateLock in core/block-editor store.\n */\nexport const getTemplateLock = getBlockEditorSelector( 'getTemplateLock' );\n\n/**\n * @see canInsertBlockType in core/block-editor store.\n */\nexport const canInsertBlockType = getBlockEditorSelector( 'canInsertBlockType' );\n\n/**\n * @see getInserterItems in core/block-editor store.\n */\nexport const getInserterItems = getBlockEditorSelector( 'getInserterItems' );\n\n/**\n * @see hasInserterItems in core/block-editor store.\n */\nexport const hasInserterItems = getBlockEditorSelector( 'hasInserterItems' );\n\n/**\n * @see getBlockListSettings in core/block-editor store.\n */\nexport const getBlockListSettings = getBlockEditorSelector( 'getBlockListSettings' );\n"]}