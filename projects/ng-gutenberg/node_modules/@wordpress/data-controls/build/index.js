"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.select = select;
exports.dispatch = dispatch;
exports.controls = exports.apiFetch = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _apiFetch = _interopRequireDefault(require("@wordpress/api-fetch"));

var _data = require("@wordpress/data");

/**
 * WordPress dependencies
 */

/**
 * Dispatches a control action for triggering an api fetch call.
 *
 * @param {Object} request Arguments for the fetch request.
 *
 * @example
 * ```js
 * import { apiFetch } from '@wordpress/data-controls';
 *
 * // Action generator using apiFetch
 * export function* myAction {
 *		const path = '/v2/my-api/items';
 *		const items = yield apiFetch( { path } );
 *		// do something with the items.
 * }
 * ```
 *
 * @return {Object} The control descriptor.
 */
var apiFetch = function apiFetch(request) {
  return {
    type: 'API_FETCH',
    request: request
  };
};
/**
 * Dispatches a control action for triggering a registry select.
 *
 * Note: when this control action is handled, it automatically considers
 * selectors that may have a resolver. It will await and return the resolved
 * value when the selector has not been resolved yet.
 *
 * @param {string} storeKey      The key for the store the selector belongs to
 * @param {string} selectorName  The name of the selector
 * @param {Array}  args          Arguments for the select.
 *
 * @example
 * ```js
 * import { select } from '@wordpress/data-controls';
 *
 * // Action generator using select
 * export function* myAction {
 *		const isSidebarOpened = yield select( 'core/edit-post', 'isEditorSideBarOpened' );
 *		// do stuff with the result from the select.
 * }
 * ```
 *
 * @return {Object} The control descriptor.
 */


exports.apiFetch = apiFetch;

function select(storeKey, selectorName) {
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  return {
    type: 'SELECT',
    storeKey: storeKey,
    selectorName: selectorName,
    args: args
  };
}
/**
 * Dispatches a control action for triggering a registry dispatch.
 *
 * @param {string} storeKey    The key for the store the action belongs to
 * @param {string} actionName  The name of the action to dispatch
 * @param {Array}  args        Arguments for the dispatch action.
 *
 * @example
 * ```js
 * import { dispatch } from '@wordpress/data-controls';
 *
 * // Action generator using dispatch
 * export function* myAction {
 *   yield dispatch( 'core/edit-post' ).togglePublishSidebar();
 *   // do some other things.
 * }
 * ```
 *
 * @return {Object}  The control descriptor.
 */


function dispatch(storeKey, actionName) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    args[_key2 - 2] = arguments[_key2];
  }

  return {
    type: 'DISPATCH',
    storeKey: storeKey,
    actionName: actionName,
    args: args
  };
}
/**
 * Utility for returning a promise that handles a selector with a resolver.
 *
 * @param {Object} registry             The data registry.
 * @param {Object} options
 * @param {string} options.storeKey     The store the selector belongs to
 * @param {string} options.selectorName The selector name
 * @param {Array}  options.args         The arguments fed to the selector
 *
 * @return {Promise}  A promise for resolving the given selector.
 */


var resolveSelect = function resolveSelect(registry, _ref) {
  var storeKey = _ref.storeKey,
      selectorName = _ref.selectorName,
      args = _ref.args;
  return new Promise(function (resolve) {
    var hasFinished = function hasFinished() {
      return registry.select('core/data').hasFinishedResolution(storeKey, selectorName, args);
    };

    var getResult = function getResult() {
      return registry.select(storeKey)[selectorName].apply(null, args);
    }; // trigger the selector (to trigger the resolver)


    var result = getResult();

    if (hasFinished()) {
      return resolve(result);
    }

    var unsubscribe = registry.subscribe(function () {
      if (hasFinished()) {
        unsubscribe();
        resolve(getResult());
      }
    });
  });
};
/**
 * The default export is what you use to register the controls with your custom
 * store.
 *
 * @example
 * ```js
 * // WordPress dependencies
 * import { controls } from '@wordpress/data-controls';
 * import { registerStore } from '@wordpress/data';
 *
 * // Internal dependencies
 * import reducer from './reducer';
 * import * as selectors from './selectors';
 * import * as actions from './actions';
 * import * as resolvers from './resolvers';
 *
 * registerStore ( 'my-custom-store', {
 * 	reducer,
 * 	controls,
 * 	actions,
 * 	selectors,
 * 	resolvers,
 * } );
 * ```
 *
 * @return {Object} An object for registering the default controls with the
 *                  store.
 */


var controls = {
  API_FETCH: function API_FETCH(_ref2) {
    var request = _ref2.request;
    return (0, _apiFetch.default)(request);
  },
  SELECT: (0, _data.createRegistryControl)(function (registry) {
    return function (_ref3) {
      var _registry$select;

      var storeKey = _ref3.storeKey,
          selectorName = _ref3.selectorName,
          args = _ref3.args;
      return registry.select(storeKey)[selectorName].hasResolver ? resolveSelect(registry, {
        storeKey: storeKey,
        selectorName: selectorName,
        args: args
      }) : (_registry$select = registry.select(storeKey))[selectorName].apply(_registry$select, (0, _toConsumableArray2.default)(args));
    };
  }),
  DISPATCH: (0, _data.createRegistryControl)(function (registry) {
    return function (_ref4) {
      var _registry$dispatch;

      var storeKey = _ref4.storeKey,
          actionName = _ref4.actionName,
          args = _ref4.args;
      return (_registry$dispatch = registry.dispatch(storeKey))[actionName].apply(_registry$dispatch, (0, _toConsumableArray2.default)(args));
    };
  })
};
exports.controls = controls;
//# sourceMappingURL=index.js.map