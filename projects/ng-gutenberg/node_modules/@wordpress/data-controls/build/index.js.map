{"version":3,"sources":["@wordpress/data-controls/src/index.js"],"names":["apiFetch","request","type","select","storeKey","selectorName","args","dispatch","actionName","resolveSelect","registry","Promise","resolve","hasFinished","hasFinishedResolution","getResult","apply","result","unsubscribe","subscribe","controls","API_FETCH","SELECT","hasResolver","DISPATCH"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport triggerFetch from '@wordpress/api-fetch';\nimport { createRegistryControl } from '@wordpress/data';\n\n/**\n * Dispatches a control action for triggering an api fetch call.\n *\n * @param {Object} request Arguments for the fetch request.\n *\n * @example\n * ```js\n * import { apiFetch } from '@wordpress/data-controls';\n *\n * // Action generator using apiFetch\n * export function* myAction {\n *\t\tconst path = '/v2/my-api/items';\n *\t\tconst items = yield apiFetch( { path } );\n *\t\t// do something with the items.\n * }\n * ```\n *\n * @return {Object} The control descriptor.\n */\nexport const apiFetch = ( request ) => {\n\treturn {\n\t\ttype: 'API_FETCH',\n\t\trequest,\n\t};\n};\n\n/**\n * Dispatches a control action for triggering a registry select.\n *\n * Note: when this control action is handled, it automatically considers\n * selectors that may have a resolver. It will await and return the resolved\n * value when the selector has not been resolved yet.\n *\n * @param {string} storeKey      The key for the store the selector belongs to\n * @param {string} selectorName  The name of the selector\n * @param {Array}  args          Arguments for the select.\n *\n * @example\n * ```js\n * import { select } from '@wordpress/data-controls';\n *\n * // Action generator using select\n * export function* myAction {\n *\t\tconst isSidebarOpened = yield select( 'core/edit-post', 'isEditorSideBarOpened' );\n *\t\t// do stuff with the result from the select.\n * }\n * ```\n *\n * @return {Object} The control descriptor.\n */\nexport function select( storeKey, selectorName, ...args ) {\n\treturn {\n\t\ttype: 'SELECT',\n\t\tstoreKey,\n\t\tselectorName,\n\t\targs,\n\t};\n}\n\n/**\n * Dispatches a control action for triggering a registry dispatch.\n *\n * @param {string} storeKey    The key for the store the action belongs to\n * @param {string} actionName  The name of the action to dispatch\n * @param {Array}  args        Arguments for the dispatch action.\n *\n * @example\n * ```js\n * import { dispatch } from '@wordpress/data-controls';\n *\n * // Action generator using dispatch\n * export function* myAction {\n *   yield dispatch( 'core/edit-post' ).togglePublishSidebar();\n *   // do some other things.\n * }\n * ```\n *\n * @return {Object}  The control descriptor.\n */\nexport function dispatch( storeKey, actionName, ...args ) {\n\treturn {\n\t\ttype: 'DISPATCH',\n\t\tstoreKey,\n\t\tactionName,\n\t\targs,\n\t};\n}\n\n/**\n * Utility for returning a promise that handles a selector with a resolver.\n *\n * @param {Object} registry             The data registry.\n * @param {Object} options\n * @param {string} options.storeKey     The store the selector belongs to\n * @param {string} options.selectorName The selector name\n * @param {Array}  options.args         The arguments fed to the selector\n *\n * @return {Promise}  A promise for resolving the given selector.\n */\nconst resolveSelect = ( registry, { storeKey, selectorName, args } ) => {\n\treturn new Promise( ( resolve ) => {\n\t\tconst hasFinished = () => registry.select( 'core/data' )\n\t\t\t.hasFinishedResolution( storeKey, selectorName, args );\n\t\tconst getResult = () => registry.select( storeKey )[ selectorName ]\n\t\t\t.apply( null, args );\n\n\t\t// trigger the selector (to trigger the resolver)\n\t\tconst result = getResult();\n\t\tif ( hasFinished() ) {\n\t\t\treturn resolve( result );\n\t\t}\n\n\t\tconst unsubscribe = registry.subscribe( () => {\n\t\t\tif ( hasFinished() ) {\n\t\t\t\tunsubscribe();\n\t\t\t\tresolve( getResult() );\n\t\t\t}\n\t\t} );\n\t} );\n};\n\n/**\n * The default export is what you use to register the controls with your custom\n * store.\n *\n * @example\n * ```js\n * // WordPress dependencies\n * import { controls } from '@wordpress/data-controls';\n * import { registerStore } from '@wordpress/data';\n *\n * // Internal dependencies\n * import reducer from './reducer';\n * import * as selectors from './selectors';\n * import * as actions from './actions';\n * import * as resolvers from './resolvers';\n *\n * registerStore ( 'my-custom-store', {\n * \treducer,\n * \tcontrols,\n * \tactions,\n * \tselectors,\n * \tresolvers,\n * } );\n * ```\n *\n * @return {Object} An object for registering the default controls with the\n *                  store.\n */\nexport const controls = {\n\tAPI_FETCH( { request } ) {\n\t\treturn triggerFetch( request );\n\t},\n\tSELECT: createRegistryControl(\n\t\t( registry ) => ( { storeKey, selectorName, args } ) => {\n\t\t\treturn registry.select( storeKey )[ selectorName ].hasResolver ?\n\t\t\t\tresolveSelect( registry, { storeKey, selectorName, args } ) :\n\t\t\t\tregistry.select( storeKey )[ selectorName ]( ...args );\n\t\t}\n\t),\n\tDISPATCH: createRegistryControl(\n\t\t( registry ) => ( { storeKey, actionName, args } ) => {\n\t\t\treturn registry.dispatch( storeKey )[ actionName ]( ...args );\n\t\t}\n\t),\n};\n"]}